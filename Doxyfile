# 项目名称，此名称将会作为生成文档的标题显示，明确标识该文档所属的项目。
PROJECT_NAME            =  CARLA

# 文档生成目录，指定 Doxygen 工具生成文档后存放的文件夹位置，方便统一管理生成的文档文件。
OUTPUT_DIRECTORY        =  Doxygen

# 输出语言，设置生成文档所使用的语言为中文，使得生成的文档内容便于中文使用者阅读和理解。
OUTPUT_LANGUAGE         =  Chinese

# 生成文档时，为每个类创建单独的子目录，这样的结构有助于文档的分类管理，使不同类的文档内容更加清晰、有条理地存放。
CREATE_SUBDIRS          =  YES

# 不显示完整路径名，在文档中展示文件、类等相关元素时，仅显示相对简洁的名称，避免路径信息过长影响文档的可读性。
FULL_PATH_NAMES         =  NO

# 自动将 JavaDoc 样式注释的第一行作为函数的简短描述，方便快速提取函数的核心功能描述，符合常见的文档注释规范和提取习惯。
JAVADOC_AUTOBRIEF       =  YES

# 设置文档查找缓存大小为 3，通过缓存一定量的查找结果，提高文档生成过程中查找相关元素的效率，减少重复查找操作。
LOOKUP_CACHE_SIZE       =  3

# 强制提取所有类和文件，确保项目中的所有类和文件都会被纳入文档生成的范围，不遗漏任何部分的信息记录。
EXTRACT_ALL             =  YES

# 生成文档时可包含私有成员，意味着在生成的文档中会展示类的私有成员信息，方便全面了解类的内部结构和实现细节。
EXTRACT_PRIVATE         =  YES

# 生成文档时可包含静态成员，与包含私有成员类似，可将类中的静态成员也展示在文档里，完善文档对类成员的记录。
EXTRACT_STATIC          =  YES

# 大小写敏感的类名和文件名，在文档生成及相关查找、引用等操作中，严格区分类名和文件名的大小写，保证文档内容的准确性和严谨性。
CASE_SENSE_NAMES        =  YES

# 可按字母顺序对简短描述进行排序，使文档中函数等元素的简短描述呈现更有条理的排列顺序，便于查看和查阅相关内容。
SORT_BRIEF_DOCS         =  YES

# 如果有未记录的类或文件，不产生警告，即对于那些没有添加对应文档注释的类或文件，在文档生成过程中不会弹出警告信息，可根据实际需求灵活控制文档完整性的检查严格程度。
WARN_IF_UNDOCUMENTED    =  NO

# 警告信息输出到指定的日志文件中，将文档生成过程中产生的警告信息统一记录到 Doxygen 目录下的 warnings.log 文件里，方便后续查看和分析可能出现的问题。
WARN_LOGFILE            =  Doxygen/warnings.log

# 扫描哪些文件，明确指定需要 Doxygen 工具扫描的文件所在的目录路径，这里列出了多个项目相关的源文件目录，涵盖了 Unreal 引擎下 CarlaUE4 的不同模块以及 LibCarla 的源文件目录等，确保全面获取项目的代码信息用于文档生成。
INPUT                   =  Unreal/CarlaUE4/Source Unreal/CarlaUE4/Plugins/Carla/Source LibCarla/source

# 指定要扫描的文件类型，限定 Doxygen 工具只对这些后缀名的文件进行扫描分析，筛选出符合项目代码文件格式的文件进行文档生成处理，这里主要针对常见的 C++ 代码文件类型。
FILE_PATTERNS           =  *.cpp *.h *.hpp *.cc

# 指定不需要扫描的文件或路径，将某些特定的文件（如这里的 LibCarla/source/carla/Version.h 文件）排除在扫描范围之外，可能是因为该文件有特殊情况不需要纳入文档生成或者避免对文档生成造成干扰等原因。
EXCLUDE                 =  LibCarla/source/carla/Version.h

# 递归扫描，意味着 Doxygen 工具会深入到指定的 INPUT 目录及其子目录中，对所有符合 FILE_PATTERNS 的文件进行扫描，确保全面覆盖项目的代码结构，不会遗漏深层次目录下的文件。
RECURSIVE               =  YES

# 生成文档时包含源代码浏览视图，方便在查看文档时能够直接浏览对应的源代码内容，增强文档与代码之间的关联性和查阅便利性。
SOURCE_BROWSER          =  YES

# 保留源代码中的注释内容，在生成文档过程中不删除代码中的注释，使文档能完整呈现代码中的注释信息，更好地辅助理解代码逻辑和功能。
STRIP_CODE_COMMENTS     =  NO

# 在文档中显示函数的被引用关系，有助于了解函数在整个项目代码中的使用情况，以及不同函数之间的调用依赖关系，从被调用的角度展示函数的重要性和关联性。
REFERENCED_BY_RELATION  =  YES

# 在文档中显示函数的引用关系，与显示被引用关系相对应，从函数主动调用其他函数的角度展示函数之间的关联情况，全面呈现函数在代码中的调用逻辑。
REFERENCES_RELATION     =  YES

# 不生成按字母排序的索引，根据项目实际需求选择不生成这种常见的索引形式，可能是因为文档结构或使用场景等原因不需要通过字母顺序索引来查找内容。
ALPHABETICAL_INDEX      =  NO

# 生成 HTML 文档时，支持动态显示和隐藏部分内容，为 HTML 文档提供交互性，方便使用者根据需要展开或收起某些文档内容，提升阅读体验。
HTML_DYNAMIC_SECTIONS   =  YES

# 不生成索引页，同样是基于项目实际需求决定不创建常规的索引页面，简化文档结构或者避免不必要的页面生成。
DISABLE_INDEX           =  YES

# 不生成类和文件的树状视图，根据具体情况选择不在文档中以树状结构展示类和文件的层次关系，可能已有其他更合适的文档导航或展示方式。
GENERATE_TREEVIEW       =  NO

# 设置数学公式的字体大小为 12，当文档中存在数学公式相关内容时，统一规范其字体大小，保证文档视觉上的一致性和美观性。
FORMULA_FONTSIZE        =  12

# 不生成 LaTeX 格式的文档，明确指定不需要 Doxygen 工具生成 LaTeX 格式的文档版本，专注于其他所需格式（如 HTML 等）的文档生成。
GENERATE_LATEX          =  NO

# 允许预处理宏在生成文档时展开，确保文档中能准确呈现经过宏展开后的代码逻辑和相关信息，更真实地反映代码实际运行时的情况。
MACRO_EXPANSION         =  YES

# 仅展开在配置中预定义的宏，对宏展开进行限制，只处理在本配置文件中预先定义好的宏，避免不必要的宏展开导致文档内容混乱或出现意外情况。
EXPAND_ONLY_PREDEF      =  YES

# 包含路径，指定一些额外的目录路径，在文档生成过程中，Doxygen 工具会依据这些路径去查找相关的头文件等内容，确保代码的依赖关系能够正确解析，顺利生成完整准确的文档。
INCLUDE_PATH            =  Unreal/CarlaUE4/Source Unreal/CarlaUE4/Plugins/Carla/Source Unreal/CarlaUE4/Plugins/CarlaExporter/Source/CarlaExporter Unreal/CarlaUE4/Plugins/CarlaTools/Source/CarlaTools/Private Unreal/CarlaUE4/Plugins/CarlaTools/Source/CarlaTools/Public LibCarla/source

# 仅包含指定类型的文件，进一步筛选在文档生成时纳入的文件范围，只针对特定后缀名（这里主要是头文件类型）的文件进行相关处理，细化文档生成的文件选取规则。
INCLUDE_FILE_PATTERNS   =  *.h *.hpp

# 不隐藏未记录的类和文件之间的关系，即使某些类或文件没有添加文档注释，它们之间实际存在的关联关系依然会在文档中显示出来，保持文档对代码关系呈现的完整性。
HIDE_UNDOC_RELATIONS    =  NO

# 启用 dot 工具生成依赖图、调用图等，借助 dot 工具以图形化的方式展示项目代码中类、函数等元素之间的复杂关系，便于直观理解代码结构和调用逻辑。
HAVE_DOT                =  YES

# 生成类模板之间的关系图，专门针对类模板部分，通过图形展示它们之间的关联情况，帮助深入理解类模板在项目中的运用和相互关系。
TEMPLATE_RELATIONS      =  YES

# 生成函数的调用图，以图形化方式呈现函数之间的调用顺序和依赖关系，清晰展示函数调用的流程，有助于分析代码的执行逻辑。
CALL_GRAPH              =  YES

# 生成函数的调用者图，与调用图相对应，从调用者的角度展示哪些函数调用了特定的函数，从另一个维度呈现函数在代码中的地位和关联情况。
CALLER_GRAPH            =  YES

# dot 工具生成的图像格式为 SVG，指定使用 SVG 这种矢量图形格式来保存 dot 工具生成的各种关系图，具有良好的缩放性和在网页等环境中的展示效果。
DOT_IMAGE_FORMAT        =  svg

# 生成支持交互的 SVG 图像，让生成的 SVG 图像具备交互功能，例如鼠标悬停显示提示信息、点击展开详细内容等，提升用户查看关系图时的体验和信息获取效率。
INTERACTIVE_SVG         =  YES

# 允许 dot 工具生成多个图像目标，根据代码的复杂结构和多样化的关系展示需求，支持 dot 工具生成多个不同的图像文件来分别呈现不同方面或部分的关系内容。
DOT_MULTI_TARGETS       =  YES
