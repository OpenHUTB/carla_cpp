@echo off
setlocal enabledelayedexpansion
rem 关闭命令回显，即执行命令时不在屏幕上显示命令本身，只显示命令的输出结果。
rem 设置延迟环境变量扩展，这样可以在批处理中使用感叹号（!）来获取实时更新的变量值，常用于循环或代码块内部修改变量的场景。

rem BAT script that creates the binaries for Carla (carla.org).
rem Run it through a cmd with the x64 Visual C++ Toolset enabled.
rem 这是一个用于为Carla（carla.org相关项目）创建二进制文件的批处理脚本。
rem 需要在启用了x64 Visual C++工具集的命令提示符（cmd）中运行此脚本。

set LOCAL_PATH=%~dp0
set FILE_N=-[%~n0]:
rem 设置LOCAL_PATH变量，%~dp0表示获取当前批处理脚本所在的目录路径，方便后续基于此路径进行相关文件和目录的操作。
rem 设置FILE_N变量，用于在输出日志信息时添加一个带有脚本文件名的前缀，方便识别信息来源，格式为 -[脚本文件名]: 。

rem Print batch params (debug purpose)
echo %FILE_N% [Batch params]: %*
rem 输出批处理脚本接收到的参数（用于调试目的），%*表示获取传递给批处理脚本的所有参数，通过FILE_N添加前缀后输出，便于查看传入的参数情况。

rem ============================================================================
rem -- Parse arguments ---------------------------------------------------------
rem ============================================================================
rem 以下是解析命令行参数的代码块，用于根据传入的不同参数设置相应的变量值，以决定脚本的具体执行行为。

set BUILD_UE4_EDITOR=false
set LAUNCH_UE4_EDITOR=false
set REMOVE_INTERMEDIATE=false
set USE_CARSIM=false
set USE_CHRONO=false
set USE_UNITY=true
set CARSIM_STATE="CarSim OFF"
set CHRONO_STATE="Chrono OFF"
set UNITY_STATE="Unity ON"
set AT_LEAST_WRITE_OPTIONALMODULES=false
set EDITOR_FLAGS=""
set USE_ROS2=false
set ROS2_STATE="Ros2 OFF"
rem 初始化一系列变量，设置它们的默认值，这些变量将用于控制脚本后续不同功能的执行与否，例如是否构建UE4编辑器、是否启动UE4编辑器、是否使用某些特定模块等。

:arg-parse
echo %1
if not "%1"=="" (
    if "%1"=="--editor-flags" (
        set EDITOR_FLAGS=%2
        shift
    )
    if "%1"=="--build" (
        set BUILD_UE4_EDITOR=true
    )
    if "%1"=="--launch" (
        set LAUNCH_UE4_EDITOR=true
    )
    if "%1"=="--clean" (
        set REMOVE_INTERMEDIATE=true
    )
    if "%1"=="--carsim" (
        set USE_CARSIM=true
    )
    if "%1"=="--chrono" (
        set USE_CHRONO=true
    )
    if "%1"=="--ros2" (
        set USE_ROS2=true
    )
    if "%1"=="--no-unity" (
        set USE_UNITY=false
    )
    if "%1"=="--at-least-write-optionalmodules" (
        set AT_LEAST_WRITE_OPTIONALMODULES=true
    )
    if "%1"=="-h" (
        goto help
    )
    if "%1"=="--help" (
        goto help
    )
    shift
    goto arg-parse
)
rem 定义一个标签为arg-parse的代码块，用于循环解析传入的命令行参数。
rem 首先输出第一个参数（%1）用于调试查看当前正在处理的参数内容。
rem 然后通过一系列的条件判断，根据不同的参数值设置对应的变量，例如遇到--editor-flags参数，就将下一个参数（%2）赋值给EDITOR_FLAGS变量，并使用shift命令将参数列表向左移动一位，丢弃已经处理过的参数，继续处理下一个参数。
rem 如果参数匹配到-h或--help则跳转到help标签处执行帮助信息输出的相关代码。
rem 最后通过shift和goto arg-parse实现循环处理所有传入的参数，直到所有参数都被解析完。

rem remove quotes from arguments
set EDITOR_FLAGS=%EDITOR_FLAGS:"=%
rem 去除EDITOR_FLAGS变量值中的双引号，确保后续使用该变量时不会因为引号出现问题，将其还原为原始的参数内容形式。

if %REMOVE_INTERMEDIATE% == false (
    if %LAUNCH_UE4_EDITOR% == false (
        if %BUILD_UE4_EDITOR% == false (
            if %AT_LEAST_WRITE_OPTIONALMODULES% == false (
                goto help
            )
        )
    )
)
rem 通过多层嵌套的条件判断，如果所有主要的执行功能选项（清理中间文件、启动UE4编辑器、构建UE4编辑器、写入可选模块）都为假，即没有指定任何有效的操作选项，那么跳转到help标签处输出帮助信息，提示用户如何正确使用脚本。

rem Get Unreal Engine root path
if not defined UE4_ROOT (
    set KEY_NAME="HKEY_LOCAL_MACHINE\SOFTWARE\EpicGames\Unreal Engine"
    set VALUE_NAME=InstalledDirectory
    for /f "usebackq tokens=1,2,*" %%A in (`reg query!KEY_NAME! /s /reg:64`) do (
        if "%%A" == "!VALUE_NAME!" (
            set UE4_ROOT=%%C
        )
    )
    if not defined UE4_ROOT goto error_unreal_no_found
)
if not "%UE4_ROOT:~-1%"=="\" set UE4_ROOT=%UE4_ROOT%\
rem 尝试获取Unreal Engine（虚幻引擎）的根目录路径。
rem 首先检查UE4_ROOT变量是否已经定义，如果未定义，则通过查询Windows注册表（HKEY_LOCAL_MACHINE\SOFTWARE\EpicGames\Unreal Engine键下的InstalledDirectory值）来获取安装目录路径，并将获取到的值赋给UE4_ROOT变量。
rem 如果最终还是没有获取到UE4_ROOT的值（即UE4未安装或者注册表信息有误等情况），则跳转到error_unreal_no_found标签处输出相应的错误信息。
rem 最后检查UE4_ROOT变量值的末尾字符，如果不是反斜杠（\），则添加一个反斜杠，确保路径格式的正确性，方便后续基于此路径进行文件和目录操作。

rem Set the visual studio solution directory
rem
set UE4_PROJECT_FOLDER=%ROOT_PATH:/=\%Unreal\CarlaUE4\
pushd "%UE4_PROJECT_FOLDER%"
rem 设置UE4项目文件夹的路径，将ROOT_PATH变量中的斜杠（/）替换为反斜杠（\），并拼接上Unreal\CarlaUE4，形成完整的项目文件夹路径（这里假设ROOT_PATH变量在前面有定义或者后续会被定义，此处代码可能存在一定的依赖问题，需确保相关变量的完整性）。
rem 使用pushd命令进入到指定的UE4_PROJECT_FOLDER目录，后续的操作将在此目录及其子目录下进行，改变了当前的工作目录位置。

rem Clear binaries and intermediates generated by the build system
rem
if %REMOVE_INTERMEDIATE% == true (
    rem Remove directories
    for %%G in (
        "%UE4_PROJECT_FOLDER%Binaries",
        "%UE4_PROJECT_FOLDER%Build",
        "%UE4_PROJECT_FOLDER%Saved",
        "%UE4_PROJECT_FOLDER%Intermediate",
        "%UE4_PROJECT_FOLDER%Plugins\Carla\Binaries",
        "%UE4_PROJECT_FOLDER%Plugins\Carla\Intermediate",
        "%UE4_PROJECT_FOLDER%Plugins\HoudiniEngine\",
        "%UE4_PROJECT_FOLDER%.vs"
    ) do (
        if exist %%G (
            echo %FILE_N% Cleaning %%G
            rmdir /s/q %%G
        )
    )

    rem Remove files
    for %%G in (
        "%UE4_PROJECT_FOLDER%CarlaUE4.sln"
    ) do (
        if exist %%G (
            echo %FILE_N% Cleaning %%G
            del %%G
        )
    )
}
rem 如果REMOVE_INTERMEDIATE变量为真（即用户指定了清理中间文件的操作），则执行以下清理操作：
rem 首先通过一个循环遍历一系列的目录路径，对于每个存在的目录（通过if exist判断），输出清理该目录的提示信息（使用FILE_N添加前缀），然后使用rmdir /s/q命令递归删除该目录及其所有子目录和文件，进行彻底的清理。
rem 接着再通过另一个循环遍历指定的文件路径，同样对于存在的文件，输出清理提示信息后使用del命令删除该文件，清除相关的项目文件，为重新构建等操作做准备。

rem Build Carla Editor
rem
set OMNIVERSE_PATCH_FOLDER=%ROOT_PATH%Util\Patches\omniverse_4.26\
set OMNIVERSE_PLUGIN_FOLDER=%UE4_ROOT%Engine\Plugins\Marketplace\NVIDIA\Omniverse\
if exist %OMNIVERSE_PLUGIN_FOLDER% (
    set OMNIVERSE_PLUGIN_INSTALLED="Omniverse ON"
    xcopy /Y /S /I "%OMNIVERSE_PATCH_FOLDER%USDCARLAInterface.h" "%OMNIVERSE_PLUGIN_FOLDER%Source\OmniverseUSD\Public\" > NUL
    xcopy /Y /S /I "%OMNIVERSE_PATCH_FOLDER%USDCARLAInterface.cpp" "%OMNIVERSE_PLUGIN_FOLDER%Source\OmniverseUSD\Private\" > NUL
) else (
    set OMNIVERSE_PLUGIN_INSTALLED="Omniverse OFF"
}
rem 设置Omniverse相关的补丁文件夹和插件文件夹路径，这可能与Carla项目在Omniverse方面的集成或扩展功能有关。
rem 通过判断OMNIVERSE_PLUGIN_FOLDER目录是否存在，来确定Omniverse插件是否已安装，如果存在则设置OMNIVERSE_PLUGIN_INSTALLED变量为"Omniverse ON"，并使用xcopy命令将指定的头文件（.h）和源文件（.cpp）复制到相应的插件目录下（覆盖已有文件，静默模式，递归复制且只复制指定类型文件），如果不存在则设置为"Omniverse OFF"，以此来标记Omniverse插件的安装状态。

if %USE_CARSIM% == true (
    python %ROOT_PATH%Util/BuildTools/enable_carsim_to_uproject.py -f="%ROOT_PATH%Unreal/CarlaUE4/CarlaUE4.uproject" -e
    set CARSIM_STATE="CarSim ON"
} else {
    python %ROOT_PATH%Util/BuildTools/enable_carsim_to_uproject.py -f="%ROOT_PATH%Unreal/CarlaUE4/CarlaUE4.uproject"
    set CARSIM_STATE="CarSim OFF"
}
if %USE_CHRONO% == true (
    set CHRONO_STATE="Chrono ON"
} else {
    set CHRONO_STATE="Chrono OFF"
}
if %USE_ROS2% == true (
    set ROS2_STATE="Ros2 ON"
} else {
    set ROS2_STATE="Ros2 OFF"
}
if %USE_UNITY% == true (
    set UNITY_STATE="Unity ON"
} else {
    set UNITY_STATE="Unity OFF"
}
set OPTIONAL_MODULES_TEXT=%CARSIM_STATE% %CHRONO_STATE% %ROS2_STATE% %OMNIVERSE_PLUGIN_INSTALLED% %UNITY_STATE%
echo %OPTIONAL_MODULES_TEXT% > "%ROOT_PATH%Unreal/CarlaUE4/Config/OptionalModules.ini"
rem 根据USE_CARSIM、USE_CHRONO、USE_ROS2、USE_UNITY等变量的值，分别调用相应的Python脚本（可能用于在项目文件中启用或禁用对应的功能模块），并设置对应的状态变量（如CARSIM_STATE、CHRONO_STATE等）。
rem 然后将这些状态变量组合成一个字符串赋值给OPTIONAL_MODULES_TEXT变量，最后将该字符串输出重定向到指定的OptionalModules.ini文件中，可能用于记录项目当前可选模块的启用/禁用状态信息。

if %BUILD_UE4_EDITOR% == true (
    echo %FILE_N% Building Unreal Editor...

    call "%UE4_ROOT%Engine\Build\BatchFiles\Build.bat"^
        CarlaUE4Editor^
        Win64^
        Development^
        -WaitMutex^
        -FromMsBuild^
        "%ROOT_PATH%Unreal/CarlaUE4/CarlaUE4.uproject"
    if errorlevel 1 goto bad_exit

    call "%UE4_ROOT%Engine\Build\BatchFiles\Build.bat"^
        CarlaUE4^
        Win64^
        Development^
        -WaitMutex^
        -FromMsBuild^
        "%ROOT_PATH%Unreal/CarlaUE4/CarlaUE4.uproject"
    if errorlevel 1 goto bad_exit
}
rem 如果BUILD_UE4_EDITOR变量为真（即用户指定了构建UE4编辑器的操作），则执行以下构建操作：
rem 首先输出正在构建Unreal Editor的提示信息（使用FILE_N添加前缀），然后通过call命令调用UE4_ROOT目录下的Build.bat脚本，并传递一系列参数（如构建目标、平台、配置等信息以及项目文件路径）来构建CarlaUE4Editor和CarlaUE4相关的内容。
rem 在每次调用Build.bat脚本后，通过if errorlevel 1判断构建过程是否出现错误（返回值大于等于1表示有错误），如果有错误则跳转到bad_exit标签处进行相应的错误处理。

rem Launch Carla Editor
rem
if %LAUNCH_UE4_EDITOR% == true (
    echo %FILE_N% Launching Unreal Editor...
    call "%UE4_ROOT%\Engine\Binaries\Win64\UE4Editor.exe"^
        "%UE4_PROJECT_FOLDER%CarlaUE4.uproject" %EDITOR_FLAGS%
    if %errorlevel% neq 0 goto error_build
}
rem 如果LAUNCH_UE4_EDITOR变量为真（即用户指定了启动UE4编辑器的操作），则执行以下启动操作：
rem 首先输出正在启动Unreal Editor的提示信息（使用FILE_N添加前缀），然后通过call命令调用UE4_ROOT目录下的UE4Editor.exe可执行文件，并传递项目文件路径和之前设置的EDITOR_FLAGS参数来启动CarlaUE4编辑器。
rem 通过if %errorlevel% neq 0判断启动过程是否出现错误（返回值不等于0表示有错误），如果有错误则跳转到error_build标签处进行相应的错误提示和处理。

goto good_exit

rem ============================================================================
rem -- Messages and Errors -----------------------------------------------------
rem ============================================================================

:help
    echo Build LibCarla.
    echo "Usage: %FILE_N% [-h^|--help] [--build] [--launch] [--clean]"
    goto good_exit
rem 定义help标签处的代码，用于输出脚本的帮助信息，简单说明脚本的功能（Build LibCarla）以及基本的使用方法，即列出可用的命令行参数选项，然后跳转到good_exit标签处正常退出脚本。

:error_build
    echo.
    echo %FILE_N% [ERROR] There was a problem building CarlaUE4.
    echo %FILE_N%         Please go to "Carla\Unreal\CarlaUE4", right click on
    echo %FILE_N%         "CarlaUE4.uproject" and select:
    echo %FILE_N%         "Generate Visual Studio project files"
    echo %FILE_N%         Open de generated "CarlaUE4.sln" and try to manually compile it
    echo %FILE_N%         and check what is causing the error.
    goto bad_exit
rem 定义error_build标签处的代码，用于在构建CarlaUE4出现问题时输出详细的错误提示信息，指导用户如何手动排查和解决构建过程中出现的问题，然后跳转到bad_exit标签处进行相应的错误处理操作（如设置退出码等）。

:good_exit
    endlocal
    exit /b 0
rem 定义good_exit标签处的代码，用于正常结束批处理脚本，恢复之前的环境设置（通过endlocal），并以退出码0表示正常退出。

:bad_exit
    endlocal
    exit /b %errorlevel%
rem 定义bad_exit标签处的代码，用于在出现错误情况时结束批处理脚本，同样恢复之前的环境设置（通过endlocal），并以出现错误时的返回值（%errorlevel%）作为退出码退出脚本，以便外部调用者可以获取到脚本执行出现错误的相关信息。

:error_unreal_no_found
    echo.
    echo %FILE_N% [ERROR] Unreal Engine not detected
    goto bad_exit
rem 定义error_unreal_no_found标签处的代码，用于在未检测到Unreal Engine（即未获取到UE4_ROOT路径）时输出相应的错误信息，然后跳转到bad_exit标签处进行错误处理操作，以合适的退出码退出脚本。
