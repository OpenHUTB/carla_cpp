// Version.h 文件，通常用于声明和定义软件项目的版本相关的常量、宏或者结构体等内容，
// 以便在整个项目中方便地获取和使用版本信息，利于版本管理以及向用户展示准确的版本标识等操作。

// 防止头文件被重复包含，这是一种常见的C/C++头文件保护机制，确保在编译过程中，该头文件的内容只会被编译一次。
#ifndef VERSION_H
#define VERSION_H

// 主版本号，一般用于表示软件大的迭代更新，当有重大功能变更或者架构调整时会递增，例如从 1.x 升级到 2.x 等。
const int MAJOR_VERSION = 1; 

// 次版本号，常用于记录相对主版本来说功能上的一些新增或者改进，每次添加了新功能且不会影响整体架构和兼容性时可以递增。
const int MINOR_VERSION = 0; 

// 修订版本号，通常用于修复一些小的漏洞、错误，或者对已有功能做细微调整等情况时进行递增，比如发布补丁版本时会修改这个值。
const int PATCH_VERSION = 0; 

// 可以定义一个函数（这里只是声明，函数实现可能在对应的源文件中），用于获取完整的版本字符串，
// 按照约定俗成的格式（如 "主版本号.次版本号.修订版本号"）拼接并返回版本信息，方便在程序中显示给用户等用途。
const char* getVersionString(); 

// 结束头文件保护的宏定义，与前面的#ifndef配对，确保正确的头文件包含逻辑。
#endif 
