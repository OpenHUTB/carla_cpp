// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImagePubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

// 条件编译指令，防止该头文件被重复包含。如果该头文件已经被包含过一次（_FAST_DDS_GENERATED_SENSOR_MSGS_MSG_IMAGE_PUBSUBTYPES_H_ 这个宏已经被定义），
// 则后续再遇到该头文件的包含语句时，编译器会跳过其内部的代码，避免重复定义等编译错误。
#ifndef _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_IMAGE_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_IMAGE_PUBSUBTYPES_H_

// 包含 Fast DDS 中用于定义主题数据类型（TopicDataType）相关基础类和接口的头文件，
// 为后续自定义的数据类型类（这里是 ImagePubSubType）继承相关功能提供必要的支持，比如定义了一些序列化、反序列化等相关操作的基础结构和接口。
#include <fastdds/dds/topic/TopicDataType.hpp>
// 包含 FastRTPS 中用于MD5计算相关功能的头文件，可能在处理数据（例如生成实例句柄等操作时）需要用到MD5算法来保证数据的唯一性标识等功能，
// 具体要看后续代码中是如何使用的。
#include <fastrtps/utils/md5.h>

// 包含自定义的 Image 类型的头文件，意味着真正要进行发布/订阅操作的数据结构定义在这个头文件中，
// ImagePubSubType 类所处理的数据对象就是基于此类型的，这里假设 Image 类型是用户自定义的用于表示图像相关信息的数据结构。
#include "Image.h"

// 条件编译检查，判断是否定义了 GEN_API_VER 宏，并且其值是否等于 1。
// 如果没有定义该宏或者其值不等于 1，说明生成的 Image 相关代码与当前安装的 Fast DDS 不兼容，
// 会输出错误提示信息，告知用户需要使用 fastddsgen 工具重新生成代码，以此确保代码能在对应的 Fast DDS 环境下正确运行。
#if!defined(GEN_API_VER) || (GEN_API_VER!= 1)
#error \
    Generated Image is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

// 定义在 sensor_msgs 命名空间下，这是一种常见的对代码进行组织的方式，用于区分不同功能模块、不同消息类型等，避免命名冲突，
// 可以将与传感器消息相关的各种类型、类等都放在这个大的命名空间下进行管理。
namespace sensor_msgs
{
    // 进一步细分到 msg 子命名空间，更具体地对消息相关的类型进行组织，使得代码结构更加清晰，例如可以在这里放置各种不同传感器消息类型对应的类定义等。
    namespace msg
    {
        // 以下是对 ImagePubSubType 类的定义，该类继承自 eprosima::fastdds::dds::TopicDataType，
        // 目的是为了实现针对用户在IDL文件中定义的 Image 类型的主题数据类型相关的各种操作，
        // 比如数据的序列化、反序列化、获取数据大小、获取实例标识等功能，使其能在 Fast DDS 框架下正确地参与发布/订阅通信流程。
        class ImagePubSubType : public eprosima::fastdds::dds::TopicDataType
        {
        public:
            // 使用 typedef 为 Image 类型定义一个别名 type，这样在类的内部可以更方便地使用这个类型，
            // 例如在函数参数、返回值等地方指代 Image 类型，提高代码的可读性和可维护性。
            typedef Image type;

            // 构造函数声明，被声明为 eProsima_user_DllExport，这可能是用于导出该函数以便在动态链接库等场景下能被外部正确访问的修饰符（具体要看对应编译环境和项目配置）。
            // 构造函数用于创建 ImagePubSubType 类的对象实例，通常会在内部进行一些初始化操作，比如设置与 Image 类型相关的数据成员的初始状态等。
            eProsima_user_DllExport ImagePubSubType();

            // 析构函数声明，同样被声明为 eProsima_user_DllExport 并使用 override 关键字表明是重写父类（TopicDataType）的析构函数。
            // 析构函数用于在对象生命周期结束时释放相关资源，例如清理构造函数中分配的内存等资源，确保内存不会泄漏等情况发生。
            eProsima_user_DllExport virtual ~ImagePubSubType() override;

            // 序列化函数声明，重写了父类的 serialize 函数。
            // 该函数的作用是将 Image 类型的数据对象（通过 void* data 指针传入，实际指向 Image 类型实例）转换为能在网络等环境中传输的序列化格式，
            // 并存储到 eprosima::fastrtps::rtps::SerializedPayload_t 结构体类型的对象中（通过 payload 指针传入），
            // 如果序列化操作成功则返回 true，否则返回 false。
            eProsima_user_DllExport virtual bool serialize(
                    void* data,
                    eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

            // 反序列化函数声明，重写了父类的 deserialize 函数。
            // 它的功能与 serialize 函数相反，从给定的序列化数据（payload 所指向的内容）中解析出 Image 类型的数据，
            // 并填充到 data 所指向的内存空间（该空间应能容纳 Image 类型对象），如果反序列化操作成功则返回 true，否则返回 false。
            eProsima_user_DllExport virtual bool deserialize(
                    eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                    void* data) override;

            // 获取序列化后数据大小的函数声明，重写了父类的相关函数。
            // 该函数返回一个 std::function<uint32_t()> 类型的可调用对象，调用这个对象时可以获取到对于给定的 Image 类型数据（通过 void* data 传入）序列化后的大小（以 uint32_t 类型表示），
            // 具体如何计算这个大小取决于该函数的实现逻辑，可能会根据 Image 类型内部的数据成员情况等来确定。
            eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
                    void* data) override;

            // 获取数据实例标识（键）的函数声明，重写了父类的 getKey 函数。
            // 它的作用是根据给定的 Image 类型数据（通过 void* data 传入）来生成一个对应的实例句柄（通过 eprosima::fastrtps::rtps::InstanceHandle_t* ihandle 传出），
            // 可以用于在发布/订阅系统中区分不同的实例，force_md5 参数默认值为 false，具体是否使用 MD5 算法等方式来生成句柄要看函数内部实现，
            // 如果成功获取到实例标识则返回 true，否则返回 false。
            eProsima_user_DllExport virtual bool getKey(
                    void* data,
                    eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                    bool force_md5 = false) override;

            // 创建数据对象的函数声明，重写了父类的 createData 函数。
            // 该函数用于创建一个 Image 类型的数据对象，返回的 void* 指针指向新创建的对象内存空间，
            // 具体创建过程可能涉及到内存分配等操作，其实现要保证创建出的对象符合 Image 类型的要求并且可以用于后续的序列化、发布等操作。
            eProsima_user_DllExport virtual void* createData() override;

            // 删除数据对象的函数声明，重写了父类的 deleteData 函数。
            // 它用于释放之前通过 createData 函数创建的 Image 类型数据对象所占用的内存资源，确保内存得到正确回收，避免内存泄漏等问题，
            // 参数 data 就是指向要删除的那个 Image 类型对象的指针。
            eProsima_user_DllExport virtual void deleteData(
                    void* data) override;
        };
    }
}

// 结束条件编译指令，与开头的 #ifndef 对应，完成头文件的定义保护。
#endif  // _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_IMAGE_PUBSUBTYPES_H_
        #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
            eProsima_user_DllExport inline bool is_bounded() const override
            {
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

        #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
            eProsima_user_DllExport inline bool is_plain() const override
            {
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

        #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
            eProsima_user_DllExport inline bool construct_sample(
                    void* memory) const override
            {
                (void)memory;
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
            MD5 m_md5;
            unsigned char* m_keyBuffer;
        };
    }
}

#endif // _FAST_DDS_GENERATED_SENSOR_MSGS_MSG_IMAGE_PUBSUBTYPES_H_
