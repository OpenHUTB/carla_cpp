// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavSatFix.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "NavSatFix.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define std_msgs_msg_Time_max_cdr_typesize 8ULL;
#define sensor_msgs_msg_NavSatStatus_max_cdr_typesize 4ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define sensor_msgs_msg_NavSatFix_max_cdr_typesize 369ULL;

#define std_msgs_msg_Time_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_NavSatStatus_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_NavSatFix_max_key_cdr_typesize 0ULL;

sensor_msgs::msg::NavSatFix::NavSatFix()
{
    // std_msgs::msg::Header m_header

    // sensor_msgs::msg::NavSatStatus m_status

    // double m_latitude
    m_latitude = 0.0;
    // double m_longitude
    m_longitude = 0.0;
    // double m_altitude
    m_altitude = 0.0;
    // sensor_msgs::msg::sensor_msgs__NavSatFix__double_array_9 m_position_covariance
    memset(&m_position_covariance, 0, (9) * 8);
    // octet m_position_covariance_type
    m_position_covariance_type = 0;
}
// 定义sensor_msgs::msg::NavSatFix类的析构函数，这里析构函数体为空，可能在父类或成员对象的析构中进行相关资源释放等操作（如果有需要的话）
sensor_msgs::msg::NavSatFix::~NavSatFix()
{
}
// 定义sensor_msgs::msg::NavSatFix类的拷贝构造函数，用于从一个已有的NavSatFix对象（这里用x表示）来初始化一个新的NavSatFix对象
// 它会将传入对象x的各个成员变量的值依次赋给新创建对象的对应成员变量，实现对象的拷贝创建
sensor_msgs::msg::NavSatFix::NavSatFix(
        const NavSatFix& x)
{
    // 将传入对象x的m_header成员变量的值赋给当前正在创建的对象的m_header成员变量
    m_header = x.m_header;
// 将传入对象x的m_status成员变量的值赋给当前正在创建的对象的m_status成员变量
    m_status = x.m_status;
// 将传入对象x的m_latitude成员变量的值赋给当前正在创建的对象的m_latitude成员变量
    m_latitude = x.m_latitude;
     // 将传入对象x的m_longitude成员变量的值赋给当前正在创建的对象的m_longitude成员变量
    m_longitude = x.m_longitude;
// 将传入对象x的m_altitude成员变量的值赋给当前正在创建的对象的m_altitude成员变量
    m_altitude = x.m_altitude;
// 将传入对象x的m_position_covariance成员变量的值赋给当前正在创建的对象的m_position_covariance成员变量
    m_position_covariance = x.m_position_covariance;
// 将传入对象x的m_position_covariance_type成员变量的值赋给当前正在创建的对象的m_position_covariance_type成员变量
    m_position_covariance_type = x.m_position_covariance_type;
}
// 定义sensor_msgs::msg::NavSatFix类的移动构造函数，用于通过“窃取”资源的方式从一个右值引用的NavSatFix对象（这里用x表示）来初始化一个新的NavSatFix对象
// 相比于拷贝构造函数，它更适用于避免不必要的拷贝开销，比如当对象包含一些动态分配资源（如指针指向的堆内存等情况）时，直接转移资源所有权
// 在这里将可移动的成员变量通过std::move进行资源转移，对于本身是基础类型（如这里的经纬度等）则直接赋值
sensor_msgs::msg::NavSatFix::NavSatFix(
        NavSatFix&& x) noexcept
{
    // 使用std::move将传入右值对象x的m_header成员变量所管理的资源转移给当前正在创建的对象的m_header成员变量，之后x的m_header处于有效但未定义状态（通常意味着其原有资源已转移走）
    m_header = std::move(x.m_header);
    // 使用std::move将传入右值对象x的m_status成员变量所管理的资源转移给当前正在创建的对象的m_status成员变量，之后x的m_status处于有效但未定义状态
    m_status = std::move(x.m_status);
 // 直接将传入右值对象x的m_latitude成员变量的值赋给当前正在创建的对象的m_latitude成员变量，因为m_latitude可能是基础类型（比如简单的数值类型）不需要进行资源转移操作
    m_latitude = x.m_latitude;
// 直接将传入右值对象x的m_longitude成员变量的值赋给当前正在创建的对象的m_longitude成员变量
    m_longitude = x.m_longitude;
// 直接将传入右值对象x的m_altitude成员变量的值赋给当前正在创建的对象的m_altitude成员变量
    m_altitude = x.m_altitude;
// 使用std::move将传入右值对象x的m_position_covariance成员变量所管理的资源转移给当前正在创建的对象的m_position_covariance成员变量
    m_position_covariance = std::move(x.m_position_covariance);
    // 将传入右值对象x的m_position_covariance_type成员变量的值赋给当前正在创建的对象的m_position_covariance_type成员变量
    m_position_covariance_type = x.m_position_covariance_type;
}
// 定义sensor_msgs::msg::NavSatFix类的赋值运算符重载函数，用于将一个已有的NavSatFix对象（这里用x表示）赋值给当前对象（通过*this表示）
// 它会将传入对象x的各个成员变量的值依次赋给当前对象的对应成员变量，实现对象的赋值操作，并返回当前对象的引用以便支持连续赋值等操作
sensor_msgs::msg::NavSatFix& sensor_msgs::msg::NavSatFix::operator =(
        const NavSatFix& x)
{
 // 将传入对象x的m_header成员变量的值赋给当前对象的m_header成员变量
    m_header = x.m_header;
     // 将传入对象x的m_status成员变量的值赋给当前对象的m_status成员变量
    m_status = x.m_status;
    // 将传入对象x的m_latitude成员变量的值赋给当前对象的m_latitude成员变量
    m_latitude = x.m_latitude;
     // 将传入对象x的m_longitude成员变量的值赋给当前对象的m_longitude成员变量
    m_longitude = x.m_longitude;
    // 将传入对象x的m_altitude成员变量的值赋给当前对象的m_altitude成员变量
    m_altitude = x.m_altitude;
// 将传入对象x的m_position_covariance成员变量的值赋给当前对象的m_position_covariance成员变量
    m_position_covariance = x.m_position_covariance;
// 将传入对象x的m_position_covariance_type成员变量的值赋给当前对象的m_position_covariance_type成员变量
    m_position_covariance_type = x.m_position_covariance_type;
    // 返回当前对象的引用，以支持连续赋值操作，比如 a = b = c这样的语法形式
    return *this;
}

// 重载赋值运算符（移动赋值），用于将一个NavSatFix右值对象的内容移动赋值给当前对象，声明为noexcept表示不会抛出异常
sensor_msgs::msg::NavSatFix& sensor_msgs::msg::NavSatFix::operator =(
        NavSatFix&& x) noexcept
{
    // 将传入对象的头部信息通过移动语义赋值给当前对象的头部信息，避免不必要的拷贝，提高效率
    m_header = std::move(x.m_header);
    // 将传入对象的状态信息通过移动语义赋值给当前对象的状态信息
    m_status = std::move(x.m_status);
    // 将传入对象的纬度值直接赋值给当前对象的纬度值（这里可能是普通赋值，具体看成员类型的设计）
    m_latitude = x.m_latitude;
    // 将传入对象的经度值直接赋值给当前对象的经度值
    m_longitude = x.m_longitude;
    // 将传入对象的高度值直接赋值给当前对象的高度值
    m_altitude = x.m_altitude;
    // 将传入对象的位置协方差信息通过移动语义赋值给当前对象的对应信息
    m_position_covariance = std::move(x.m_position_covariance);
    // 将传入对象的位置协方差类型直接赋值给当前对象的对应类型
    m_position_covariance_type = x.m_position_covariance_type;

    // 返回当前对象的引用，以支持连续赋值等操作
    return *this;
}

// 重载相等比较运算符，用于比较当前对象和传入的另一个NavSatFix对象是否相等，返回布尔值表示比较结果
bool sensor_msgs::msg::NavSatFix::operator ==(
        const NavSatFix& x) const
{
    // 通过依次比较各个成员变量是否相等，来判断两个NavSatFix对象整体是否相等，只有所有成员都相等时才返回true
    return (m_header == x.m_header && m_status == x.m_status && m_latitude == x.m_latitude && m_longitude == x.m_longitude && m_altitude == x.m_altitude && m_position_covariance == x.m_position_covariance && m_position_covariance_type == x.m_position_covariance_type);
}

// 重载不等比较运算符，通过对相等比较结果取反来判断当前对象和传入对象是否不相等，返回布尔值
bool sensor_msgs::msg::NavSatFix::operator!=(
        const NavSatFix& x) const
{
    return!(*this == x);
}

// 获取最大的CDR序列化大小，参数current_alignment可能用于处理对齐相关的情况，但此处被强制转换为void忽略了，直接返回预定义的最大CDR类型大小
size_t sensor_msgs::msg::NavSatFix::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_NavSatFix_max_cdr_typesize;
}

// 获取给定NavSatFix对象的CDR序列化大小，根据对象各个成员的序列化大小逐步累加计算，同时考虑对齐等因素
size_t sensor_msgs::msg::NavSatFix::getCdrSerializedSize(
        const sensor_msgs::msg::NavSatFix& data,
        size_t current_alignment)
{
    // 记录初始的对齐值，用于后面计算相对于初始状态增加的序列化大小
    size_t initial_alignment = current_alignment;
    // 将当前对齐值更新为加上头部信息序列化大小后的新对齐值，递归调用相关函数来计算头部的序列化大小
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    // 类似地，更新对齐值为加上状态信息序列化大小后的新值，调用对应函数计算状态信息的序列化大小
    current_alignment += sensor_msgs::msg::NavSatStatus::getCdrSerializedSize(data.status(), current_alignment);
    // 增加8字节（可能是某个成员数据的大小），并根据当前对齐情况进行对齐调整，将调整后的对齐值更新回来
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    // 返回相对于初始对齐值增加的序列化大小，即对象整体的序列化大小
    return current_alignment - initial_alignment;
}
// 定义sensor_msgs::msg::NavSatFix类的serialize函数，该函数用于将NavSatFix对象的内容序列化为特定格式（这里使用eprosima::fastcdr::Cdr来进行操作），以便进行网络传输、存储等操作
// 函数接收一个eprosima::fastcdr::Cdr类型的引用scdr作为参数，用于将对象的数据写入其中，且函数被声明为const，表示不会修改调用该函数的对象本身的状态
void sensor_msgs::msg::NavSatFix::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
// 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_header成员变量的内容序列化（写入）到scdr中，按照该类定义的序列化规则进行数据的组织和存储
    scdr << m_header;
     // 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_status成员变量的内容序列化（写入）到scdr中
    scdr << m_status;
    // 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_latitude成员变量的内容序列化（写入）到scdr中
    scdr << m_latitude;
    // 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_longitude成员变量的内容序列化（写入）到scdr中
    scdr << m_longitude;
// 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_altitude成员变量的内容序列化（写入）到scdr中
    scdr << m_altitude;
// 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_position_covariance成员变量的内容序列化（写入）到scdr中
    scdr << m_position_covariance;
// 使用eprosima::fastcdr::Cdr类的重载的<<运算符，将NavSatFix对象的m_position_covariance_type成员变量的内容序列化（写入）到scdr中
    scdr << m_position_covariance_type;
}
// 定义sensor_msgs::msg::NavSatFix类的deserialize函数，该函数用于从给定的eprosima::fastcdr::Cdr对象（通常是从网络接收、存储读取等得到的数据载体）中反序列化出NavSatFix对象的数据，即恢复对象的各个成员变量的值
// 函数接收一个eprosima::fastcdr::Cdr类型的引用dcdr作为参数，从中读取数据来填充NavSatFix对象的各个成员变量
void sensor_msgs::msg::NavSatFix::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
// 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_header成员变量中，按照该类定义的反序列化规则进行数据的解析和赋值
    dcdr >> m_header;
    // 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_status成员变量中
    dcdr >> m_status;
// 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_latitude成员变量中
    dcdr >> m_latitude;
// 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_longitude成员变量中
    dcdr >> m_longitude;
// 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_altitude成员变量中
    dcdr >> m_altitude;
// 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_position_covariance成员变量中
    dcdr >> m_position_covariance;
    // 使用eprosima::fastcdr::Cdr类的重载的>>运算符，从dcdr中读取数据并反序列化（填充）到NavSatFix对象的m_position_covariance_type成员变量中
    dcdr >> m_position_covariance_type;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::NavSatFix::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::NavSatFix::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::NavSatFix::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::NavSatFix::header()
{
    return m_header;
}

/*!
 * @brief This function copies the value in member status
 * @param _status New value to be copied in member status
 */
void sensor_msgs::msg::NavSatFix::status(
        const sensor_msgs::msg::NavSatStatus& _status)
{
    m_status = _status;
}

/*!
 * @brief This function moves the value in member status
 * @param _status New value to be moved in member status
 */
void sensor_msgs::msg::NavSatFix::status(
        sensor_msgs::msg::NavSatStatus&& _status)
{
    m_status = std::move(_status);
}

/*!
 * @brief This function returns a constant reference to member status
 * @return Constant reference to member status
 */
const sensor_msgs::msg::NavSatStatus& sensor_msgs::msg::NavSatFix::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
sensor_msgs::msg::NavSatStatus& sensor_msgs::msg::NavSatFix::status()
{
    return m_status;
}

/*!
 * @brief This function sets a value in member latitude
 * @param _latitude New value for member latitude
 */
void sensor_msgs::msg::NavSatFix::latitude(
        double _latitude)
{
    m_latitude = _latitude;
}

/*!
 * @brief This function returns the value of member latitude
 * @return Value of member latitude
 */
double sensor_msgs::msg::NavSatFix::latitude() const
{
    return m_latitude;
}

/*!
 * @brief This function returns a reference to member latitude
 * @return Reference to member latitude
 */
double& sensor_msgs::msg::NavSatFix::latitude()
{
    return m_latitude;
}

/*!
 * @brief This function sets a value in member longitude
 * @param _longitude New value for member longitude
 */
void sensor_msgs::msg::NavSatFix::longitude(
        double _longitude)
{
    m_longitude = _longitude;
}

/*!
 * @brief This function returns the value of member longitude
 * @return Value of member longitude
 */
double sensor_msgs::msg::NavSatFix::longitude() const
{
    return m_longitude;
}

/*!
 * @brief This function returns a reference to member longitude
 * @return Reference to member longitude
 */
double& sensor_msgs::msg::NavSatFix::longitude()
{
    return m_longitude;
}

/*!
 * @brief This function sets a value in member altitude
 * @param _altitude New value for member altitude
 */
void sensor_msgs::msg::NavSatFix::altitude(
        double _altitude)
{
    m_altitude = _altitude;
}

/*!
 * @brief This function returns the value of member altitude
 * @return Value of member altitude
 */
double sensor_msgs::msg::NavSatFix::altitude() const
{
    return m_altitude;
}

/*!
 * @brief This function returns a reference to member altitude
 * @return Reference to member altitude
 */
double& sensor_msgs::msg::NavSatFix::altitude()
{
    return m_altitude;
}

/*!
 * @brief This function copies the value in member position_covariance
 * @param _position_covariance New value to be copied in member position_covariance
 */
void sensor_msgs::msg::NavSatFix::position_covariance(
        const sensor_msgs::msg::sensor_msgs__NavSatFix__double_array_9& _position_covariance)
{
    m_position_covariance = _position_covariance;
}

/*!
 * @brief This function moves the value in member position_covariance
 * @param _position_covariance New value to be moved in member position_covariance
 */
void sensor_msgs::msg::NavSatFix::position_covariance(
        sensor_msgs::msg::sensor_msgs__NavSatFix__double_array_9&& _position_covariance)
{
    m_position_covariance = std::move(_position_covariance);
}

/*!
 * @brief This function returns a constant reference to member position_covariance
 * @return Constant reference to member position_covariance
 */
const sensor_msgs::msg::sensor_msgs__NavSatFix__double_array_9& sensor_msgs::msg::NavSatFix::position_covariance() const
{
    return m_position_covariance;
}

/*!
 * @brief This function returns a reference to member position_covariance
 * @return Reference to member position_covariance
 */
sensor_msgs::msg::sensor_msgs__NavSatFix__double_array_9& sensor_msgs::msg::NavSatFix::position_covariance()
{
    return m_position_covariance;
}
/*!
 * @brief This function sets a value in member position_covariance_type
 * @param _position_covariance_type New value for member position_covariance_type
 */
void sensor_msgs::msg::NavSatFix::position_covariance_type(
        uint8_t _position_covariance_type)
{
    m_position_covariance_type = _position_covariance_type;
}

/*!
 * @brief This function returns the value of member position_covariance_type
 * @return Value of member position_covariance_type
 */
uint8_t sensor_msgs::msg::NavSatFix::position_covariance_type() const
{
    return m_position_covariance_type;
}

/*!
 * @brief This function returns a reference to member position_covariance_type
 * @return Reference to member position_covariance_type
 */
// 定义sensor_msgs::msg::NavSatFix类的成员函数position_covariance_type，它返回一个对成员变量m_position_covariance_type的引用
// 这样外部代码可以通过这个函数获取到该成员变量的引用，进而能够对其进行读取和修改操作，函数返回类型为uint8_t&，表明返回的是一个可修改的uint8_t类型的引用
uint8_t& sensor_msgs::msg::NavSatFix::position_covariance_type()
{
     // 直接返回成员变量m_position_covariance_type的引用，使得调用者可以通过该引用操作这个成员变量
    return m_position_covariance_type;
}
// 定义sensor_msgs::msg::NavSatFix类的成员函数getKeyMaxCdrSerializedSize，该函数用于获取在使用eprosima::fastcdr::Cdr进行序列化时，键（Key）的最大CDR序列化大小
// 函数接收一个size_t类型的参数current_alignment，表示当前的对齐情况（可能在一些特定的序列化场景中需要考虑数据对齐等因素），并返回一个size_t类型的值，表示最大序列化大小
size_t sensor_msgs::msg::NavSatFix::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    // 将current_alignment参数强制转换为void类型，意味着在这里并没有实际使用这个参数，可能在函数的完整逻辑中它本应被使用，但当前实现暂时忽略它（可能后续会补充相关逻辑或者在特定上下文中不需要使用它）
    static_cast<void>(current_alignment);
// 返回预定义的常量sensor_msgs_msg_NavSatFix_max_key_cdr_typesize作为键（Key）的最大CDR序列化大小，这个常量应该是在别处定义好的，代表了特定的大小值
    return sensor_msgs_msg_NavSatFix_max_key_cdr_typesize;
}
// 定义sensor_msgs::msg::NavSatFix类的成员函数isKeyDefined，用于判断键（Key）是否已经被定义
// 函数返回一个bool类型的值，true表示键已定义，false表示键未定义，在这里函数直接返回false，表示默认情况下键是未定义的状态
bool sensor_msgs::msg::NavSatFix::isKeyDefined()
{
    // 直接返回false，表示键未被定义，具体是否符合实际业务逻辑要根据整个程序对于键定义的相关要求来判断
    return false;
}
// 定义sensor_msgs::msg::NavSatFix类的成员函数serializeKey，用于将键（Key）进行序列化，将其内容按照eprosima::fastcdr::Cdr的规则写入到给定的scdr对象中
// 函数接收一个eprosima::fastcdr::Cdr类型的常量引用scdr作为参数，表示要将键数据序列化到的目标对象，并且函数被声明为const，表示不会修改调用该函数的NavSatFix对象本身的状态
void sensor_msgs::msg::NavSatFix::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    // 将scdr参数强制转换为void类型，意味着在这里并没有实际对scdr进行任何操作，可能是函数的实现还不完善或者在当前特定上下文中不需要真正执行序列化键的操作（只是预留了函数定义框架）
    (void) scdr;
}
