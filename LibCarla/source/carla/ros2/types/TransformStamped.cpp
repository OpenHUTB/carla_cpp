// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/*!
 * @file TransformStamped.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32
#include "TransformStamped.h"
#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;
#include <utility>
// 以下定义了各类消息结构体在CDR序列化时的最大类型尺寸，用于后续序列化相关操作中判断空间等情况
#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define geometry_msgs_msg_Transform_max_cdr_typesize 56ULL;
#define std_msgs_msg_Time_max_cdr_typesize 8ULL;
#define geometry_msgs_msg_TransformStamped_max_cdr_typesize 584ULL;
#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Transform_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Time_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_TransformStamped_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
// 定义geometry_msgs::msg::TransformStamped类的默认构造函数
// 用于初始化该类对象的各个成员变量
geometry_msgs::msg::TransformStamped::TransformStamped()
{
   // 初始化std_msgs::msg::Header类型的成员变量m_header，此处可能按照其默认构造方式进行初始化（具体取决于Header类的实现）
    // 初始化字符串类型的成员变量m_child_frame_id为空字符串，通常用于标识子坐标系的ID等相关用途
    m_child_frame_id ="";
// 初始化geometry_msgs::msg::Transform类型的成员变量m_transform，同样可能按照其默认构造方式初始化（取决于Transform类的实现）
}
// 定义geometry_msgs::msg::TransformStamped类的析构函数
// 用于释放该类对象所占用的资源（如果有需要释放的相关资源的话，此处代码未体现具体释放操作，可能是依赖成员变量自身的析构机制）
geometry_msgs::msg::TransformStamped::~TransformStamped()
{
}
// 定义拷贝构造函数，用于通过已有的TransformStamped对象x来初始化一个新的对象
// 实现将x对象的各个成员变量的值复制到新创建的对象中
geometry_msgs::msg::TransformStamped::TransformStamped(
        const TransformStamped& x)
{
    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_transform = x.m_transform;
}
// 定义移动构造函数，用于通过右值引用的方式将已有的TransformStamped对象x的资源转移给新创建的对象
// 相比拷贝构造函数，移动构造函数更高效，避免不必要的资源复制，而是直接转移资源所有权（如std::move操作体现的那样）
geometry_msgs::msg::TransformStamped::TransformStamped(
        TransformStamped&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_transform = std::move(x.m_transform);
}
// 定义赋值运算符重载函数（拷贝赋值），用于将一个TransformStamped对象x的值赋值给当前对象
// 使得当前对象的各个成员变量的值与x对象对应成员变量的值相同
geometry_msgs::msg::TransformStamped& geometry_msgs::msg::TransformStamped::operator =(
        const TransformStamped& x)
{
    m_header = x.m_header;
    m_child_frame_id = x.m_child_frame_id;
    m_transform = x.m_transform;
    return *this;
}
// 定义赋值运算符重载函数（移动赋值），通过右值引用的方式将一个TransformStamped对象x的资源转移给当前对象
// 实现资源的高效转移赋值，类似移动构造函数的原理
geometry_msgs::msg::TransformStamped& geometry_msgs::msg::TransformStamped::operator =(
        TransformStamped&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_child_frame_id = std::move(x.m_child_frame_id);
    m_transform = std::move(x.m_transform);
    return *this;
}
// 定义相等比较运算符重载函数，用于判断当前对象与另一个TransformStamped对象x是否相等
// 通过比较各个成员变量（m_header、m_child_frame_id、m_transform）是否分别相等来确定两个对象整体是否相等
bool geometry_msgs::msg::TransformStamped::operator ==(
        const TransformStamped& x) const
{
    return (m_header == x.m_header && m_child_frame_id == x.m_child_frame_id && m_transform == x.m_transform);
}
// 定义不等比较运算符重载函数，基于相等比较运算符的结果取反来判断两个对象是否不相等
bool geometry_msgs::msg::TransformStamped::operator !=(
        const TransformStamped& x) const
{
    return !(*this == x);
}
// 获取该对象在CDR序列化时的最大尺寸，此处当前实现直接返回预定义的最大尺寸值
// 参数current_alignment在当前代码中未实际使用（只是为了符合函数接口定义的形式参数要求）
size_t geometry_msgs::msg::TransformStamped::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return geometry_msgs_msg_TransformStamped_max_cdr_typesize;
}
// 计算给定的TransformStamped对象data在CDR序列化后的实际尺寸大小
// 通过依次计算其成员变量（header、child_frame_id、transform）序列化后的尺寸总和来得到整体尺寸
// 参数current_alignment用于处理对齐相关问题，记录当前的对齐情况，并在计算过程中更新
size_t geometry_msgs::msg::TransformStamped::getCdrSerializedSize(
        const geometry_msgs::msg::TransformStamped& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.child_frame_id().size() + 1;
    current_alignment += geometry_msgs::msg::Transform::getCdrSerializedSize(data.transform(), current_alignment);

    return current_alignment - initial_alignment;
}
// 将该对象的各个成员变量按照CDR格式进行序列化，写入到给定的Cdr对象scdr中
// 依次序列化m_header、m_child_frame_id、m_transform成员变量
void geometry_msgs::msg::TransformStamped::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_header;
    scdr << m_child_frame_id.c_str();
    scdr << m_transform;
}
// 从给定的Cdr对象dcdr中按照CDR格式进行反序列化操作，读取数据并赋值给该对象的各个成员变量
// 依次反序列化读取数据到m_header、m_child_frame_id、m_transform成员变量
void geometry_msgs::msg::TransformStamped::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_header;
    dcdr >> m_child_frame_id;
    dcdr >> m_transform;
}

/*!
 * 该函数用于将传入的新的std_msgs::msg::Header对象的值复制到当前对象的m_header成员变量中
 */
void geometry_msgs::msg::TransformStamped::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * 该函数用于将传入的std_msgs::msg::Header对象（以右值引用方式传入）的资源移动到当前对象的m_header成员变量中
 */
void geometry_msgs::msg::TransformStamped::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * 该函数返回当前对象的m_header成员变量的常量引用，外部通过该引用可以获取但不能修改其值
 */
const std_msgs::msg::Header& geometry_msgs::msg::TransformStamped::header() const
{
    return m_header;
}
/*!
 * 该函数返回当前对象的m_header成员变量的普通引用，外部通过该引用可以获取和修改其值
 */
std_msgs::msg::Header& geometry_msgs::msg::TransformStamped::header()
{
    return m_header;
}

/*!
 * 该函数用于将传入的新的字符串值复制到当前对象的m_child_frame_id成员变量中
 */
void geometry_msgs::msg::TransformStamped::child_frame_id(
        const std::string& _child_frame_id)
{
    m_child_frame_id = _child_frame_id;
}

/*!
 * 该函数用于将传入的字符串对象（以右值引用方式传入）的值移动到当前对象的m_child_frame_id成员变量中
 */
void geometry_msgs::msg::TransformStamped::child_frame_id(
        std::string&& _child_frame_id)
{
    m_child_frame_id = std::move(_child_frame_id);
}

/*!
  * 该函数返回当前对象的m_child_frame_id成员变量的常量引用，外部通过该引用可以获取但不能修改其值
 */
const std::string& geometry_msgs::msg::TransformStamped::child_frame_id() const
{
    return m_child_frame_id;
}

/*!
 * 该函数返回当前对象的m_child_frame_id成员变量的普通引用，外部通过该引用可以获取和修改其值
 */
std::string& geometry_msgs::msg::TransformStamped::child_frame_id()
{
    return m_child_frame_id;
}

/*!
  * 该函数用于将传入的新的geometry_msgs::msg::Transform对象的值复制到当前对象的m_transform成员变量中
 */
void geometry_msgs::msg::TransformStamped::transform(
        const geometry_msgs::msg::Transform& _transform)
{
    m_transform = _transform;
}

/*!
  * 该函数用于将传入的geometry_msgs::msg::Transform对象（以右值引用方式传入）的资源移动到当前对象的m_transform成员变量中
 */
void geometry_msgs::msg::TransformStamped::transform(
        geometry_msgs::msg::Transform&& _transform)
{
    m_transform = std::move(_transform);
}

/*!
 * 该函数返回当前对象的m_transform成员变量的常量引用，外部通过该引用可以获取但不能修改其值
 */
const geometry_msgs::msg::Transform& geometry_msgs::msg::TransformStamped::transform() const
{
    return m_transform;
}

/*!
 * 该函数返回当前对象的m_transform成员变量的普通引用，外部通过该引用可以获取和修改其值
 */
geometry_msgs::msg::Transform& geometry_msgs::msg::TransformStamped::transform()
{
    return m_transform;
}
// 获取该对象在CDR序列化时键（Key）的最大尺寸，此处当前实现直接返回预定义的最大尺寸值（当前为0）
// 参数current_alignment在当前代码中未实际使用（只是为了符合函数接口定义的形式参数要求）
size_t geometry_msgs::msg::TransformStamped::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return geometry_msgs_msg_TransformStamped_max_key_cdr_typesize;
}
// 判断该对象的键（Key）是否已定义，当前实现直接返回false，表示未定义键
bool geometry_msgs::msg::TransformStamped::isKeyDefined()
{
    return false;
}
// 对该对象的键（Key）进行CDR序列化操作，当前代码中只是传入了scdr参数但未实际进行有效操作（通过(void) scdr; 避免编译警告）
// 可能后续需要根据具体的键定义情况来完善此处的序列化逻辑
void geometry_msgs::msg::TransformStamped::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
