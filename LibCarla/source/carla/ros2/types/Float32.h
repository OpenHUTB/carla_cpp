// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Float32.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_STD_MSGS_MSG_FLOAT32_H_
#define _FAST_DDS_GENERATED_STD_MSGS_MSG_FLOAT32_H_
// 包含一些必要的头文件
#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>
// Windows平台下的DLL导出/导入宏定义
#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32
// Windows平台下的DLL导出/导入宏定义，针对Float32类
#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Float32_SOURCE)
#define Float32_DllAPI __declspec( dllexport )
#else
#define Float32_DllAPI __declspec( dllimport )
#endif // Float32_SOURCE
#else
#define Float32_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Float32_DllAPI
#endif // _WIN32
// 引入fastcdr命名空间，用于序列化和反序列化
namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima
// std_msgs命名空间，包含消息类型定义
namespace std_msgs {
    namespace msg {
                /*! 
         * @brief 这个类表示用户在IDL文件中定义的Float32结构。
         * @ingroup FLOAT32
         */

        class Float32
        {
        public:
            /*! 
             * @brief 默认构造函数。
             */
            eProsima_user_DllExport Float32();

            /*! 
             * @brief 默认析构函数。
             */
            eProsima_user_DllExport ~Float32();

            /*! 
             * @brief 拷贝构造函数。
             * @param x 要拷贝的std_msgs::msg::Float32对象的引用。
             */
            eProsima_user_DllExport Float32(
                    const Float32& x);

            /*! 
             * @brief 移动构造函数。
             * @param x 要移动的std_msgs::msg::Float32对象的引用。
             */
            eProsima_user_DllExport Float32(
                    Float32&& x) noexcept;

            /*! 
             * @brief 拷贝赋值操作符。
             * @param x 要拷贝的std_msgs::msg::Float32对象的引用。
             */
            eProsima_user_DllExport Float32& operator =(
                    const Float32& x);

           /*! 
             * @brief 移动赋值操作符。
             * @param x 要移动的std_msgs::msg::Float32对象的引用。
             */
            eProsima_user_DllExport Float32& operator =(
                    Float32&& x) noexcept;

            /*! 
             * @brief 比较操作符。
             * @param x 要比较的std_msgs::msg::Float32对象。
             */
            eProsima_user_DllExport bool operator ==(
                    const Float32& x) const;

           /*! 
             * @brief 比较操作符。
             * @param x 要比较的std_msgs::msg::Float32对象。
             */
            eProsima_user_DllExport bool operator !=(
                    const Float32& x) const;

            /*! 
             * @brief 设置成员data的值。
             * @param _data 成员data的新值。
             */
            eProsima_user_DllExport void data(
                    float _data);

            /*! 
             * @brief 获取成员data的值。
             * @return 成员data的值。
             */
            eProsima_user_DllExport float data() const;

            /*! 
             * @brief 获取成员data的引用。
             * @return 成员data的引用。
             */
            eProsima_user_DllExport float& data();

             /*! 
            * @brief 返回对象的最大序列化大小，取决于缓冲区对齐。
            * @param current_alignment 缓冲区对齐。
            * @return 最大序列化大小。
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*! 
             * @brief 返回数据的序列化大小，取决于缓冲区对齐。
             * @param data 要计算序列化大小的数据。
             * @param current_alignment 缓冲区对齐。
             * @return 序列化大小。
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const std_msgs::msg::Float32& data,
                    size_t current_alignment = 0);

            /*! 
             * @brief 使用CDR序列化对象。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

           /*! 
             * @brief 使用CDR反序列化对象。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);

            /*! 
             * @brief 返回对象的Key的最大序列化大小，取决于缓冲区对齐。
             * @param current_alignment 缓冲区对齐。
             * @return 最大序列化大小。
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*! 
             * @brief 告诉你是否为这种类型定义了Key。
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*! 
             * @brief 使用CDR序列化对象的Key成员。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:
            float m_data;// 成员变量，存储浮点数数据
        };
    } // namespace msg
} // namespace std_msgs

#endif // _FAST_DDS_GENERATED_STD_MSGS_MSG_FLOAT32_H_
