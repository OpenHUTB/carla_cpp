// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
// 版权声明，表明该代码受Apache License 2.0许可证的约束
//
// Licensed under the Apache License, Version 2.0 (the "License");
// 说明此代码基于Apache License 2.0版本许可协议进行使用
// you may not use this file except in compliance with the License.
// 强调必须遵循许可证规定来使用该文件
// You may obtain a copy of the License at
// 告知可以在指定网址获取许可证副本
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// 除非有相关法律要求或者书面同意，软件（此处指本代码相关软件）
// distributed under the License is distributed on an "AS IS" BASIS,
// 在许可证下分发的软件按“原样”分发，即不提供额外保证等
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 没有任何形式的明示或暗示的保证及条件
// See the License for the specific language governing permissions and
// 提示查看许可证以了解关于权限和限制的具体规定
// limitations under the License.

/*!
 * @file CarlaCollisionEvent.h
 * 这是头文件的文件名，通常包含对应类等类型的声明
 * This header file contains the declaration of the described types in the IDL file.
 * 说明此头文件包含了在IDL（接口描述语言）文件中所描述类型的声明，意味着这些类型定义可能来源于IDL并在此处进一步声明用于C++代码中
 *
 * This file was generated by the tool gen.
 * 指出该文件是由名为“gen”的工具生成的
 */

#ifndef _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACOLLISIONEVENT_H_
#define _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACOLLISIONEVENT_H_
// 以下是一系列的头文件包含，引入了其他相关的定义，以便在此文件中使用相关类型、工具等

// 引入相关头文件，可能包含了一些自定义的结构体、类等定义，用于后续成员变量等的使用
#include "Vector3.h"
#include "Header.h"
// 引入fastrtps库中用于处理固定大小字符串的工具头文件
#include <fastrtps/utils/fixed_size_string.hpp>
// 引入标准C++库中的一些常用头文件，用于处理不同类型的数据
#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
// 在Windows平台下，如果定义了EPROSIMA_USER_DLL_EXPORT，将函数或类声明为导出符号（用于动态链接库导出），以便在不同模块间正确使用这些函数或类
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

// 引入eprosima命名空间下fastcdr相关的类声明（此处Cdr类完整定义应该在其他地方），可能用于后续的序列化、反序列化操作
namespace eprosima {
#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
// 在Windows平台下，根据CarlaCollisionEvent_SOURCE是否定义，决定是导出还是导入符号（用于动态链接库相关操作），这与动态链接库中符号的可见性和使用方式相关
#if defined(CarlaCollisionEvent_SOURCE)
#define CarlaCollisionEvent_DllAPI __declspec( dllexport )
#else
#define CarlaCollisionEvent_DllAPI __declspec( dllimport )
#endif // CarlaCollisionEvent_SOURCE
#else
#define CarlaCollisionEvent_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CarlaCollisionEvent_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima

namespace carla_msgs {
    namespace msg {
        /*!
         * @brief 此类代表了用户在IDL文件中定义的CarlaCollisionEvent结构。
         * 简要说明该类的作用，即对应于IDL中定义的CarlaCollisionEvent结构，在C++代码层面进行实现和封装
         * @ingroup CARLACOLLISIONEVENT
         * 可能是用于将此类归到某个特定的组（比如文档生成或者代码组织分组相关用途），具体含义取决于使用该代码的整体框架
         */
        class CarlaCollisionEvent
        {
        public:
            // 默认构造函数，用于创建对象时进行默认的初始化操作，比如初始化成员变量等，使得对象处于一个合理的初始状态
            eProsima_user_DllExport CarlaCollisionEvent();

            // 默认析构函数，用于在对象生命周期结束时释放相关资源，例如释放对象持有的动态分配内存、关闭打开的文件句柄等相关清理工作
            eProsima_user_DllExport ~CarlaCollisionEvent();

            // 拷贝构造函数，根据传入的另一个CarlaCollisionEvent对象进行拷贝创建新对象，进行深拷贝或浅拷贝（取决于具体实现）。
            // 参数x是要被拷贝的carla_msgs::msg::CarlaCollisionEvent对象的引用，通过此引用获取原对象的数据来创建新的拷贝对象
            eProsima_user_DllExport CarlaCollisionEvent(
                    const CarlaCollisionEvent& x);

            // 移动构造函数，通过移动语义，高效地将传入的CarlaCollisionEvent对象资源所有权转移到新创建的对象中，避免不必要的拷贝开销。
            // 适用于将临时对象（比如函数返回的临时对象）的资源快速转移给新对象，而不是进行传统的拷贝操作，提升性能
            eProsima_user_DllExport CarlaCollisionEvent(
                    CarlaCollisionEvent&& x) noexcept;

            // 拷贝赋值运算符重载，实现将一个CarlaCollisionEvent对象的数据拷贝赋值给当前对象，遵循拷贝构造函数类似的拷贝逻辑（深拷贝或浅拷贝取决于实现）
            // 参数x是要被拷贝的carla_msgs::msg::CarlaCollisionEvent对象的引用，通过此引用获取原对象的数据来赋值给当前对象
            eProsima_user_DllExport CarlaCollisionEvent& operator =(
                    const CarlaCollisionEvent& x);

            // 移动赋值运算符重载，通过移动语义将一个CarlaCollisionEvent对象的资源所有权转移给当前对象，实现高效赋值操作，类似移动构造函数的作用，用于高效处理资源转移赋值的情况
            // 参数x是要被移动的carla_msgs::msg::CarlaCollisionEvent对象的引用，将其资源转移给当前对象
            eProsima_user_DllExport CarlaCollisionEvent& operator =(
                    CarlaCollisionEvent&& x) noexcept;

            // 相等比较运算符重载，用于比较当前对象与传入的CarlaCollisionEvent对象是否相等，比较的具体逻辑基于类中成员变量等内容，具体实现决定了如何判断相等
            // 参数x是要与之比较的carla_msgs::msg::CarlaCollisionEvent对象，返回布尔值表示是否相等
            eProsima_user_DllExport bool operator ==(
                    const CarlaCollisionEvent& x) const;

            // 不等比较运算符重载，用于比较当前对象与传入的CarlaCollisionEvent对象是否不相等，通常基于相等比较运算符的相反逻辑来实现，返回布尔值表示是否不相等
            // 参数x是要与之比较的carla_msgs::msg::CarlaCollisionEvent对象
            eProsima_user_DllExport bool operator!=(
                    const CarlaCollisionEvent& x) const;

            // 此函数用于拷贝成员header的值，传入新的std_msgs::msg::Header对象进行赋值，即将传入的Header对象的值复制给当前对象的m_header成员变量
            // 参数_header是要拷贝到成员header的新值，类型为std_msgs::msg::Header
            eProsima_user_DllExport void header(
                    const std_msgs::msg::Header& _header);

            // 此函数用于移动成员header的值，传入新的std_msgs::msg::Header对象进行资源所有权转移赋值，将传入Header对象的资源所有权转移给当前对象的m_header成员变量
            // 返回成员header的常量引用，外部可通过该引用获取header的值，但不能修改它，遵循移动语义的资源转移规则
            eProsima_user_DllExport void header(
                    std_msgs::msg::Header&& _header);

            // 此函数返回成员header的常量引用，外部可通过该引用获取header的值，但不能修改它，用于在外部代码中安全地访问header成员变量的值而不改变它
            // 返回类型为const std_msgs::msg::Header&，表示常量引用
            eProsima_user_DllExport const std_msgs::msg::Header& header() const;

            // 此函数返回成员header的引用，外部可通过该引用获取和修改header的值，使得外部代码可以直接操作当前对象的header成员变量
            // 返回类型为std_msgs::msg::Header&，表示普通引用
            eProsima_user_DllExport std_msgs::msg::Header& header();

            // 此函数设置成员other_actor_id的值，传入新的整数值进行赋值，将传入的整数值赋给当前对象的m_other_actor_id成员变量，用于更新该成员变量的值
            // 参数_other_actor_id是成员other_actor_id的新值，类型为uint32_t
            eProsima_user_DllExport void other_actor_id(
                    uint32_t _other_actor_id);

            // 此函数返回成员other_actor_id的值，用于在外部代码中获取该成员变量的值，返回类型为uint32_t，表示返回一个无符号32位整数
            eProsima_user_DllExport uint32_t other_actor_id() const;

            // 此函数返回成员other_actor_id的引用，外部可通过该引用获取和修改其值，使得外部代码可以直接操作当前对象的other_actor_id成员变量
            // 返回类型为uint32_t&，表示无符号32位整数的引用
            eProsima_user_DllExport uint32_t& other_actor_id();

            // 此函数用于拷贝成员normal_impulse的值，传入新的geometry_msgs::msg::Vector3对象进行赋值，即将传入的Vector3对象的值复制给当前对象的m_normal_impulse成员变量
            // 参数_normal_impulse是要拷贝到成员normal_impulse的新值，类型为geometry_msgs::msg::Vector3
            eProsima_user_DllExport void normal_impulse(
                    const geometry_msgs::msg::Vector3& _normal_impulse);

            // 此函数用于移动成员normal_impulse的值，传入新的geometry_msgs::msg::Vector3对象进行资源所有权转移赋值，将传入Vector3对象的资源所有权转移给当前对象的m_normal_impulse成员变量
            // 返回成员normal_impulse的常量引用，外部可通过该引用获取其值，但不能修改它，遵循移动语义的资源转移规则
            eProsima_user_DllExport void normal_impulse(
                    geometry_msgs::msg::Vector3&& _normal_impulse);

            // 此函数返回成员normal_impulse的常量引用，外部可通过该引用获取其值，但不能修改它，用于在外部代码中安全地访问normal_impulse成员变量的值而不改变它
            // 返回类型为const geometry_msgs::msg::Vector3&，表示常量引用
            eProsima_user_DllExport const geometry_msgs::msg::Vector3& normal_impulse() const;

            // 此函数返回成员normal_impulse的引用，外部可通过该引用获取和修改其值，使得外部代码可以直接操作当前对象的normal_impulse成员变量
            // 返回类型为geometry_msgs::msg::Vector3&，表示普通引用
            eProsima_user_DllExport geometry_msgs::msg::Vector3& normal_impulse();

            // 此函数返回一个对象根据缓冲区对齐方式的最大序列化大小，这个大小通常用于在序列化操作中提前知晓所需的最大空间等情况
            // 参数current_alignment是缓冲区对齐方式，默认为0，可根据实际情况传入不同的对齐要求来获取相应的最大序列化大小
            // 返回类型为size_t，表示无符号整数类型的大小（通常用于表示字节数等大小相关概念）
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            // 此函数返回根据缓冲区对齐方式给定数据的序列化大小，根据传入的具体CarlaCollisionEvent对象数据，结合指定的缓冲区对齐方式，计算出其序列化后占用的字节数等大小信息
            // 参数data是要计算序列化大小的数据对象，类型为carla_msgs::msg::CarlaCollisionEvent&，即当前类的对象引用
            // 参数current_alignment是缓冲区对齐方式，默认为0，作用同上
            // 返回类型为size_t，表示序列化大小（字节数等）
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const carla_msgs::msg::CarlaCollisionEvent& data,
                    size_t current_alignment = 0);

            // 此函数使用CDR序列化方式对对象进行序列化操作，将对象转换为适合传输或存储的格式，比如将对象的各个成员变量按照CDR序列化规则编码成字节流等形式，方便在网络等环境中传输或者存储到文件等
            // 参数cdr是CDR序列化对象，应该是实现了具体序列化逻辑的类实例，通过它来执行具体的序列化操作
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            // 此函数使用CDR序列化方式对对象进行反序列化操作，将序列化的数据还原为对象，即根据传入的字节流等序列化数据，按照CDR反序列化规则解析出各个成员变量的值，重新构建出对象
            // 参数cdr是CDR序列化对象，通过它来执行具体的反序列化操作
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);

            // 此函数返回一个对象的键（Key）根据缓冲区对齐方式的最大序列化大小，类似于前面的getMaxCdrSerializedSize函数，但这里针对的是对象的键（具体键的定义取决于该类的业务逻辑和使用场景）的序列化大小计算
            // 参数current_alignment是缓冲区对齐方式，默认为0
            // 返回类型为size_t，表示最大序列化大小（字节数等）
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            // 此函数用于判断该类型是否已经定义了键（Key），返回布尔值，用于在相关代码逻辑中确定是否可以进行基于键的操作（比如通过键查找、比对等）
            eProsima_user_DllExport static bool isKeyDefined();

            // 此函数使用CDR序列化方式对对象的键（Key）成员进行序列化操作，传入Cdr序列化对象进行具体操作，将对象中与键相关的成员变量按照CDR序列化规则进行编码，以便用于基于键的处理场景（如存储、查找等）
            // 参数cdr是CDR序列化对象，用于执行具体的序列化操作
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:
            // 存储消息头相关信息的成员变量，类型为std_msgs::msg::Header，用于保存和消息头相关的数据，具体内容由std_msgs::msg::Header类定义决定
            std_msgs::msg::Header m_header;
            // 存储其他参与者ID的成员变量，类型为uint32_t，用于记录与当前对象相关的其他参与者的唯一标识符等信息，是一个无符号32位整数类型的值
            uint32_t m_other_actor_id;
            // 存储碰撞法线冲量相关信息的成员变量，类型为geometry_msgs::msg::Vector3，用于表示碰撞时法线方向的冲量信息，其结构和具体含义由geometry_msgs::msg::Vector3类定义决定
            geometry_msgs::msg::Vector3 m_normal_impulse;
        };
    } // namespace msg
} // namespace carla_msgs

#endif // _FAST_DDS_GENERATED_CARLA_MSGS_MSG_CARLACOLLISIONEVENT_H_

