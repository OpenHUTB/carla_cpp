// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OdometryPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "OdometryPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

namespace nav_msgs {
    namespace msg {
        OdometryPubSubType::OdometryPubSubType()
        {
            // 设置消息类型的名称为 "nav_msgs::msg::dds_::Odometry_"。
            // 该名称用于在 DDS（数据分发服务）系统中唯一标识 Odometry 消息类型。
            setName("nav_msgs::msg::dds_::Odometry_");

            // 获取 Odometry 类型的最大 CDR 序列化大小。
            // CDR（Common Data Representation）是数据交换格式，用于序列化和反序列化消息数据。
            auto type_size = Odometry::getMaxCdrSerializedSize();

            // 计算可能的子消息对齐。这里将序列化大小对齐到 4 字节边界。
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4);  // 可能的子消息对齐

            // 设置消息类型的总大小（包括封装头部）。封装是指在消息的实际数据前后添加的头部信息。
            m_typeSize = static_cast<uint32_t>(type_size) + 4;  // 封装（包括数据和头部）

            // 设置是否定义了该消息的键（Key）。在一些情况下，消息会定义一个唯一标识符（键），用于识别该消息。
            m_isGetKeyDefined = Odometry::isKeyDefined();

            // 获取 Odometry 消息类型的最大键 CDR 序列化大小。
            // 如果键的序列化大小大于 16 字节，则使用实际的键大小，否则使用 16 字节。
            size_t keyLength = Odometry::getKeyMaxCdrSerializedSize() > 16 ?
                    Odometry::getKeyMaxCdrSerializedSize() : 16;

            // 为消息键分配内存，存储在 m_keyBuffer 中。
            // 键通常用于标识消息的唯一性。
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));

            // 将分配的内存初始化为零，确保 m_keyBuffer 在使用时不会包含任何未初始化的数据。
            memset(m_keyBuffer, 0, keyLength);
        }


        OdometryPubSubType::~OdometryPubSubType()
        {
            if (m_keyBuffer != nullptr)
            {
                free(m_keyBuffer);
            }
        }

        bool OdometryPubSubType::serialize(
                void* data,
                SerializedPayload_t* payload)
        {
            Odometry* p_type = static_cast<Odometry*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
            // Serialize encapsulation
            ser.serialize_encapsulation();

            try
            {
                // Serialize the object.
                p_type->serialize(ser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            // Get the serialized length
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
            return true;
        }

        bool OdometryPubSubType::deserialize(
                 SerializedPayload_t* payload,
                 void* data)
        {
            try
            {
                // 将 data 转换为指向 Odometry 类型的指针
                Odometry* p_type = static_cast<Odometry*>(data);

                // 管理原始缓冲区的对象。
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

                // 用于反序列化数据的对象。
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

                // 反序列化封装数据。
                deser.read_encapsulation();
                // 根据反序列化的字节序设置封装类型（大端或小端）
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                // 反序列化 Odometry 对象。
                p_type->deserialize(deser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                // 如果内存不足，返回 false 表示反序列化失败
                return false;
            }

            // 反序列化成功，返回 true
            return true;
        }

        std::function<uint32_t()> OdometryPubSubType::getSerializedSizeProvider(
                void* data)
        {
            return [data]() -> uint32_t
                   {
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Odometry*>(data))) +
                              4u /*encapsulation*/;
                   };
        }

        void* OdometryPubSubType::createData()
        {
            return reinterpret_cast<void*>(new Odometry());
        }

        void OdometryPubSubType::deleteData(
                void* data)
        {
            delete(reinterpret_cast<Odometry*>(data));
        }

        bool OdometryPubSubType::getKey(
                void* data,
                InstanceHandle_t* handle,
                bool force_md5)
        {
            if (!m_isGetKeyDefined)
            {
                return false;
            }

            Odometry* p_type = static_cast<Odometry*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
                    Odometry::getKeyMaxCdrSerializedSize());

            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
            p_type->serializeKey(ser);
            if (force_md5 || Odometry::getKeyMaxCdrSerializedSize() > 16)
            {
                m_md5.init();
                m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                m_md5.finalize();
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_md5.digest[i];
                }
            }
            else
            {
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_keyBuffer[i];
                }
            }
            return true;
        }
    } //End of namespace msg
} //End of namespace nav_msgs
