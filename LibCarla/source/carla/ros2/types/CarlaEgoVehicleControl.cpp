// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CarlaEgoCarlaEgoVehicleControl.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
// 解决 Visual Studio 中的链接器警告 LNK4221
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CarlaEgoVehicleControl.h"
#include <fastcdr/Cdr.h>// 用于序列化和反序列化

#include <fastcdr/exceptions/BadParamException.h> 
using namespace eprosima::fastcdr::exception;

#include <utility>
// 定义序列化时不同数据类型的最大对齐大小
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define carla_msgs_msg_CarlaEgoVehicleControl_max_cdr_typesize 289ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
#define carla_msgs_msg_CarlaEgoVehicleControl_max_key_cdr_typesize 0ULL;
// **构造函数**：初始化类的成员变量
carla_msgs::msg::CarlaEgoVehicleControl::CarlaEgoVehicleControl()
{
    // std_msgs::msg::Header m_header

    // float m_throttle
    m_throttle = 0.0;        // 油门值，初始为0
    // float m_steer
    m_steer = 0.0;            // 转向值，初始为0
    // float m_brake
    m_brake = 0.0;            // 刹车值
    // boolean m_hand_brake
    m_hand_brake = false;    // 手刹状态
    // boolean m_reverse
    m_reverse = false;        // 倒车状态
    // long m_gear
    m_gear = 0;                // 挡位
    // boolean m_manual_gear_shift
    m_manual_gear_shift = false;    // 是否手动换挡，初始为false

}

// **析构函数**
carla_msgs::msg::CarlaEgoVehicleControl::~CarlaEgoVehicleControl()
{
}

// **拷贝构造函数**：基于已有对象 x 初始化当前对象
carla_msgs::msg::CarlaEgoVehicleControl::CarlaEgoVehicleControl(
        const CarlaEgoVehicleControl& x)
{
    m_header = x.m_header;
    m_throttle = x.m_throttle;
    m_steer = x.m_steer;
    m_brake = x.m_brake;
    m_hand_brake = x.m_hand_brake;
    m_reverse = x.m_reverse;
    m_gear = x.m_gear;
    m_manual_gear_shift = x.m_manual_gear_shift;
}

// **移动构造函数**：基于已有对象 x（临时对象）移动资源到当前对象
carla_msgs::msg::CarlaEgoVehicleControl::CarlaEgoVehicleControl(
        CarlaEgoVehicleControl&& x) noexcept
{
    m_header = std::move(x.m_header);        // 使用 std::move 移动 m_header
    m_throttle = x.m_throttle;
    m_steer = x.m_steer;
    m_brake = x.m_brake;
    m_hand_brake = x.m_hand_brake;
    m_reverse = x.m_reverse;
    m_gear = x.m_gear;
    m_manual_gear_shift = x.m_manual_gear_shift;
}

// **拷贝赋值运算符**：将对象 x 的值赋给当前对象
carla_msgs::msg::CarlaEgoVehicleControl& carla_msgs::msg::CarlaEgoVehicleControl::operator =(
        const CarlaEgoVehicleControl& x)
{
    m_header = x.m_header;
    m_throttle = x.m_throttle;
    m_steer = x.m_steer;
    m_brake = x.m_brake;
    m_hand_brake = x.m_hand_brake;
    m_reverse = x.m_reverse;
    m_gear = x.m_gear;
    m_manual_gear_shift = x.m_manual_gear_shift;

    return *this;            // 返回当前对象的引用
}


// **移动赋值运算符**：将临时对象 x 的值移动到当前对象
carla_msgs::msg::CarlaEgoVehicleControl& carla_msgs::msg::CarlaEgoVehicleControl::operator =(
        CarlaEgoVehicleControl&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_throttle = x.m_throttle;
    m_steer = x.m_steer;
    m_brake = x.m_brake;
    m_hand_brake = x.m_hand_brake;
    m_reverse = x.m_reverse;
    m_gear = x.m_gear;
    m_manual_gear_shift = x.m_manual_gear_shift;

    return *this;// 返回当前对象的引用
}


// **比较运算符**：判断两个对象是否相等

bool carla_msgs::msg::CarlaEgoVehicleControl::operator ==(
        const CarlaEgoVehicleControl& x) const
{
    return (m_header == x.m_header && m_throttle == x.m_throttle && m_steer == x.m_steer && m_brake == x.m_brake && m_hand_brake == x.m_hand_brake && m_reverse == x.m_reverse && m_gear == x.m_gear && m_manual_gear_shift == x.m_manual_gear_shift);
}


// **不等运算符**：判断两个对象是否不相等
bool carla_msgs::msg::CarlaEgoVehicleControl::operator !=(
        const CarlaEgoVehicleControl& x) const
{
    return !(*this == x);
}

// **获取最大序列化大小**：返回最大序列化所需的空间大小
size_t carla_msgs::msg::CarlaEgoVehicleControl::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaEgoVehicleControl_max_cdr_typesize;
}

// **计算当前对象的序列化大小**：基于当前对齐值

size_t carla_msgs::msg::CarlaEgoVehicleControl::getCdrSerializedSize(
        const carla_msgs::msg::CarlaEgoVehicleControl& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);// throttle
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);// steer
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);// brake
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);// hand_brake
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);// reverse
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);// gear
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);// manual_gear_shift
    return current_alignment - initial_alignment;// 返回序列化大小
}

// **序列化函数**：将对象数据写入 CDR 流
void carla_msgs::msg::CarlaEgoVehicleControl::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_header;
    scdr << m_throttle;
    scdr << m_steer;
    scdr << m_brake;
    scdr << m_hand_brake;
    scdr << m_reverse;
    scdr << m_gear;
    scdr << m_manual_gear_shift;
}

// **反序列化函数**：从 CDR 流中读取数据到对象

void carla_msgs::msg::CarlaEgoVehicleControl::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_header;
    dcdr >> m_throttle;
    dcdr >> m_steer;
    dcdr >> m_brake;
    dcdr >> m_hand_brake;
    dcdr >> m_reverse;
    dcdr >> m_gear;
    dcdr >> m_manual_gear_shift;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
// **设置 header 值**
void carla_msgs::msg::CarlaEgoVehicleControl::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
/*
 * @brief 通过移动语义设置header成员的值，减少拷贝，提高性能
 * @param _header 待移动的std_msgs::msg::Header对象
*/
void carla_msgs::msg::CarlaEgoVehicleControl::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header（返回header成员的常量引用，用于只读访问）
 * @return Constant reference to member header（return header的常量引用）
 */
const std_msgs::msg::Header& carla_msgs::msg::CarlaEgoVehicleControl::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header（返回header成员的引用，用于修改header的值）
 * @return Reference to member header（）
 */
std_msgs::msg::Header& carla_msgs::msg::CarlaEgoVehicleControl::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member throttle（设置throttle成员的值（油门））
 * @param _throttle New value for member throttle（param _throttle 新的油门值，范围通常在0.0到1.0之间）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::throttle(
        float _throttle)
{
    m_throttle = _throttle;
}

/*!
 * @brief This function returns the value of member throttle
 * @return Value of member throttle
 */
//返回throttle的值
float carla_msgs::msg::CarlaEgoVehicleControl::throttle() const
{
    return m_throttle;
}

/*!
 * @brief This function returns a reference to member throttle（用于修改油门值）
 * @return Reference to member throttle
 */
float& carla_msgs::msg::CarlaEgoVehicleControl::throttle()
{
    return m_throttle;
}

/*!
 * @brief This function sets a value in member steer（设置转向角度）
 * @param _steer New value for member steer（新的转向值，范围通常在-1.0到1.0之间）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::steer(
        float _steer)
{
    m_steer = _steer;
}

/*!
 * @brief This function returns the value of member steer（返回steer的值）
 * @return Value of member steer（当前转向的值）
 */
float carla_msgs::msg::CarlaEgoVehicleControl::steer() const
{
    return m_steer;
}

/*!
 * @brief This function returns a reference to member steer（返回steer的引用，用于修改转向值）
 * @return Reference to member steer
 */
float& carla_msgs::msg::CarlaEgoVehicleControl::steer()
{
    return m_steer;
}

/*!
 * @brief This function sets a value in member brake（设置break成员的值，也就是刹车力度）
 * @param _brake New value for member brake（新的刹车值，范围在0到1之间）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::brake(
        float _brake)
{
    m_brake = _brake;
}

/*!
 * @brief This function returns the value of member brake（返回break的值）
 * @return Value of member brake
 */
float carla_msgs::msg::CarlaEgoVehicleControl::brake() const
{
    return m_brake;
}

/*!
 * @brief This function returns a reference to member brake（刹车值的修改）
 * @return Reference to member brake
 */
float& carla_msgs::msg::CarlaEgoVehicleControl::brake()
{
    return m_brake;
}

/*!
 * @brief This function sets a value in member hand_brake（设置手刹的状态）
 * @param _hand_brake New value for member hand_brake（true是使用手刹）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::hand_brake(
        bool _hand_brake)
{
    m_hand_brake = _hand_brake;
}

/*!
 * @brief This function returns the value of member hand_brake（返回手刹的值，用于修改手刹的状态）
 * @return Value of member hand_brake
 */
bool carla_msgs::msg::CarlaEgoVehicleControl::hand_brake() const
{
    return m_hand_brake;
}

/*!
 * @brief This function returns a reference to member hand_brake（修改修改手刹状态）
 * @return Reference to member hand_brake
 */
bool& carla_msgs::msg::CarlaEgoVehicleControl::hand_brake()
{
    return m_hand_brake;
}

/*!
 * @brief This function sets a value in member reverse（倒车状态）
 * @param _reverse New value for member reverse（布尔值，true表示车辆处于倒车状态）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::reverse(
        bool _reverse)
{
    m_reverse = _reverse;
}

/*!
 * @brief This function returns the value of member reverse（返回reverse的值）
 * @return Value of member reverse（当前倒车状态，true表示正在倒车）
 */
bool carla_msgs::msg::CarlaEgoVehicleControl::reverse() const
{
    return m_reverse;
}

/*!
 * @brief This function returns a reference to member reverse（返回reverse的引用，用于修改倒车状态）
 * @return Reference to member reverse
 */
bool& carla_msgs::msg::CarlaEgoVehicleControl::reverse()
{
    return m_reverse;
}

/*!
 * @brief This function sets a value in member gear（档位的修改）
 * @param _gear New value for member gear（整数型，表示当前状态下是几档）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::gear(
        int32_t _gear)
{
    m_gear = _gear;
}

/*!
 * @brief This function returns the value of member gear（返回gear的值）
 * @return Value of member gear（当前档位的值）
 */
int32_t carla_msgs::msg::CarlaEgoVehicleControl::gear() const
{
    return m_gear;
}

/*!
 * @brief This function returns a reference to member gear（返回gear的引用，用于修改档位值）
 * @return Reference to member gear（ gear的引用）
 */
int32_t& carla_msgs::msg::CarlaEgoVehicleControl::gear()
{
    return m_gear;
}

/*!
 * @brief This function sets a value in member manual_gear_shift（设置manual_gear_shift成员的值（手动换挡状态））
 * @param _manual_gear_shift New value for member manual_gear_shift（布尔值，true表示启用手动换挡）
 */
void carla_msgs::msg::CarlaEgoVehicleControl::manual_gear_shift(
        bool _manual_gear_shift)
{
    m_manual_gear_shift = _manual_gear_shift;
}

/*!
 * @brief This function returns the value of member manual_gear_shift（返回manual_gear_shift的值）
 * @return Value of member manual_gear_shift（当前手动换挡状态，true表示启用手动换挡）
 */
bool carla_msgs::msg::CarlaEgoVehicleControl::manual_gear_shift() const
{
    return m_manual_gear_shift;
}

/*!
 * @brief This function returns a reference to member manual_gear_shift（返回manual_gear_shift的引用，用于修改手动换挡状态）
 * @return Reference to member manual_gear_shift
 */
bool& carla_msgs::msg::CarlaEgoVehicleControl::manual_gear_shift()
{
    return m_manual_gear_shift;
}

size_t carla_msgs::msg::CarlaEgoVehicleControl::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return carla_msgs_msg_CarlaEgoVehicleControl_max_key_cdr_typesize;
}

bool carla_msgs::msg::CarlaEgoVehicleControl::isKeyDefined()
{
    return false;
}

void carla_msgs::msg::CarlaEgoVehicleControl::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
