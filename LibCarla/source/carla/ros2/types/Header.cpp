// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Header.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32  
// 定义一个匿名命名空间，在该匿名命名空间内定义了一个字符型变量dummy
// 这种用法可能是为了满足某些编译或链接相关的要求，避免特定警告出现等
// 匿名命名空间内的符号具有内部链接属性，仅在当前编译单元内可见
    namespace {  
        char dummy;  
    }  // namespace
#endif  // _WIN32

// 包含自定义的头文件Header.h，里面可能定义了项目相关的结构体、类、函数声明等内容
#include "Header.h"  
// 包含FastCDR库中用于处理CDR（Common Data Representation）相关功能的头文件
#include <fastcdr/Cdr.h>  

// 包含FastCDR库中定义的异常类BadParamException所在的头文件，用于处理参数异常相关情况
#include <fastcdr/exceptions/BadParamException.h>  
// 使用eprosima::fastcdr::exception命名空间，方便后续使用其中定义的类型等，不用每次都写全限定名
using namespace eprosima::fastcdr::exception;  

// 包含标准库中的utility头文件，该头文件提供了一些实用的工具和函数，例如std::move等
#include <utility>  

// 定义一个宏，用于表示builtin_interfaces_msg_Time结构体对应的最大CDR类型大小为8字节（无符号长整型）
#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;  
// 定义一个宏，用于表示std_msgs_msg_Header结构体对应的最大CDR类型大小为268字节（无符号长整型）
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;  
// 定义一个宏，用于表示builtin_interfaces_msg_Time结构体对应的最大关键CDR类型大小为0字节（无符号长整型）
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;  
// 定义一个宏，用于表示std_msgs_msg_Header结构体对应的最大关键CDR类型大小为0字节（无符号长整型）
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;  

// std_msgs::msg::Header类的默认构造函数，用于初始化Header对象
// 在这里将成员变量m_frame_id初始化为空字符串，可能表示默认情况下帧ID为空
std_msgs::msg::Header::Header()
{
    m_frame_id = "";
}

// std_msgs::msg::Header类的析构函数，目前函数体为空，可能在该类对象销毁时不需要进行额外的资源释放等操作
// 如果后续类中有动态分配的资源，就需要在析构函数中进行相应的释放逻辑添加
std_msgs::msg::Header::~Header()
{
}

// std_msgs::msg::Header类的拷贝构造函数，用于通过已有的Header对象x来创建一个新的相同的Header对象
// 它将传入对象x的成员变量m_stamp和m_frame_id的值复制给新创建对象的相应成员变量，实现对象的拷贝初始化
std_msgs::msg::Header::Header(
        const Header& x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
}

// std_msgs::msg::Header类的移动构造函数，用于通过右值引用的方式“窃取”传入的Header对象x的资源来初始化新对象
// 使用std::move来转移成员变量的所有权，相比于拷贝构造函数，移动构造函数通常在资源转移场景下效率更高，避免不必要的拷贝开销
// 这里将x的成员变量m_stamp和m_frame_id的资源移动到新创建的对象中，并且声明该函数不会抛出异常（noexcept）
std_msgs::msg::Header::Header(
        Header&& x) noexcept
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

// std_msgs::msg::Header类的赋值运算符重载函数，用于将一个Header对象x赋值给另一个已存在的Header对象（当前对象，通过this指针指向）
// 它将传入对象x的成员变量m_stamp和m_frame_id的值赋给当前对象的相应成员变量，实现对象的赋值操作，并返回当前对象的引用，以便支持连续赋值等操作
std_msgs::msg::Header& std_msgs::msg::Header::operator =(
        const Header& x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;

    return *this;
}

std_msgs::msg::Header& std_msgs::msg::Header::operator =(
        Header&& x) noexcept
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);

    return *this;
}

bool std_msgs::msg::Header::operator ==(
        const Header& x) const
{
    return (m_stamp == x.m_stamp && m_frame_id == x.m_frame_id);
}

bool std_msgs::msg::Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

size_t std_msgs::msg::Header::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_Header_max_cdr_typesize;
}

size_t std_msgs::msg::Header::getCdrSerializedSize(
        const std_msgs::msg::Header& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    return current_alignment - initial_alignment;
}

void std_msgs::msg::Header::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_stamp;
    scdr << m_frame_id.c_str();
}

void std_msgs::msg::Header::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m_stamp;
    dcdr >> m_frame_id;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void std_msgs::msg::Header::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void std_msgs::msg::Header::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& std_msgs::msg::Header::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& std_msgs::msg::Header::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void std_msgs::msg::Header::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void std_msgs::msg::Header::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& std_msgs::msg::Header::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& std_msgs::msg::Header::frame_id()
{
    return m_frame_id;
}


size_t std_msgs::msg::Header::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_Header_max_key_cdr_typesize;
}

bool std_msgs::msg::Header::isKeyDefined()
{
    return false;
}

void std_msgs::msg::Header::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
