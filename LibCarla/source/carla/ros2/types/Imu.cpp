// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
 * @file Imu.cpp
 * This source file contains the definition of the described types in the IDL file.
 * This file was generated by the tool gen.
#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32
#include "Imu.h"
#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;
#include <utility>
// 以下定义了各个相关消息类型的最大CDR序列化大小以及最大键CDR序列化大小，这些宏定义的值用于后续序列化相关的计算和操作
// 宏定义
#define geometry_msgs_msg_Vector3_max_cdr_typesize 24ULL;
#define std_msgs_msg_Time_max_cdr_typesize 8ULL;

#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define sensor_msgs_msg_Imu_max_cdr_typesize 568ULL;
#define geometry_msgs_msg_Vector3_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Time_max_key_cdr_typesize 0ULL;

#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_Imu_max_key_cdr_typesize 0ULL;
// sensor_msgs::msg::Imu类的默认构造函数，用于初始化Imu对象的各个成员变量
// 初始化imu对象的各个成员变量
sensor_msgs::msg::Imu::Imu()
{
    // std_msgs::msg::Header m_header
    // geometry_msgs::msg::Quaternion m_orientation
    // sensor_msgs::msg::sensor_msgs__Imu__double_array_9 m_orientation_covariance
    // 初始化为0
    memset(&m_orientation_covariance, 0, (9) * 8);
    // geometry_msgs::msg::Vector3 m_angular_velocity
    // sensor_msgs::msg::sensor_msgs__Imu__double_array_9 m_angular_velocity_covariance
    memset(&m_angular_velocity_covariance, 0, (9) * 8);
    // geometry_msgs::msg::Vector3 m_linear_acceleration
    // sensor_msgs::msg::sensor_msgs__Imu__double_array_9 m_linear_acceleration_covariance
    memset(&m_linear_acceleration_covariance, 0, (9) * 8);
}
sensor_msgs::msg::Imu::~Imu()
{
}
// 拷贝构造函数
sensor_msgs::msg::Imu::Imu(
        const Imu& x)
{
    // 依次拷贝各个成员变量的值，实现深拷贝（如果成员变量本身是简单类型，那就是值拷贝；如果是复杂类型且有自己的拷贝逻辑，则按其逻辑拷贝）
    m_header = x.m_header;
    m_orientation = x.m_orientation;
    m_orientation_covariance = x.m_orientation_covariance;
    m_angular_velocity = x.m_angular_velocity;
    m_angular_velocity_covariance = x.m_angular_velocity_covariance;
    m_linear_acceleration = x.m_linear_acceleration;
    m_linear_acceleration_covariance = x.m_linear_acceleration_covariance;
}
// 移动构造函数，用于将另一个Imu对象的资源“移动”到当前对象，避免不必要的拷贝开销，通过std::move来转移资源所有权
sensor_msgs::msg::Imu::Imu(
        Imu&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_orientation = std::move(x.m_orientation);
    m_orientation_covariance = std::move(x.m_orientation_covariance);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_angular_velocity_covariance = std::move(x.m_angular_velocity_covariance);
    m_linear_acceleration = std::move(x.m_linear_acceleration);
    m_linear_acceleration_covariance = std::move(x.m_linear_acceleration_covariance);
}
sensor_msgs::msg::Imu& sensor_msgs::msg::Imu::operator =(
        const Imu& x)
{
    m_header = x.m_header;
    m_orientation = x.m_orientation;
    m_orientation_covariance = x.m_orientation_covariance;
    m_angular_velocity = x.m_angular_velocity;
    m_angular_velocity_covariance = x.m_angular_velocity_covariance;
    m_linear_acceleration = x.m_linear_acceleration;
    m_linear_acceleration_covariance = x.m_linear_acceleration_covariance;
    return *this;
}
// 重载赋值运算符（拷贝赋值），用于将另一个Imu对象的数据赋值给当前对象
sensor_msgs::msg::Imu& sensor_msgs::msg::Imu::operator =(
        Imu&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_orientation = std::move(x.m_orientation);
    m_orientation_covariance = std::move(x.m_orientation_covariance);
    m_angular_velocity = std::move(x.m_angular_velocity);
    m_angular_velocity_covariance = std::move(x.m_angular_velocity_covariance);
    m_linear_acceleration = std::move(x.m_linear_acceleration);
    m_linear_acceleration_covariance = std::move(x.m_linear_acceleration_covariance);
    return *this;
}
// 重载相等运算符，用于比较两个Imu对象是否相等，比较各个成员变量是否都相等
bool sensor_msgs::msg::Imu::operator ==(
        const Imu& x) const
{
    return (m_header == x.m_header && m_orientation == x.m_orientation && m_orientation_covariance == x.m_orientation_covariance && m_angular_velocity == x.m_angular_velocity && m_angular_velocity_covariance == x.m_angular_velocity_covariance && m_linear_acceleration == x.m_linear_acceleration && m_linear_acceleration_covariance == x.m_linear_acceleration_covariance);
}
// 重载不等运算符，通过对相等运算符取反来判断两个Imu对象是否不相等
bool sensor_msgs::msg::Imu::operator !=(
        const Imu& x) const
{
    return !(*this == x);
}
// 获取Imu对象的最大CDR序列化大小，这里忽略传入的当前对齐参数，直接返回预定义的sensor_msgs_msg_Imu_max_cdr_typesize值
size_t sensor_msgs::msg::Imu::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_Imu_max_cdr_typesize;
}
// 计算将Imu对象序列化到CDR格式所需的字节数
size_t sensor_msgs::msg::Imu::getCdrSerializedSize(
        const sensor_msgs::msg::Imu& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += geometry_msgs::msg::Quaternion::getCdrSerializedSize(data.orientation(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.angular_velocity(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += geometry_msgs::msg::Vector3::getCdrSerializedSize(data.linear_acceleration(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    // 返回序列化后的总字节数与初始对齐式的差值
    return current_alignment - initial_alignment;
}
// 将Imu对象的各个成员变量序列化到给定的CDR对象中，按照成员变量定义的顺序依次进行序列化操作
void sensor_msgs::msg::Imu::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m_header;
    scdr << m_orientation;
    scdr << m_orientation_covariance;
    scdr << m_angular_velocity;
    scdr << m_angular_velocity_covariance;
    scdr << m_linear_acceleration;
    scdr << m_linear_acceleration_covariance;
}
// 从给定的CDR对象中反序列化数据到Imu对象的各个成员变量中，按照与序列化相反的顺序依次读取数据进行赋值
void sensor_msgs::msg::Imu::deserialize(  
        eprosima::fastcdr::Cdr& dcdr)  
{  
    // 从 Cdr 数据流中反序列化成员变量  
    dcdr >> m_header;                     // 反序列化头部信息  
    dcdr >> m_orientation;                // 反序列化方向四元数  
    dcdr >> m_orientation_covariance;     // 反序列化方向协方差  
    dcdr >> m_angular_velocity;           // 反序列化角速度  
    dcdr >> m_angular_velocity_covariance; // 反序列化角速度协方差  
    dcdr >> m_linear_acceleration;        // 反序列化线性加速度  
    dcdr >> m_linear_acceleration_covariance; // 反序列化线性加速度协方差  
}  

/*!  
 * @brief 复制成员变量 header 的值  
 * @param _header 新值，将被复制到成员变量 header  
 */  
void sensor_msgs::msg::Imu::header(  
        const std_msgs::msg::Header& _header)  
{  
    m_header = _header; // 复制 header  
}  

/*!  
 * @brief 移动成员变量 header 的值  
 * @param _header 新值，将被移动到成员变量 header  
 */  
void sensor_msgs::msg::Imu::header(  
        std_msgs::msg::Header&& _header)  
{  
    m_header = std::move(_header); // 移动 header  
}  

/*!  
 * @brief 返回成员变量 header 的常量引用  
 * @return 常量引用，指向成员变量 header  
 */  
const std_msgs::msg::Header& sensor_msgs::msg::Imu::header() const  
{  
    return m_header; // 返回 header 的常量引用  
}  

/*!  
 * @brief 返回成员变量 header 的引用  
 * @return 引用，指向成员变量 header  
 */  
std_msgs::msg::Header& sensor_msgs::msg::Imu::header()  
{  
    return m_header; // 返回 header 的可修改引用  
}  

/*!  
 * @brief 复制成员变量 orientation 的值  
 * @param _orientation 新值，将被复制到成员变量 orientation  
 */  
void sensor_msgs::msg::Imu::orientation(  
        const geometry_msgs::msg::Quaternion& _orientation)  
{  
    m_orientation = _orientation; // 复制方向  
}  

/*!  
 * @brief 移动成员变量 orientation 的值  
 * @param _orientation 新值，将被移动到成员变量 orientation  
 */  
void sensor_msgs::msg::Imu::orientation(  
        geometry_msgs::msg::Quaternion&& _orientation)  
{  
    m_orientation = std::move(_orientation); // 移动方向  
}  

/*!  
 * @brief 返回成员变量 orientation 的常量引用  
 * @return 常量引用，指向成员变量 orientation  
 */  
const geometry_msgs::msg::Quaternion& sensor_msgs::msg::Imu::orientation() const  
{  
    return m_orientation; // 返回方向的常量引用  
}  

/*!  
 * @brief 返回成员变量 orientation 的引用  
 * @return 引用，指向成员变量 orientation  
 */  
geometry_msgs::msg::Quaternion& sensor_msgs::msg::Imu::orientation()  
{  
    return m_orientation; // 返回方向的可修改引用  
}  

/*!  
 * @brief 复制成员变量 orientation_covariance 的值  
 * @param _orientation_covariance 新值，将被复制到成员变量 orientation_covariance  
 */  
void sensor_msgs::msg::Imu::orientation_covariance(  
        const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& _orientation_covariance)  
{  
    m_orientation_covariance = _orientation_covariance; // 复制方向协方差  
}  

/*!
 * @brief This function moves the value in member orientation_covariance
 * @param _orientation_covariance New value to be moved in member orientation_covariance
 */
void sensor_msgs::msg::Imu::orientation_covariance(
        sensor_msgs::msg::sensor_msgs__Imu__double_array_9&& _orientation_covariance)
{
    m_orientation_covariance = std::move(_orientation_covariance);
}

/*!
 * @brief This function returns a constant reference to member orientation_covariance
 * @return Constant reference to member orientation_covariance
 */
const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::orientation_covariance() const
{
    return m_orientation_covariance;
}

/*!
 * @brief This function returns a reference to member orientation_covariance
 * @return Reference to member orientation_covariance
 */
sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::orientation_covariance()
{
    return m_orientation_covariance;
}

/*!
 * @brief This function copies the value in member angular_velocity
 * @param _angular_velocity New value to be copied in member angular_velocity
 */
void sensor_msgs::msg::Imu::angular_velocity(
        const geometry_msgs::msg::Vector3& _angular_velocity)
{
    m_angular_velocity = _angular_velocity;
}

/*!
 * @brief This function moves the value in member angular_velocity
 * @param _angular_velocity New value to be moved in member angular_velocity
 */
void sensor_msgs::msg::Imu::angular_velocity(
        geometry_msgs::msg::Vector3&& _angular_velocity)
{
    m_angular_velocity = std::move(_angular_velocity);
}

/*!
 * @brief This function returns a constant reference to member angular_velocity
 * @return Constant reference to member angular_velocity
 */
const geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::angular_velocity() const
{
    return m_angular_velocity;
}

/*!
 * @brief This function returns a reference to member angular_velocity
 * @return Reference to member angular_velocity
 */
geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::angular_velocity()
{
    return m_angular_velocity;
}

/*!
 * @brief This function copies the value in member angular_velocity_covariance
 * @param _angular_velocity_covariance New value to be copied in member angular_velocity_covariance
 */
void sensor_msgs::msg::Imu::angular_velocity_covariance(
        const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& _angular_velocity_covariance)
{
    m_angular_velocity_covariance = _angular_velocity_covariance;
}

/*!
 * @brief This function moves the value in member angular_velocity_covariance
 * @param _angular_velocity_covariance New value to be moved in member angular_velocity_covariance
 */
void sensor_msgs::msg::Imu::angular_velocity_covariance(
        sensor_msgs::msg::sensor_msgs__Imu__double_array_9&& _angular_velocity_covariance)
{
    m_angular_velocity_covariance = std::move(_angular_velocity_covariance);
}

/*!
 * @brief This function returns a constant reference to member angular_velocity_covariance
 * @return Constant reference to member angular_velocity_covariance
 */
const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::angular_velocity_covariance() const
{
    return m_angular_velocity_covariance;
}

/*!
 * @brief This function returns a reference to member angular_velocity_covariance
 * @return Reference to member angular_velocity_covariance
 */
sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::angular_velocity_covariance()
{
    return m_angular_velocity_covariance;
}

/*!
 * @brief This function copies the value in member linear_acceleration
 * @param _linear_acceleration New value to be copied in member linear_acceleration
 */
void sensor_msgs::msg::Imu::linear_acceleration(
        const geometry_msgs::msg::Vector3& _linear_acceleration)
{
    m_linear_acceleration = _linear_acceleration;
}

/*!
 * @brief This function moves the value in member linear_acceleration
 * @param _linear_acceleration New value to be moved in member linear_acceleration
 */
void sensor_msgs::msg::Imu::linear_acceleration(
        geometry_msgs::msg::Vector3&& _linear_acceleration)
{
    m_linear_acceleration = std::move(_linear_acceleration);
}

/*!
 * @brief This function returns a constant reference to member linear_acceleration
 * @return Constant reference to member linear_acceleration
 */
const geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::linear_acceleration() const
{
    return m_linear_acceleration;
}

/*!
 * @brief This function returns a reference to member linear_acceleration
 * @return Reference to member linear_acceleration
 */
geometry_msgs::msg::Vector3& sensor_msgs::msg::Imu::linear_acceleration()
{
    return m_linear_acceleration;
}

/*!
 * @brief This function copies the value in member linear_acceleration_covariance
 * @param _linear_acceleration_covariance New value to be copied in member linear_acceleration_covariance
 */
void sensor_msgs::msg::Imu::linear_acceleration_covariance(
        const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& _linear_acceleration_covariance)
{
    m_linear_acceleration_covariance = _linear_acceleration_covariance;
}

/*!
 * @brief This function moves the value in member linear_acceleration_covariance
 * @param _linear_acceleration_covariance New value to be moved in member linear_acceleration_covariance
 */
void sensor_msgs::msg::Imu::linear_acceleration_covariance(
        sensor_msgs::msg::sensor_msgs__Imu__double_array_9&& _linear_acceleration_covariance)
{
    m_linear_acceleration_covariance = std::move(_linear_acceleration_covariance);
}

/*!
 * @brief This function returns a constant reference to member linear_acceleration_covariance
 * @return Constant reference to member linear_acceleration_covariance
 */
const sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::linear_acceleration_covariance() const
{
    return m_linear_acceleration_covariance;
}

/*!
 * @brief This function returns a reference to member linear_acceleration_covariance
 * @return Reference to member linear_acceleration_covariance
sensor_msgs::msg::sensor_msgs__Imu__double_array_9& sensor_msgs::msg::Imu::linear_acceleration_covariance()
{
    return m_linear_acceleration_covariance;
}

size_t sensor_msgs::msg::Imu::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_Imu_max_key_cdr_typesize;
}

bool sensor_msgs::msg::Imu::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::Imu::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
