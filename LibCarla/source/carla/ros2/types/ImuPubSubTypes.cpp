// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImuPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>  
#include <fastcdr/Cdr.h>  

#include "ImuPubSubTypes.h"  

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;  
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;  

namespace sensor_msgs {  
    namespace msg {  

        ImuPubSubType::ImuPubSubType()  
        {  
            setName("sensor_msgs::msg::dds_::Imu_"); // 设置类型名称  
            auto type_size = Imu::getMaxCdrSerializedSize(); // 获取最大序列化大小  
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* 处理子消息对齐 */  
            m_typeSize = static_cast<uint32_t>(type_size) + 4; /* 添加封装大小  */  
            m_isGetKeyDefined = Imu::isKeyDefined(); // 检查是否定义了键  
            size_t keyLength = Imu::getKeyMaxCdrSerializedSize() > 16 ?  
                    Imu::getKeyMaxCdrSerializedSize() : 16; // 获取键的最大序列化大小  
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength)); // 为键分配缓冲区  
            memset(m_keyBuffer, 0, keyLength); // 初始化缓冲区  
        }  

        ImuPubSubType::~ImuPubSubType()  
        {  
            if (m_keyBuffer != nullptr)  
            {  
                free(m_keyBuffer); // 释放键的缓冲区  
            }  
        }  

        bool ImuPubSubType::serialize(  
                void* data,  
                SerializedPayload_t* payload)  
        {  
            Imu* p_type = static_cast<Imu*>(data); // 将数据指针转换为Imu类型指针  

            // 管理原始缓冲区的对象  
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);  
            // 负责序列化数据的对象  
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);  
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE; // 设置封装类型  
            // 序列化封装  
            ser.serialize_encapsulation();  

            try  
            {  
                // 序列化对象  
                p_type->serialize(ser);  
            }  
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)  
            {  
                return false; // 内存不足时返回false  
            }  

            // 获取序列化长度  
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());  
            return true; // 序列化成功  
        }  

        bool ImuPubSubType::deserialize(  
                SerializedPayload_t* payload,  
                void* data)  
        {  
            try  
            {  
                // 将数据转换为Imu类型指针  
                Imu* p_type = static_cast<Imu*>(data);  

                // 管理原始缓冲区的对象  
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);  

                // 负责反序列化数据的对象  
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);  

                // 反序列化封装  
                deser.read_encapsulation();  
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE; // 设置封装类型  

                // 反序列化对象  
                p_type->deserialize(deser);  
            }  
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)  
            {  
                return false; // 内存不足时返回false  
            }  

            return true; // 反序列化成功  
        }  

        std::function<uint32_t()> ImuPubSubType::getSerializedSizeProvider(  
                void* data)  
        {  
            return [data]() -> uint32_t  
                   {  
                       // 返回序列化大小，包括4字节的封装  
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Imu*>(data))) +  
                              4u /*封装*/;  
                   };  
        }  

        void* ImuPubSubType::createData()  
        {  
            return reinterpret_cast<void*>(new Imu()); // 创建新的Imu实例  
        }  

        void ImuPubSubType::deleteData(  
                void* data)  
        {  
            delete(reinterpret_cast<Imu*>(data)); // 删除Imu实例  
        }  
    }  
}  

        bool ImuPubSubType::getKey(  
                void* data,  
                InstanceHandle_t* handle,  
                bool force_md5)  
{  
    if (!m_isGetKeyDefined) // 检查是否定义了键  
    {  
        return false; // 如果没有定义，返回false  
    }  

    Imu* p_type = static_cast<Imu*>(data); // 将数据指针转换为Imu类型指针  

    // 管理原始缓冲区的对象  
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),  
            Imu::getKeyMaxCdrSerializedSize()); // 使用m_keyBuffer和键的最大序列化大小初始化FastBuffer  

    // 负责序列化数据的对象  
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); // 创建Cdr对象，使用大端序列化  

    p_type->serializeKey(ser); // 序列化键  

    // 如果强制生成MD5或者键的最大序列化大小大于16，计算MD5  
    if (force_md5 || Imu::getKeyMaxCdrSerializedSize() > 16)  
    {  
        m_md5.init(); // 初始化MD5计算  
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength())); // 更新MD5  
        m_md5.finalize(); // 完成MD5计算  
        
        for (uint8_t i = 0; i < 16; ++i) // 将MD5结果存储到实例句柄中  
        {  
            handle->value[i] = m_md5.digest[i];  
        }  
    }  
    else  
    {  
        // 如果不需要MD5，直接将序列化的键复制到实例句柄  
        for (uint8_t i = 0; i < 16; ++i)  
        {  
            handle->value[i] = m_keyBuffer[i];  
        }  
    }  
    return true; // 成功获取键，返回true  
}  
    } //End of namespace msg
} //End of namespace sensor_msgs
