// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImuPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "ImuPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

namespace sensor_msgs {
    namespace msg {

        ImuPubSubType::ImuPubSubType()
        {
            // 设置类型的名称为 "sensor_msgs::msg::dds_::Imu_"，这是 ROS 2 中的 IMU 消息类型
            setName("sensor_msgs::msg::dds_::Imu_");

            // 计算 Imu 类型的最大序列化大小
            auto type_size = Imu::getMaxCdrSerializedSize();

            // 计算序列化数据的对齐（为了处理可能存在的子消息）
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4);

            // 将类型大小加上 4 字节的封装大小（ROS 2 消息通常采用封装格式）
            m_typeSize = static_cast<uint32_t>(type_size) + 4;  // encapsulation

            // 检查 Imu 类型是否定义了键值（key），并保存其状态
            m_isGetKeyDefined = Imu::isKeyDefined();

            // 计算 Imu 类型键的最大序列化大小，如果大于 16 字节，则选择较大的键长度，否则选择 16 字节
            size_t keyLength = Imu::getKeyMaxCdrSerializedSize() > 16 ?
                    Imu::getKeyMaxCdrSerializedSize() : 16;

            // 为键值缓冲区分配内存，存储最大可能的键长度
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));

            // 初始化缓冲区内容为零，确保没有未初始化的数据
            memset(m_keyBuffer, 0, keyLength);
        }


        ImuPubSubType::~ImuPubSubType()
        {
            if (m_keyBuffer != nullptr)
            {
                free(m_keyBuffer);
            }
        }

        bool ImuPubSubType::serialize(
                void* data,
                SerializedPayload_t* payload)
        {
            Imu* p_type = static_cast<Imu*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
            // Serialize encapsulation
            ser.serialize_encapsulation();

            try
            {
                // Serialize the object.
                p_type->serialize(ser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            // Get the serialized length
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
            return true;
        }

        bool ImuPubSubType::deserialize(
                SerializedPayload_t* payload,
                void* data)
        {
            try
            {
                // 将传入的 void* 类型数据指针转换为 Imu 类型指针
                Imu* p_type = static_cast<Imu*>(data);

                // 创建一个 eprosima::fastcdr::FastBuffer 对象，用于管理原始数据缓冲区
                // 将 payload->data 指针作为缓冲区，并使用 payload->length 作为缓冲区的大小
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

                // 创建一个 eprosima::fastcdr::Cdr 对象，用于反序列化数据
                // 使用默认字节序（系统字节序），并选择 DDS_CDR 格式进行反序列化
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

                // 反序列化封装头（处理序列化数据的结构和顺序）
                deser.read_encapsulation();

                // 根据反序列化的数据的字节序，设置封装格式（大端或小端）
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                // 反序列化具体的 Imu 对象数据
                p_type->deserialize(deser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                // 如果内存不足，捕获异常并返回 false，表示反序列化失败
                return false;
            }

            // 反序列化成功，返回 true
            return true;
        }


        std::function<uint32_t()> ImuPubSubType::getSerializedSizeProvider(
                void* data)
        {
            return [data]() -> uint32_t
                   {
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Imu*>(data))) +
                              4u /*encapsulation*/;
                   };
        }

        void* ImuPubSubType::createData()
        {
            return reinterpret_cast<void*>(new Imu());
        }

        void ImuPubSubType::deleteData(
                void* data)
        {
            delete(reinterpret_cast<Imu*>(data));
        }

        bool ImuPubSubType::getKey(
                void* data,
                InstanceHandle_t* handle,
                bool force_md5)
        {
            if (!m_isGetKeyDefined)
            {
                return false;
            }

            Imu* p_type = static_cast<Imu*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
                    Imu::getKeyMaxCdrSerializedSize());

            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
            p_type->serializeKey(ser);
            if (force_md5 || Imu::getKeyMaxCdrSerializedSize() > 16)
            {
                m_md5.init();
                m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                m_md5.finalize();
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_md5.digest[i];
                }
            }
            else
            {
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_keyBuffer[i];
                }
            }
            return true;
        }
    } //End of namespace msg
} //End of namespace sensor_msgs
