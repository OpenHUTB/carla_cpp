// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PointCloud2.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "PointCloud2.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define sensor_msgs_msg_PointField_max_cdr_typesize 272ULL;
#define std_msgs_msg_Time_max_cdr_typesize 8ULL;
#define sensor_msgs_msg_PointCloud2_max_cdr_typesize 27597ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define sensor_msgs_msg_PointField_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Time_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_PointCloud2_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

sensor_msgs::msg::PointCloud2::PointCloud2()
{
    // std_msgs::msg::Header m_header

    // unsigned long m_height
    m_height = 0;
    // unsigned long m_width
    m_width = 0;
    // sequence<sensor_msgs::msg::PointField> m_fields

    // boolean m_is_bigendian
    m_is_bigendian = false;
    // unsigned long m_point_step
    m_point_step = 0;
    // unsigned long m_row_step
    m_row_step = 0;
    // sequence<octet> m_data

    // boolean m_is_dense
    m_is_dense = false;
}

sensor_msgs::msg::PointCloud2::~PointCloud2()
{
}

sensor_msgs::msg::PointCloud2::PointCloud2(
        const PointCloud2& x)
{
    // 拷贝构造函数，将另一个 PointCloud2 对象 x 的成员变量复制到当前对象

    // 将 x 的 m_header 成员复制到当前对象的 m_header
    m_header = x.m_header;

    // 将 x 的 m_height 成员复制到当前对象的 m_height
    m_height = x.m_height;

    // 将 x 的 m_width 成员复制到当前对象的 m_width
    m_width = x.m_width;

    // 将 x 的 m_fields 成员复制到当前对象的 m_fields
    m_fields = x.m_fields;

    // 将 x 的 m_is_bigendian 成员复制到当前对象的 m_is_bigendian
    m_is_bigendian = x.m_is_bigendian;

    // 将 x 的 m_point_step 成员复制到当前对象的 m_point_step
    m_point_step = x.m_point_step;

    // 将 x 的 m_row_step 成员复制到当前对象的 m_row_step
    m_row_step = x.m_row_step;

    // 将 x 的 m_data 成员复制到当前对象的 m_data
    m_data = x.m_data;

    // 将 x 的 m_is_dense 成员复制到当前对象的 m_is_dense
    m_is_dense = x.m_is_dense;
}

// 定义PointCloud2的移动构造函数，用于通过移动语义从另一个PointCloud2对象构造当前对象，并且声明不会抛出异常
sensor_msgs::msg::PointCloud2::PointCloud2(
        PointCloud2&& x) noexcept
{
// 使用std::move将传入对象x的头信息移动赋值给当前对象的头信息，实现资源所有权的转移
    m_header = std::move(x.m_header);
// 将传入对象x的高度值直接赋值给当前对象的高度成员变量
    m_height = x.m_height;
// 将传入对象x的宽度值直接赋值给当前对象的宽度成员变量
    m_width = x.m_width;
 // 使用std::move将传入对象x的字段信息移动赋值给当前对象的字段信息，转移资源所有权
    m_fields = std::move(x.m_fields);
// 将传入对象x的大端序标志直接赋值给当前对象的大端序标志成员变量
    m_is_bigendian = x.m_is_bigendian;
// 将传入对象x的点步长值直接赋值给当前对象的点步长成员变量
    m_point_step = x.m_point_step;
 // 将传入对象x的行步长值直接赋值给当前对象的行步长成员变量   
    m_row_step = x.m_row_step;
 // 使用std::move将传入对象x的数据移动赋值给当前对象的数据，转移资源所有权
    m_data = std::move(x.m_data);
// 将传入对象x的是否密集标志直接赋值给当前对象的是否密集标志成员变量
    m_is_dense = x.m_is_dense;
}
// 定义PointCloud2的拷贝赋值运算符，用于将另一个PointCloud2对象的内容拷贝赋值给当前对象
sensor_msgs::msg::PointCloud2& sensor_msgs::msg::PointCloud2::operator =(
        const PointCloud2& x)
{
// 将传入对象x的头信息拷贝赋值给当前对象的头信息
    m_header = x.m_header;
// 将传入对象x的高度值拷贝赋值给当前对象的高度成员变量
    m_height = x.m_height;
// 将传入对象x的宽度值拷贝赋值给当前对象的宽度成员变量
    m_width = x.m_width;
    // 将传入对象x的字段信息拷贝赋值给当前对象的字段信息
    m_fields = x.m_fields;
// 将传入对象x的大端序标志拷贝赋值给当前对象的大端序标志成员变量
    m_is_bigendian = x.m_is_bigendian;
 // 将传入对象x的点步长值拷贝赋值给当前对象的点步长成员变量
    m_point_step = x.m_point_step;
// 将传入对象x的行步长值拷贝赋值给当前对象的行步长成员变量
    m_row_step = x.m_row_step;
// 将传入对象x的数据拷贝赋值给当前对象的数据
    m_data = x.m_data;
 // 将传入对象x的是否密集标志拷贝赋值给当前对象的是否密集标志成员变量
    m_is_dense = x.m_is_dense;
 // 返回当前对象的引用，以支持连续赋值等操作
    return *this;
}
// 定义PointCloud2的移动赋值运算符，用于通过移动语义将另一个PointCloud2对象的内容移动赋值给当前对象，并且声明不会抛出异常
sensor_msgs::msg::PointCloud2& sensor_msgs::msg::PointCloud2::operator =(
        PointCloud2&& x) noexcept
{
// 使用std::move将传入对象x的头信息移动赋值给当前对象的头信息，转移资源所有权
    m_header = std::move(x.m_header);
 // 将传入对象x的高度值直接赋值给当前对象的高度成员变量
    m_height = x.m_height;
// 将传入对象x的宽度值直接赋值给当前对象的宽度成员变量
    m_width = x.m_width;
// 使用std::move将传入对象x的字段信息移动赋值给当前对象的字段信息，转移资源所有权
    m_fields = std::move(x.m_fields);
// 将传入对象x的大端序标志直接赋值给当前对象的大端序标志成员变量
    m_is_bigendian = x.m_is_bigendian;
// 将传入对象x的点步长值直接赋值给当前对象的点步长成员变量
    m_point_step = x.m_point_step;
// 将传入对象x的行步长值直接赋值给当前对象的行步长成员变量
    m_row_step = x.m_row_step;
// 使用std::move将传入对象x的数据移动赋值给当前对象的数据，转移资源所有权
    m_data = std::move(x.m_data);
// 将传入对象x的是否密集标志直接赋值给当前对象的是否密集标志成员变量
    m_is_dense = x.m_is_dense;
// 返回当前对象的引用，以支持连续赋值等操作
    return *this;
}
// 定义PointCloud2的相等比较运算符，用于比较当前对象和另一个PointCloud2对象是否相等
bool sensor_msgs::msg::PointCloud2::operator ==(
        const PointCloud2& x) const
{
// 依次比较两个对象的各个成员变量是否相等，只有所有成员变量都相等时，才返回true，表示两个对象相等
    return (m_header == x.m_header && m_height == x.m_height && m_width == x.m_width && m_fields == x.m_fields && m_is_bigendian == x.m_is_bigendian && m_point_step == x.m_point_step && m_row_step == x.m_row_step && m_data == x.m_data && m_is_dense == x.m_is_dense);
}
// 定义PointCloud2的不等比较运算符，通过调用相等比较运算符取反的结果来判断两个对象是否不相等
bool sensor_msgs::msg::PointCloud2::operator !=(
        const PointCloud2& x) const
{
    return !(*this == x);
}
// 定义函数用于获取PointCloud2对象在CDR序列化时的最大尺寸，当前传入的current_alignment参数未被使用（可能在更完整的逻辑中有作用）
size_t sensor_msgs::msg::PointCloud2::getMaxCdrSerializedSize(
        size_t current_alignment)
{
// 将current_alignment参数进行强制类型转换为void类型，以避免编译器产生未使用参数的警告，实际在这里它未起到作用
    static_cast<void>(current_alignment);
// 返回PointCloud2对象在CDR序列化时的最大尺寸值，该值通过sensor_msgs_msg_PointCloud2_max_cdr_typesize获取（应该是一个预定义的常量之类的）
    return sensor_msgs_msg_PointCloud2_max_cdr_typesize;
}

size_t sensor_msgs::msg::PointCloud2::getCdrSerializedSize(
        const sensor_msgs::msg::PointCloud2& data,  // 传入PointCloud2数据对象
        size_t current_alignment)  // 当前对齐方式，通常是0
{
    size_t initial_alignment = current_alignment;  // 记录初始对齐值

    // 获取消息头（Header）的序列化大小，并更新对齐值
    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);

    // 添加4字节的字段，表示PointCloud2的字段数
    // 同时确保数据按照4字节对齐
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 添加4字节的字段，表示数据的宽度（width）
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 添加4字节的字段，表示数据的高度（height）
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 遍历字段列表（PointCloud2中的PointField），累加每个字段的序列化大小
    // 这些字段用于描述每个点的属性（例如位置、颜色等）
    for(size_t a = 0; a < data.fields().size(); ++a)
    {
        // 获取每个PointField的序列化大小
        current_alignment += sensor_msgs::msg::PointField::getCdrSerializedSize(data.fields().at(a), current_alignment);
    }

    // 添加1字节的字段，表示是否有总数标志
    // 该字段为可选字段，因此需要计算对齐
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    // 添加4字节的字段，表示点云数据的序列化大小（data）
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 添加4字节的字段，表示数据的起始偏移量（point_step）
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 添加4字节的字段，表示每个点的字节数（row_step）
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // 如果点云数据（data）不为空，计算数据部分的序列化大小
    // 这里假设数据是一个字节数组，并计算对齐和大小
    if (data.data().size() > 0)
    {
        // 计算data的序列化大小，考虑到可能的对齐
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    // 添加1字节的字段，表示是否有总数标志
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    // 返回当前对齐位置与初始对齐位置的差值，表示整个消息的序列化大小
    return current_alignment - initial_alignment;
}

// 定义PointCloud2类的serialize函数，用于将PointCloud2对象的各个成员变量序列化到给定的eprosima::fastcdr::Cdr对象中，函数被声明为const，表示不会修改当前PointCloud2对象的状态
void sensor_msgs::msg::PointCloud2::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的头信息成员变量（m_header）序列化到scdr对象中，具体的序列化规则由eprosima::fastcdr::Cdr中对应类型的重载实现决定
    scdr << m_header;
 // 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的高度成员变量（m_height）序列化到scdr对象中
    scdr << m_height;
    // 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的宽度成员变量（m_width）序列化到scdr对象中
    scdr << m_width;
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的字段信息成员变量（m_fields）序列化到scdr对象中
    scdr << m_fields;
    // 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的大端序标志成员变量（m_is_bigendian）序列化到scdr对象中
    scdr << m_is_bigendian;
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的点步长成员变量（m_point_step）序列化到scdr对象中
    scdr << m_point_step;
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的行步长成员变量（m_row_step）序列化到scdr对象中
    scdr << m_row_step;
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的数据成员变量（m_data）序列化到scdr对象中
    scdr << m_data;
// 使用eprosima::fastcdr::Cdr的重载<<运算符，将当前PointCloud2对象的是否密集标志成员变量（m_is_dense）序列化到scdr对象中
    scdr << m_is_dense;
}
// 定义PointCloud2类的deserialize函数，用于从给定的eprosima::fastcdr::Cdr对象中反序列化数据，来填充当前PointCloud2对象的各个成员变量
void sensor_msgs::msg::PointCloud2::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的头信息成员变量（m_header），具体的反序列化规则由eprosima::fastcdr::Cdr中对应类型的重载实现决定
    dcdr >> m_header;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的高度成员变量（m_height
    dcdr >> m_height;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的宽度成员变量（m_width）
    dcdr >> m_width;
 // 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的字段信息成员变量（m_fields）
    dcdr >> m_fields;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的大端序标志成员变量（m_is_bigendian）
    dcdr >> m_is_bigendian;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的点步长成员变量（m_point_step）
    dcdr >> m_point_step;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的行步长成员变量（m_row_step）
    dcdr >> m_row_step;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的数据成员变量（m_data）
    dcdr >> m_data;
// 使用eprosima::fastcdr::Cdr的重载>>运算符，从dcdr对象中反序列化数据来填充当前PointCloud2对象的是否密集标志成员变量（m_is_dense）
    dcdr >> m_is_dense;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::PointCloud2::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::PointCloud2::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::PointCloud2::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::PointCloud2::header()
{
    return m_header;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void sensor_msgs::msg::PointCloud2::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t sensor_msgs::msg::PointCloud2::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& sensor_msgs::msg::PointCloud2::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void sensor_msgs::msg::PointCloud2::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t sensor_msgs::msg::PointCloud2::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& sensor_msgs::msg::PointCloud2::width()
{
    return m_width;
}

/*!
 * @brief This function copies the value in member fields
 * @param _fields New value to be copied in member fields
 */
void sensor_msgs::msg::PointCloud2::fields(
        const std::vector<sensor_msgs::msg::PointField>& _fields)
{
    m_fields = _fields;
}

/*!
 * @brief This function moves the value in member fields
 * @param _fields New value to be moved in member fields
 */
void sensor_msgs::msg::PointCloud2::fields(
        std::vector<sensor_msgs::msg::PointField>&& _fields)
{
    m_fields = std::move(_fields);
}

/*!
 * @brief This function returns a constant reference to member fields
 * @return Constant reference to member fields
 */
const std::vector<sensor_msgs::msg::PointField>& sensor_msgs::msg::PointCloud2::fields() const
{
    return m_fields;
}

/*!
 * @brief This function returns a reference to member fields
 * @return Reference to member fields
 */
std::vector<sensor_msgs::msg::PointField>& sensor_msgs::msg::PointCloud2::fields()
{
    return m_fields;
}

/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void sensor_msgs::msg::PointCloud2::is_bigendian(
        bool _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
bool sensor_msgs::msg::PointCloud2::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
bool& sensor_msgs::msg::PointCloud2::is_bigendian()
{
    return m_is_bigendian;
}

/*!
 * @brief This function sets a value in member point_step
 * @param _point_step New value for member point_step
 */
void sensor_msgs::msg::PointCloud2::point_step(
        uint32_t _point_step)
{
    m_point_step = _point_step;
}

/*!
 * @brief This function returns the value of member point_step
 * @return Value of member point_step
 */
uint32_t sensor_msgs::msg::PointCloud2::point_step() const
{
    return m_point_step;
}

/*!
 * @brief This function returns a reference to member point_step
 * @return Reference to member point_step
 */
uint32_t& sensor_msgs::msg::PointCloud2::point_step()
{
    return m_point_step;
}

/*!
 * @brief This function sets a value in member row_step
 * @param _row_step New value for member row_step
 */
void sensor_msgs::msg::PointCloud2::row_step(
        uint32_t _row_step)
{
    m_row_step = _row_step;
}

/*!
 * @brief This function returns the value of member row_step
 * @return Value of member row_step
 */
uint32_t sensor_msgs::msg::PointCloud2::row_step() const
{
    return m_row_step;
}

/*!
 * @brief This function returns a reference to member row_step
 * @return Reference to member row_step
 */
uint32_t& sensor_msgs::msg::PointCloud2::row_step()
{
    return m_row_step;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void sensor_msgs::msg::PointCloud2::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void sensor_msgs::msg::PointCloud2::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& sensor_msgs::msg::PointCloud2::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& sensor_msgs::msg::PointCloud2::data()
{
    return m_data;
}

/*!
 * @brief This function sets a value in member is_dense
 * @param _is_dense New value for member is_dense
 */
void sensor_msgs::msg::PointCloud2::is_dense(
        bool _is_dense)
{
    m_is_dense = _is_dense;
}

/*!
 * @brief This function returns the value of member is_dense
 * @return Value of member is_dense
 */
bool sensor_msgs::msg::PointCloud2::is_dense() const
{
    return m_is_dense;
}

/*!
 * @brief This function returns a reference to member is_dense
 * @return Reference to member is_dense
 */
// 定义一个名为is_dense的成员函数，它返回一个对布尔类型的引用，用于获取PointCloud2对象中表示是否密集的成员变量m_is_dense的引用
// 通过返回引用，外部代码可以直接修改这个成员变量的值
bool& sensor_msgs::msg::PointCloud2::is_dense()
{
    return m_is_dense;
}
// 定义一个名为getKeyMaxCdrSerializedSize的成员函数，用于获取PointCloud2对象在特定序列化（可能是与键相关的CDR序列化，具体取决于上下文）情况下的最大尺寸
// 函数接收一个size_t类型的参数current_alignment，表示当前的对齐方式（不过在这里暂时没实际用到，只是进行了类型转换避免编译器警告）
size_t sensor_msgs::msg::PointCloud2::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
// 将传入的current_alignment参数强制转换为void类型，其目的是消除编译器关于未使用参数的警告提示，说明在当前函数实现中这个参数暂时没有实际参与计算等操作
    static_cast<void>(current_alignment);
// 返回PointCloud2对象在相关键的CDR序列化时的最大尺寸，该尺寸的值来源于sensor_msgs_msg_PointCloud2_max_key_cdr_typesize（推测是一个预定义的表示尺寸大小的常量之类的量）
    return sensor_msgs_msg_PointCloud2_max_key_cdr_typesize;
}
// 定义一个名为isKeyDefined的成员函数，用于判断PointCloud2对象中与键相关的内容是否已经被定义
// 这里直接返回false，表示默认情况下键相关内容未被定义，具体返回值的逻辑可能需要根据实际应用场景和更完整的类设计来进一步理解和调整
bool sensor_msgs::msg::PointCloud2::isKeyDefined()
{
    return false;
}
// 定义一个名为serializeKey的成员函数，用于将PointCloud2对象中与“键”相关的数据进行序列化操作，函数接收一个eprosima::fastcdr::Cdr类型的引用参数scdr，
// 这个参数应该是用于承载序列化后的数据的对象，函数被声明为const，表示该函数不会修改调用它的PointCloud2对象本身的状态。
void sensor_msgs::msg::PointCloud2::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{

    (void) scdr;
}
