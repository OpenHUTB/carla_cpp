// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuaternionPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "QuaternionPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

namespace geometry_msgs {
    namespace msg {
        QuaternionPubSubType::QuaternionPubSubType()
        {
            setName("geometry_msgs::msg::dds_::Quaternion_");
            auto type_size = Quaternion::getMaxCdrSerializedSize();
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
            m_typeSize = static_cast<uint32_t>(type_size) + 4; /*encapsulation*/
            m_isGetKeyDefined = Quaternion::isKeyDefined();
            size_t keyLength = Quaternion::getKeyMaxCdrSerializedSize() > 16 ?
                    Quaternion::getKeyMaxCdrSerializedSize() : 16;
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
            memset(m_keyBuffer, 0, keyLength);
        }

        QuaternionPubSubType::~QuaternionPubSubType()
        {
            if (m_keyBuffer != nullptr)
            {
                free(m_keyBuffer);
            }
        }
        bool QuaternionPubSubType::serialize(
                void* data,
                SerializedPayload_t* payload)
        {
            // 将 void* 类型的数据指针转换为 Quaternion* 类型
            // p_type 是指向实际数据对象 Quaternion 的指针
            Quaternion* p_type = static_cast<Quaternion*>(data);

            // 创建一个 FastBuffer 对象，管理原始数据缓冲区
            // fastbuffer 操作 payload->data 中的数据，最大缓冲区大小由 payload->max_size 决定
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);

            // 创建一个 Cdr 对象用于序列化数据
            // Cdr 对象基于 fastbuffer 创建，使用默认字节序（系统字节序），并且序列化采用 DDS CDR 格式
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

            // 根据字节序判断封装格式（大端或小端）
            // 如果使用大端字节序，使用 CDR_BE；否则使用 CDR_LE
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

            // 序列化封装部分
            ser.serialize_encapsulation();

            try
            {
                // 序列化 Quaternion 对象
                // 调用 Quaternion 类的 serialize 方法，将数据序列化到 Cdr 对象中
                p_type->serialize(ser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                // 如果在序列化过程中内存不足，捕获异常并返回 false
                return false;
            }

            // 获取序列化后的数据长度，并将其赋值给 payload->length
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());

            // 序列化成功，返回 true
            return true;
        }

        bool QuaternionPubSubType::deserialize(
                SerializedPayload_t* payload,
                void* data)
        {
            try
            {
                //Convert DATA to pointer of your type
                Quaternion* p_type = static_cast<Quaternion*>(data);

                // Object that manages the raw buffer.
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

                // Object that deserializes the data.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                // Deserialize the object.
                p_type->deserialize(deser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            return true;
        }

        std::function<uint32_t()> QuaternionPubSubType::getSerializedSizeProvider(
                void* data)
        {
            return [data]() -> uint32_t
                   {
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Quaternion*>(data))) +
                              4u /*encapsulation*/;
                   };
        }

        void* QuaternionPubSubType::createData()
        {
            return reinterpret_cast<void*>(new Quaternion());
        }

        void QuaternionPubSubType::deleteData(
                void* data)
        {
            delete(reinterpret_cast<Quaternion*>(data));
        }

        bool QuaternionPubSubType::getKey(
                void* data,
                InstanceHandle_t* handle,
                bool force_md5)
        {
            // 检查是否已定义获取键的方式，如果未定义，直接返回 false
            if (!m_isGetKeyDefined)
            {
                return false;
            }

            // 将 void* 类型的 data 转换为 Quaternion* 类型的指针
            Quaternion* p_type = static_cast<Quaternion*>(data);

            // 创建 FastBuffer 对象来管理原始数据缓冲区
            // 使用 m_keyBuffer 存储序列化后的键数据，大小由 getKeyMaxCdrSerializedSize() 确定
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
                    Quaternion::getKeyMaxCdrSerializedSize());

            // 创建 Cdr 对象用于序列化数据
            // 使用 BIG_ENDIANNESS 来指定字节序（大端序）
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);

            // 序列化键数据
            p_type->serializeKey(ser);

            // 如果强制使用 MD5 或者键的最大 CDR 序列化大小大于 16 字节
            if (force_md5 || Quaternion::getKeyMaxCdrSerializedSize() > 16)
            {
                // 初始化 MD5 对象
                m_md5.init();
                // 更新 MD5 摘要，使用键数据进行计算
                m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                // 完成 MD5 计算
                m_md5.finalize();
                // 将 MD5 的前 16 个字节存入 handle->value
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_md5.digest[i];
                }
            }
            else
            {
                // 如果不强制使用 MD5，且键的序列化大小小于等于 16 字节
                // 直接将键数据存入 handle->value
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_keyBuffer[i];
                }
            }

            // 返回 true，表示获取键成功
            return true;
        }

    } //End of namespace msg
} //End of namespace geometry_msgs
