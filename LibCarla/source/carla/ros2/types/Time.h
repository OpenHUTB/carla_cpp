// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Time.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_BUILTIN_INTERFACES_MSG_TIME_H_
#define _FAST_DDS_GENERATED_BUILTIN_INTERFACES_MSG_TIME_H_

// 包含用于处理固定大小字符串的头文件
#include <fastrtps/utils/fixed_size_string.hpp>

// 包含C/C++标准整数类型头文件
#include <stdint.h>
// 包含数组头文件
#include <array>
// 包含字符串头文件
#include <string>
// 包含向量头文件
#include <vector>
// 包含映射头文件
#include <map>
// 包含位集头文件
#include <bitset>

// 如果定义了_WIN32平台
#if defined(_WIN32)
    // 如果定义了EPROSIMA_USER_DLL_EXPORT
    #if defined(EPROSIMA_USER_DLL_EXPORT)
        // 定义eProsima_user_DllExport为导出函数或类的声明修饰符
        #define eProsima_user_DllExport __declspec( dllexport )
    #else
        // 否则定义为空，可能用于导入函数或类
        #define eProsima_user_DllExport
    #endif  // EPROSIMA_USER_DLL_EXPORT
#else
    // 如果不是_WIN32平台，也定义为空
    #define eProsima_user_DllExport
#endif  // _WIN32

// 如果定义了_WIN32平台
#if defined(_WIN32)
    // 如果定义了EPROSIMA_USER_DLL_EXPORT
    #if defined(EPROSIMA_USER_DLL_EXPORT)
        // 如果定义了Time_SOURCE
        #if defined(Time_SOURCE)
            // 定义Time_DllAPI为导出函数或类的声明修饰符
            #define Time_DllAPI __declspec( dllexport )
        #else
            // 否则定义为导入函数或类的声明修饰符
            #define Time_DllAPI __declspec( dllimport )
        #endif // Time_SOURCE
    #else
        // 如果没有定义EPROSIMA_USER_DLL_EXPORT，定义为空
        #define Time_DllAPI
    #endif  // EPROSIMA_USER_DLL_EXPORT
#else
    // 如果不是_WIN32平台，定义为空
    #define Time_DllAPI
#endif // _WIN32

// 定义eprosima命名空间
namespace eprosima {
    // 定义fastcdr命名空间
    namespace fastcdr {
        // 前向声明Cdr类，可能用于序列化和反序列化操作
        class Cdr;
    } // namespace fastcdr
} // namespace eprosima

// 定义builtin_interfaces命名空间
namespace builtin_interfaces {
    // 定义msg命名空间
    namespace msg {
        /*!
         * @brief 此类表示用户在IDL文件中定义的Time结构。
         * @ingroup TIME
         */
        class Time
        {
        public:
            /*!
             * @brief 默认构造函数。
             */
            eProsima_user_DllExport Time();

            /*!
             * @brief 默认析构函数。
             */
            eProsima_user_DllExport ~Time();

            /*!
             * @brief 拷贝构造函数。
             * @param x 将要被拷贝的builtin_interfaces::msg::Time对象的引用。
             */
            eProsima_user_DllExport Time(
                    const Time& x);

            /*!
             * @brief 移动构造函数。
             * @param x 将要被移动的builtin_interfaces::msg::Time对象的引用。
             */
            eProsima_user_DllExport Time(
                    Time&& x) noexcept;

            /*!
             * @brief 拷贝赋值运算符。
             * @param x 将要被拷贝的builtin_interfaces::msg::Time对象的引用。
             */
            eProsima_user_DllExport Time& operator =(
                    const Time& x);

            /*!
             * @brief 移动赋值运算符。
             * @param x 将要被移动的builtin_interfaces::msg::Time对象的引用。
             */
            eProsima_user_DllExport Time& operator =(
                    Time&& x) noexcept;

            /*!
             * @brief 相等比较运算符。
             * @param x 要比较的builtin_interfaces::msg::Time对象。
             */
            eProsima_user_DllExport bool operator ==(
                    const Time& x) const;

            /*!
             * @brief 不相等比较运算符。
             * @param x 要比较的builtin_interfaces::msg::Time对象。
             */
            eProsima_user_DllExport bool operator!=(
                    const Time& x) const;

            /*!
             * @brief 此函数设置成员sec的值。
             * @param _sec 成员sec的新值。
             */
            eProsima_user_DllExport void sec(
                    int32_t _sec);

            /*!
             * @brief 此函数返回成员sec的值。
             * @return 成员sec的值。
             */
            eProsima_user_DllExport int32_t sec() const;

            /*!
             * @brief 此函数返回成员sec的引用。
             * @return 成员sec的引用。
             */
            eProsima_user_DllExport int32_t& sec();

            /*!
             * @brief 此函数设置成员nanosec的值。
             * @param _nanosec 成员nanosec的新值。
             */
            eProsima_user_DllExport void nanosec(
                    uint32_t _nanosec);

            /*!
             * @brief 此函数返回成员nanosec的值。
             * @return 成员nanosec的值。
             */
            eProsima_user_DllExport uint32_t nanosec() const;

            /*!
             * @brief 此函数返回成员nanosec的引用。
             * @return 成员nanosec的引用。
             */
            eProsima_user_DllExport uint32_t& nanosec();

            /*!
            * @brief 此函数根据缓冲区对齐方式返回对象的最大序列化大小。
            * @param current_alignment 缓冲区对齐方式。
            * @return 最大序列化大小。
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief 此函数根据缓冲区对齐方式返回数据的序列化大小。
             * @param data 要计算其序列化大小的数据。
             * @param current_alignment 缓冲区对齐方式。
             * @return 序列化大小。
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const builtin_interfaces::msg::Time& data,
                    size_t current_alignment = 0);

            /*!
             * @brief 此函数使用CDR序列化方式序列化对象。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief 此函数使用CDR序列化方式反序列化对象。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);

            /*!
             * @brief 此函数根据缓冲区对齐方式返回对象键的最大序列化大小。
             * @param current_alignment 缓冲区对齐方式。
             * @return 最大序列化大小。
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief 此函数告知是否为此类型定义了键。
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief 此函数使用CDR序列化方式序列化对象的键成员。
             * @param cdr CDR序列化对象。
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:
            // 秒数成员变量
            int32_t m_sec;
            // 纳秒数成员变量
            uint32_t m_nanosec;
        };
    } // namespace msg
} // namespace builtin_interfaces

#endif // _FAST_DDS_GENERATED_BUILTIN_INTERFACES_MSG_TIME_H_
