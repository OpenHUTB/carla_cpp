// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file NavSatStatusPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "NavSatStatusPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

namespace sensor_msgs {
    namespace msg {
        NavSatStatusPubSubType::NavSatStatusPubSubType()
        {
            // 设置消息类型的名称为 "sensor_msgs::msg::dds_::NavSatStatus_"。
            // 这个名称用于在 DDS 系统中标识该消息类型。
            setName("sensor_msgs::msg::dds_::NavSatStatus_");

            // 获取 NavSatStatus 类型的最大 CDR 序列化大小。
            // CDR（Common Data Representation）是用于序列化和反序列化数据的标准格式。
            auto type_size = NavSatStatus::getMaxCdrSerializedSize();

            // 计算可能的子消息对齐（alignment）。这里是将数据类型大小对齐到 4 字节的边界。
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4);  // 可能的子消息对齐

            // 设置消息类型的总大小（包括封装）。
            // 这里的封装是指 CDR 消息的额外头部信息，通常包括对齐和类型大小等元数据。
            m_typeSize = static_cast<uint32_t>(type_size) + 4;  // 封装（包括消息头部）

            // 设置是否定义了该类型的键（Key）。在某些情况下，消息类型可能会使用键来唯一标识消息。
            m_isGetKeyDefined = NavSatStatus::isKeyDefined();

            // 获取该消息类型的最大键 CDR 序列化大小。如果键大小大于 16 字节，使用键的最大序列化大小，否则使用 16 字节。
            size_t keyLength = NavSatStatus::getKeyMaxCdrSerializedSize() > 16 ?
                    NavSatStatus::getKeyMaxCdrSerializedSize() : 16;

            // 为键分配内存。m_keyBuffer 用于存储消息的键数据。
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));

            // 将分配的内存初始化为零。这样可以确保键值在使用前不含有任何随机数据。
            memset(m_keyBuffer, 0, keyLength);
        }


        NavSatStatusPubSubType::~NavSatStatusPubSubType()
        {
            if (m_keyBuffer != nullptr)
            {
                free(m_keyBuffer);
            }
        }

        bool NavSatStatusPubSubType::serialize(
                void* data,
                SerializedPayload_t* payload)
        {
            NavSatStatus* p_type = static_cast<NavSatStatus*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
            // Serialize encapsulation
            ser.serialize_encapsulation();

            try
            {
                // Serialize the object.
                p_type->serialize(ser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            // Get the serialized length
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
            return true;
        }

        bool NavSatStatusPubSubType::deserialize(
                SerializedPayload_t* payload,
                void* data)
        {
            try
            {
                //Convert DATA to pointer of your type
                NavSatStatus* p_type = static_cast<NavSatStatus*>(data);

                // Object that manages the raw buffer.
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

                // Object that deserializes the data.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                // Deserialize the object.
                p_type->deserialize(deser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            return true;
        }

        std::function<uint32_t()> NavSatStatusPubSubType::getSerializedSizeProvider(
                void* data)
        {
            return [data]() -> uint32_t
                   {
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<NavSatStatus*>(data))) +
                              4u /*encapsulation*/;
                   };
        }

        void* NavSatStatusPubSubType::createData()
        {
            return reinterpret_cast<void*>(new NavSatStatus());
        }

        void NavSatStatusPubSubType::deleteData(
                void* data)
        {
            delete(reinterpret_cast<NavSatStatus*>(data));
        }

        bool NavSatStatusPubSubType::getKey(
                void* data,
                InstanceHandle_t* handle,
                bool force_md5)
        {
            if (!m_isGetKeyDefined)
            {
                return false;
            }

            NavSatStatus* p_type = static_cast<NavSatStatus*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
                    NavSatStatus::getKeyMaxCdrSerializedSize());

            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
            p_type->serializeKey(ser);
            if (force_md5 || NavSatStatus::getKeyMaxCdrSerializedSize() > 16)
            {
                m_md5.init();
                m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                m_md5.finalize();
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_md5.digest[i];
                }
            }
            else
            {
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_keyBuffer[i];
                }
            }
            return true;
        }
    } //End of namespace msg
} //End of namespace sensor_msgs
