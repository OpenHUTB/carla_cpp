// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PointFieldPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "PointFieldPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

namespace sensor_msgs {
    namespace msg {
        PointFieldPubSubType::PointFieldPubSubType()
        {
            // 设置类型名称，这里是 "sensor_msgs::msg::dds_::PointField_"
            // 该名称通常用于数据交换中的类型识别
            setName("sensor_msgs::msg::dds_::PointField_");

            // 获取 PointField 类型的最大序列化大小（以字节为单位）
            auto type_size = PointField::getMaxCdrSerializedSize();

            // 考虑到可能的子消息对齐，计算对齐大小（以4字节对齐）
            // 并将其加到原有的类型大小中
            type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4);

            // 设置类型的总大小，包括封装头（4字节）
            m_typeSize = static_cast<uint32_t>(type_size) + 4; /*封装头*/

            // 判断该类型是否定义了Key（通常是主键）
            m_isGetKeyDefined = PointField::isKeyDefined();

            // 获取最大键序列化大小，保证键长度至少为16字节（如没有键则使用默认长度）
            size_t keyLength = PointField::getKeyMaxCdrSerializedSize() > 16 ?
                    PointField::getKeyMaxCdrSerializedSize() : 16;

            // 为键分配内存，并将其初始化为0
            m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
            memset(m_keyBuffer, 0, keyLength);
        }

        PointFieldPubSubType::~PointFieldPubSubType()
        {
            if (m_keyBuffer != nullptr)
            {
                free(m_keyBuffer);
            }
        }

        bool PointFieldPubSubType::serialize(
                void* data,
                SerializedPayload_t* payload)
        {
            PointField* p_type = static_cast<PointField*>(data);

            // Object that manages the raw buffer.
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size);
            // Object that serializes the data.
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
            payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
            // Serialize encapsulation
            ser.serialize_encapsulation();

            try
            {
                // Serialize the object.
                p_type->serialize(ser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            // Get the serialized length
            payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
            return true;
        }

        bool PointFieldPubSubType::deserialize(
                SerializedPayload_t* payload,
                void* data)
        {
            try
            {
                //Convert DATA to pointer of your type
                PointField* p_type = static_cast<PointField*>(data);

                // Object that manages the raw buffer.
                eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length);

                // Object that deserializes the data.
                eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

                // Deserialize encapsulation.
                deser.read_encapsulation();
                payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                // Deserialize the object.
                p_type->deserialize(deser);
            }
            catch (eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
            {
                return false;
            }

            return true;
        }

        std::function<uint32_t()> PointFieldPubSubType::getSerializedSizeProvider(
                void* data)
        {
            return [data]() -> uint32_t
                   {
                       return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<PointField*>(data))) +
                              4u /*encapsulation*/;
                   };
        }

        void* PointFieldPubSubType::createData()
        {
            return reinterpret_cast<void*>(new PointField());
        }

        void PointFieldPubSubType::deleteData(
                void* data)
        {
            delete(reinterpret_cast<PointField*>(data));
        }

        bool PointFieldPubSubType::getKey(
                 void* data,
                 InstanceHandle_t* handle,
                 bool force_md5)
        {
            // 如果没有定义获取键的功能，则直接返回 false
            if (!m_isGetKeyDefined)
            {
                return false;
            }

            // 将传入的 data 指针转换为 PointField 类型指针
            PointField* p_type = static_cast<PointField*>(data);

            // 创建一个用于管理原始缓冲区的 eprosima::fastcdr::FastBuffer 对象
            eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),
                            PointField::getKeyMaxCdrSerializedSize());

            // 创建一个用于序列化数据的 eprosima::fastcdr::Cdr 对象
            eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);

            // 序列化 PointField 对象的键值
            p_type->serializeKey(ser);

            // 如果强制使用 MD5 或者键的最大序列化大小大于 16 字节
            if (force_md5 || PointField::getKeyMaxCdrSerializedSize() > 16)
            {
                // 初始化 MD5 对象
                m_md5.init();

                // 更新 MD5 哈希值，使用序列化后的数据进行更新
                m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));

                // 计算最终的 MD5 哈希值
                m_md5.finalize();

                // 将 MD5 的前 16 字节结果存储到 handle->value 中
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_md5.digest[i];
                }
            }
            else
            {
                // 如果不需要 MD5，则直接将前 16 字节的键值存储到 handle->value 中
                for (uint8_t i = 0; i < 16; ++i)
                {
                    handle->value[i] = m_keyBuffer[i];
                }
            }
            // 返回成功，表示已经获取并设置了键值
            return true;
        }

    } //End of namespace msg
} //End of namespace sensor_msgs
