// Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.
// 预处理指令，确保头文件只被包含一次，避免重复定义问题
#pragma once
// 包含CARLA相关的内存管理头文件，可能包含了如智能指针等内存相关的工具类或函数等定义，方便在代码中进行内存管理操作
#include "carla/Memory.h" // 包含传感器原始数据相关的头文件，用于表示传感器获取到的最基础、未经处理的数据结构等定义，是后续处理传感器数据序列化等操作的基础数据类型
#include "carla/sensor/RawData.h" // 包含雷达数据相关的头文件，其中定义了雷达数据特有的数据结构、成员等信息，例如雷达探测到的目标信息等内容，用于处理雷达数据的序列化和反序列化操作
#include "carla/sensor/data/RadarData.h"
// 引入C++标准库中用于处理基本整数类型相关的头文件，虽然这里没有明显看到使用，但可能在后续涉及到整数类型相关的底层操作时会用到
#include <cstdint> // 引入C++标准库中用于处理字符串操作的头文件，主要用于内存拷贝等相关函数（如memcpy等），这里可能用于处理数据的复制等操作
#include <cstring>
// 定义在carla命名空间下的sensor命名空间中，这是一个组织代码逻辑、避免命名冲突的作用域，将传感器相关的代码放在这个命名空间下统一管理
namespace carla {
namespace sensor {// 前置声明SensorData类，告诉编译器有这个类存在，但具体定义在其他地方提供，方便后续代码中可以使用该类的指针等进行相关操作，例如返回指向该类型对象的智能指针等情况

  class SensorData;

namespace s11n {

  // ===========================================================================
  // -- RadarSerializer --------------------------------------------------------
  // ===========================================================================// 以下是对这个部分的注释，这是一个用于序列化雷达传感器数据的类定义，整体用于处理雷达数据在网络传输或存储等场景下的序列化和反序列化工作

  /// Serializes the data generated by Radar sensors.
  class RadarSerializer {
  public:
// 模板函数，用于将雷达传感器数据（data::RadarData类型）按照特定传感器（Sensor类型）的要求进行序列化
    // 参数sensor表示具体的传感器对象，measurement表示要序列化的雷达数据，output表示输出的缓冲区（Buffer类型）
    // 返回序列化后的缓冲区，这里使用了右值引用（Buffer &&output）来避免不必要的拷贝，提高效率，使得数据可以高效地移动到目标缓冲区中
    template <typename Sensor>
    static Buffer Serialize(
        const Sensor &sensor,
        const data::RadarData &measurement,
        Buffer &&output);
// 静态函数，用于从给定的原始数据（RawData类型，这里使用右值引用，可能涉及到数据所有权转移等优化）中反序列化出传感器数据（SensorData类型）
    // 返回一个智能指针（SharedPtr<SensorData>）指向反序列化后的传感器数据对象，方便内存管理和对象生命周期控制，确保数据在合适的时候被正确释放
    static SharedPtr<SensorData> Deserialize(RawData &&data);
  };// 以下是模板函数Serialize的具体实现部分，它针对具体的传感器类型（由模板参数Sensor确定）将雷达数据序列化到给定的输出缓冲区中

  template <typename Sensor>
  inline Buffer RadarSerializer::Serialize( // 这里虽然接收了Sensor类型的参数，但在当前实现中并没有实际使用它，可能在更复杂的扩展场景下会基于具体传感器类型进行不同的序列化处理
      const Sensor &,
      const data::RadarData &measurement,
      Buffer &&output) { // 使用output缓冲区的copy_from方法，将雷达数据中的探测结果数据（measurement._detections）复制到output缓冲区中，完成序列化操作
    // 这里假设measurement._detections是一个可以直接复制的数据结构，比如数组或者符合特定复制要求的自定义类型等
    output.copy_from(measurement._detections); // 返回移动后的output缓冲区，这里移动语义可以避免深拷贝，提高性能，将序列化后的数据所在的缓冲区返回，以便后续使用，例如发送到网络或者存储到文件等操作
    return std::move(output);
  }

} // namespace s11n
} // namespace sensor
} // namespace carla
