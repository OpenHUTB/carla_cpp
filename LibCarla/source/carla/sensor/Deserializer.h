// Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma
// de Barcelona (UAB).
//
// This work is licensed under the terms of the MIT license.
// For a copy, see <https://opensource.org/licenses/MIT>.

#pragma once
// 这是一个编译预处理指令，作用是保证该头文件在一个编译单元中只会被包含（引入）一次，避免重复定义等问题。

#include "carla/Buffer.h"  // 包含 "carla/Buffer.h" 头文件，推测这里的 Buffer 类可能用于处理数据缓冲区相关操作，比如存储传感器等产生的数据。

#include "carla/Memory.h"
// 包含 "carla/Memory.h" 头文件，通常这个头文件会涉及内存管理相关的功能，比如智能指针等类型的定义，可能会在后续代码中用于管理对象的生命周期等情况。

namespace carla {  // 开始定义名为 carla 的命名空间，用于对相关的类型、函数等进行逻辑分组，避免命名冲突，将代码组织在一个独立的作用域内。

namespace sensor {

  class SensorData;
 // 前置声明一个名为 SensorData 的类，告诉编译器存在这样一个类，但具体的定义在后续或者其他地方，这样可以在当前代码中使用该类的指针或者引用等，解决编译顺序导致的找不到类型定义的问题。

  /// Deserializes a Buffer containing data generated by a sensor and creates
  /// the appropriate SensorData class that contains the sensor's measurement.
  ///
  /// This class encapsulates the SensorRegistry to avoid including all the
  /// serializers and SensorData classes.
  class Deserializer {  

  public:   // 以下是类的公有部分声明，公有成员可以在类的外部被访问。


    static SharedPtr<SensorData> Deserialize(Buffer &&buffer);
  };

} // namespace sensor
} // namespace carla
