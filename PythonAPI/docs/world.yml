---
- module_name: carla

  # - CLASSES ------------------------------
  classes:
  - class_name: Timestamp
    # - DESCRIPTION ------------------------
    # 以下是对 `Timestamp` 类的文档描述（doc），用于说明该类的总体用途和应用场景等信息。
    doc: >
      Class that contains time information for simulated data. This information is automatically retrieved as part of the carla.WorldSnapshot the client gets on every frame, but might also be used in many other situations such as a carla.Sensor retrieveing data. 
    # - PROPERTIES -------------------------
    # 以下定义的是 `Timestamp` 类的实例变量部分，用于描述该类的对象所具有的属性特征。
    instance_variables:
    - var_name: frame
      # 变量 `frame` 的类型被定义为整数（int），用于表示特定含义。
      type: int
      # 以下是对 `frame` 变量的文档描述，说明它的具体作用。
      doc: >
        The number of frames elapsed since the simulator was launched.
    - var_name: elapsed_seconds
      type: float
      var_units: seconds
      doc: >
        Simulated seconds elapsed since the beginning of the current episode.
    - var_name: delta_seconds
      type: float
      var_units: seconds
      doc: >
        Simulated seconds elapsed since the previous frame.
    - var_name: platform_timestamp
      type: float
      var_units: seconds
      doc: >
        Time register of the frame at which this measurement was taken given by the OS in seconds. 
    # 整体来看，这个 `Timestamp` 类旨在为模拟数据提供时间相关的信息记录。通过定义这几个实例变量，
    # 可以分别从不同角度来刻画时间情况，比如 `frame` 记录自模拟器启动以来经过的帧数，`elapsed_seconds` 记录当前阶段开始后经过的模拟秒数，
    # `delta_seconds` 体现与前一帧间隔的模拟秒数，`platform_timestamp` 则借助操作系统给出的时间来记录测量该帧时的时间戳（以秒为单位）。
    # 这样在涉及模拟数据处理以及相关时间追踪的场景（如从 `carla.WorldSnapshot` 获取信息或者传感器获取数据等情况）中，就能方便地使用这些时间属性了。
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: frame
        type: int
      - param_name: elapsed_seconds
        type: float
        param_units: seconds
      - param_name: delta_seconds
        type: float
        param_units: seconds
      - param_name: platform_timestamp
        type: float
        param_units: seconds
    # --------------------------------------
    - def_name: __eq__
      # `__eq__` 方法是 Python 中的一个特殊方法（也常被称作魔法方法），它用于定义对象之间相等性的比较逻辑。
      # 当使用 `==` 运算符来比较两个同类型的对象时，Python 会自动调用对应类中定义的 `__eq__` 方法来判断它们是否相等。
      # 在当前这个情境下，它属于 `carla.Timestamp` 类相关的方法定义，意味着当我们要比较两个 `carla.Timestamp` 类的实例对象是否相等时，就会执行这里定义的逻辑。
      params:
      - param_name: other
        type: carla.Timestamp
        param_units: seconds
        # `other` 参数是 `__eq__` 方法的唯一参数，其类型被指定为 `carla.Timestamp`，这表明它用于接收另一个要与之进行比较的 `carla.Timestamp` 类的实例对象。
        # 单位标记为 `seconds`，从 `carla.Timestamp` 类整体围绕时间信息的特性来看，这里虽不一定意味着比较操作只单纯基于时间单位维度进行，
        # 但可以推测在实际的比较逻辑中大概率会涉及该类实例对象所包含的诸如帧时间、累计时间、时间间隔等各类以秒为单位计量的时间相关属性，
        # 通过比较这些属性的值来确定当前实例对象与传入的 `other` 实例对象是否相等，以此实现自定义的相等性判断规则，满足 `carla.Timestamp` 类在具体应用场景中对于对象相等与否判断的特定需求。
    # --------------------------------------
    - def_name: __ne__
      # `__ne__` 方法是Python中的一个特殊方法（魔法方法），其主要作用是定义对象之间不相等性的比较逻辑。
      # 当使用 `!=` 运算符来比较两个同类型的对象时，Python 会自动调用对应类中定义的 `__ne__` 方法，以此判断它们是否不相等。
      # 在当前的代码情境下，它是针对 `carla.Timestamp` 类进行定义的，也就意味着当要判断两个 `carla.Timestamp` 类的实例对象是否不相等时，就会执行此处定义的具体逻辑。
      params:
      - param_name: other
        type: carla.Timestamp
        param_units: seconds
        # `other` 参数是 `__ne__` 方法的唯一参数，其类型被明确指定为 `carla.Timestamp`。
        # 这表明它的用途是接收另一个 `carla.Timestamp` 类的实例对象，用于和当前的对象进行不相等性比较操作。
        # 单位标记为 `seconds`，结合 `carla.Timestamp` 类主要是用于承载时间信息这一特点来看，
        # 虽然并不一定意味着比较过程仅仅围绕时间单位维度展开，但大概率会在实际的比较逻辑中涉及该类实例对象所包含的各类和时间相关、以秒为单位计量的属性，
        # 通过比较这些属性的值来确定当前实例对象与传入的 `other` 实例对象是否不相等，从而实现符合 `carla.Timestamp` 类特定需求的自定义的不相等性判断规则，
        # 方便在程序中准确地区分不同的 `carla.Timestamp` 类实例是否存在差异。
    # --------------------------------------
    - def_name: __str__
    # --------------------------------------

  - class_name: ActorList
    # - DESCRIPTION ------------------------
    doc: >
      A class that contains every actor present on the scene and provides access to them. The list is automatically created and updated by the server and it can be returned using carla.World. 
    # - METHODS ----------------------------
   methods:
    - def_name: filter
      # `filter` 方法通常用于根据特定的规则对一组数据进行筛选，在这里它属于某个类（具体需结合更完整的代码上下文判断所属类）中定义的方法，
      # 其主要功能大概率是针对特定集合里的元素进行筛选操作，以获取满足特定条件的子集元素集合。
      return: list
      # 此方法明确返回值类型为列表（list），意味着经过该方法内部执行的筛选逻辑后，最终会返回一个列表形式的数据结构。
      # 这个列表中包含的元素应该是经过筛选后符合相应条件的那些元素，具体是什么元素需要依据整个代码的业务逻辑以及筛选的对象范围来确定，
      # 从当前提供的参数等信息推测，大概率是与后续要匹配的 `Actors` 相关的元素集合（但这需要结合更多上下文进一步确认）。
      params:
      - param_name: wildcard_pattern
        type: str
        # `wildcard_pattern` 参数的类型被设定为字符串（str），它在 `filter` 方法中起着关键的筛选条件设定作用。
        # 这个字符串作为一种通配符模式，会被用于和特定的目标属性（从后续文档字符串描述来看，是与 `Actors` 的 `__type_id__` 属性进行匹配）进行比对，
        # 通过这个比对过程来判断哪些元素符合筛选要求，从而决定最终返回列表中的元素构成情况。
      doc: >
        # 以下文档字符串（docstring）用于详细描述 `filter` 方法的具体功能和筛选操作的细节逻辑等重要信息。
        # 它说明了该方法会对一个 `Actors` 的列表进行筛选操作，筛选时会将传入的 `wildcard_pattern`（也就是前面提到的作为通配符模式的字符串），
        # 与每个 `Actor` 的 `__type_id__` 变量进行匹配比较。这里的 `__type_id__` 变量有着重要意义，它用于标识创建该 `Actor` 时所采用的蓝图，
        # 通过这个标识可以区分不同类型的 `Actor`，不同的蓝图意味着产生的 `Actor` 在功能、属性等方面可能存在差异，所以利用 `__type_id__` 来筛选可以精准地获取特定类型的 `Actor` 集合。
        # 并且，这种匹配操作遵循的是 [fnmatch](https://docs.python.org/2/library/fnmatch.html) 模块所定义的标准，
        # 该标准定义了通配符在字符串匹配中的使用规则，例如通配符“*”可以代表任意长度的字符序列，“?”代表单个任意字符等，
        # 通过按照这样的规则去比对 `wildcard_pattern` 和 `__type_id__`，就能筛选出符合模式匹配要求的 `Actors`，并将它们整合到一个列表中返回，
        # 以此实现基于特定类型标识（借助 `__type_id__` 变量）按照给定的通配符模式（`wildcard_pattern`）来筛选 `Actors` 的功能，方便后续对筛选后的 `Actors` 集合进行进一步的操作和处理。
        Filters a list of Actors matching `wildcard_pattern` against their variable __<font color="#f8805a">type_id</font>__ (which identifies the blueprint used to spawn them). Matching follows [fnmatch](https://docs.python.org/2/library/fnmatch.html) standard.  
    # --------------------------------------
    - def_name: find
      return: carla.Actor
      params:
      - param_name: actor_id
        type: int
      doc: >
        Finds an actor using its identifier and returns it or <b>None</b> if it is not present. 
    # --------------------------------------
    - def_name: __getitem__
      return: carla.Actor
      params:
      - param_name: pos
        type: int
      doc: >
        Returns the actor corresponding to `pos` position in the list. 
    # --------------------------------------
    - def_name: __iter__
      doc: >
        Iterate over the carla.Actor contained in the list.  
    # --------------------------------------
    - def_name: __len__
      return: int
      doc: >
        Returns the amount of actors listed. 
    # --------------------------------------
    - def_name: __str__
      return: str
      doc: >
        Parses to the ID for every actor listed.  
    # --------------------------------------

  - class_name: WorldSettings
    # - DESCRIPTION ------------------------
    doc: >
      The simulation has some advanced configuration options that are contained in this class and can be managed using carla.World and its methods. These allow the user to choose between client-server synchrony/asynchrony, activation of "no rendering mode" and either if the simulation should run with a fixed or variable time-step. Check [this](adv_synchrony_timestep.md) out if you want to learn about it. 
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: synchronous_mode
      type: bool
      doc: >
        States the synchrony between client and server. When set to true, the server will wait for a client tick in order to move forward. It is false by default. 
    - var_name: no_rendering_mode
      type: bool
      doc: >
        When enabled, the simulation will run no rendering at all. This is mainly used to avoid overhead during heavy traffic simulations. It is false by default. 
    - var_name: fixed_delta_seconds
      type: float
      doc: >
        Ensures that the time elapsed between two steps of the simulation is fixed. Set this to <b>0.0</b> to work with a variable time-step, as happens by default.
    - var_name: substepping
      type: bool
      doc: >
        Enable the physics substepping. This option allows computing some physics substeps between two render frames. If synchronous mode is set, the number of substeps and its time interval are fixed and computed are so they fulfilled the requirements of carla.WorldSettings.max_substeps and carla.WorldSettings.max_substep_delta_time. These last two parameters need to be compatible with carla.WorldSettings.fixed_delta_seconds. Enabled by default.
    - var_name: max_substep_delta_time
      type: float
      doc: >
       Maximum delta time of the substeps. If the carla.WorldSettings.max_substeps is high enough, the substep delta time would be always below or equal to this value. By default, the value is set to 0.01.
    - var_name: max_substeps
      type: int
      doc: >
        The maximum number of physics substepping that are allowed. By default, the value is set to 10.
    - var_name: max_culling_distance
      type: float
      doc: >
        Configure the max draw distance for each mesh of the level.  
    - var_name: deterministic_ragdolls
      type: bool
      doc: >
        Defines wether to use deterministic physics for pedestrian death animations or physical ragdoll simulation. 
        When enabled, pedestrians have less realistic death animation but ensures determinism. 
        When disabled, pedestrians are simulated as ragdolls with more realistic simulation and collision but no determinsm can be ensured.
    - var_name: tile_stream_distance
      type: float
      doc: >
        Used for large maps only. Configures the maximum distance from the hero vehicle to stream tiled maps. Regions of the map within this range will be visible (and capable of simulating physics). Regions outside this region will not be loaded.
    - var_name: actor_active_distance
      type: float
      doc: >
        Used for large maps only. Configures the distance from the hero vehicle to convert actors to dormant. Actors within this range will be active, and actors outside will become dormant.
    - var_name: spectator_as_ego
      type: bool
      doc: >
        Used for large maps only. Defines the influence of the spectator on tile loading in Large Maps. By default, the spectator will provoke loading of neighboring tiles in the absence of an ego actor. This might be inconvenient for applications that immediately spawn an ego actor. 
    
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: synchronous_mode
        type: bool
        default: False
        doc: >
          Set this to true to enable client-server synchrony. 
      - param_name: no_rendering_mode
        type: bool
        default: False
        doc: >
          Set this to true to completely disable rendering in the simulation.
      - param_name: fixed_delta_seconds
        type: float
        default: 0.0
        param_units: seconds
        doc: >
          Set a fixed time-step in between frames. <code>0.0</code> means variable time-step and it is the default mode. 
      - param_name: max_culling_distance
        type: float
        default: 0.0
        param_units: meters
        doc: >
          Configure the max draw distance for each mesh of the level. 
      - param_name: deterministic_ragdolls
        type: bool
        default: False
        doc: >
          Defines wether to use deterministic physics or ragdoll simulation for pedestrian deaths.
      - param_name: tile_stream_distance
        type: float
        default: 3000
        param_units: meters
        doc: >
          Used for large maps only. Configures the maximum distance from the hero vehicle to stream tiled maps.
      - param_name: actor_active_distance
        type: float
        default: 2000
        param_units: meters
        doc: >
          Used for large maps only. Configures the distance from the hero vehicle to convert actors to dormant.
      - param_name: spectator_as_ego
        type: bool
        default: True
        doc: >
          Used for large maps only. Defines the influence of the spectator on tile loading in Large Maps. 
        
      doc: >
        Creates an object containing desired settings that could later be applied through carla.World and its method __<font color="#7fb800">apply_settings()</font>__.
    # --------------------------------------
    - def_name: __eq__
      return: bool
      params:
      - param_name: other
        type: carla.WorldSettings
        doc: > 
          Settings to be compared with. 
      doc: >
        Returns <b>True</b> if both objects' variables are the same. 
    # --------------------------------------
    - def_name: __ne__
      return: bool
      params:
      - param_name: other
        type: carla.WorldSettings
        doc: > 
          Settings to be compared with. 
      doc: >
        Returns <b>True</b> if both objects' variables are different. 
    # --------------------------------------
    - def_name: __str__
      return: str
      doc: > 
        Parses the established settings to a string and shows them in command line. 
    # --------------------------------------

  - class_name: EnvironmentObject
    # - DESCRIPTION ------------------------
    doc: >
      Class that represents a geometry in the level, this geometry could be part of an actor formed with other EnvironmentObjects (ie: buildings).  
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: transform
      type: carla.Transform
      doc: >
        Contains the location and orientation of the EnvironmentObject in world space. 
    - var_name: bounding_box
      type: carla.BoundingBox
      doc: >
        Object containing a location, rotation and the length of a box for every axis in world space. 
    - var_name: id
      type: int
      doc: >
        Unique ID to identify the object in the level. 
    - var_name: name
      type: string
      doc: >
        Name of the EnvironmentObject.
    - var_name: type
      type: carla.CityObjectLabel
      doc: >
        Semantic tag. 
    # - METHODS ----------------------------
    methods:
    - def_name: __str__
      return: str
      doc: > 
        Parses the EnvironmentObject to a string and shows them in command line. 
    # --------------------------------------

  - class_name: AttachmentType
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines attachment options between an actor and its parent. When spawning actors, these can be attached to another actor so their position changes accordingly. This is specially useful for sensors. The snipet in carla.World.spawn_actor shows some sensors being attached to a car when spawned. Note that the attachment type is declared as an enum within the class. 
      
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Rigid
      doc: >
        With this fixed attachment the object follow its parent position strictly. This is the recommended attachment to retrieve precise data from the simulation.  
    - var_name: SpringArm
      doc: >
        An attachment that expands or retracts the position of the actor, depending on its parent. This attachment is only recommended to record videos from the simulation where a smooth movement is needed. SpringArms are an Unreal Engine component so [check the UE docs](https://docs.unrealengine.com/en-US/Gameplay/HowTo/UsingCameras/SpringArmComponents/index.html) to learn more about them. <br><b style="color:red;">Warning:</b> The <b>SpringArm</b> attachment presents weird behaviors when an actor is spawned with a relative translation in the Z-axis (e.g. <code>child_location = Location(0,0,2)</code>).  
    - var_name: SpringArmGhost
      doc: >
        An attachment like the previous one but that does not make the collision test, and that means that it does not expands or retracts the position of the actor. The term **ghost** is because then the camera can cross walls and other geometries. This attachment is only recommended to record videos from the simulation where a smooth movement is needed. SpringArms are an Unreal Engine component so [check the UE docs](https://docs.unrealengine.com/en-US/Gameplay/HowTo/UsingCameras/SpringArmComponents/index.html) to learn more about them. <br><b style="color:red;">Warning:</b> The <b>SpringArm</b> attachment presents weird behaviors when an actor is spawned with a relative translation in the Z-axis (e.g. <code>child_location = Location(0,0,2)</code>).  
    # --------------------------------------

  - class_name: LabelledPoint
    # - DESCRIPTION ------------------------
    doc: >
      Class that represent a position in space with a semantic label.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: location
      doc: >
        Position in 3D space.
    - var_name: label
      doc: >
        Semantic tag of the point.
    # --------------------------------------
  
  - class_name: MapLayer
    # - DESCRIPTION ------------------------
    doc: >
      Class that represents each manageable layer of the map. Can be used as flags.
      __WARNING: Only "Opt" maps are able to work with map layers.__
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: NONE
      doc: >
        No layers selected
    - var_name: Buildings
    - var_name: Decals
    - var_name: Foliage
    - var_name: Ground
    - var_name: ParkedVehicles
    - var_name: Particles
    - var_name: Props
    - var_name: StreetLights
    - var_name: Walls
    - var_name: All
      doc: >
        All layers selected
    # --------------------------------------

  - class_name: MaterialParameter
    # - DESCRIPTION ------------------------
    doc: >
      Class that represents material parameters. Not all objects in the scene contain all parameters.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Normal
      doc: >
        The Normal map of the object. Present in all objects.
    - var_name: Diffuse
      doc: >
        The Diffuse texture of the object. Present in all objects.
    - var_name: AO_Roughness_Metallic_Emissive
      doc: >
        A texture where each color channel represent a property of the material (R: Ambien oclusion, G: Roughness, B: Metallic, A: Emissive/Height map in some objects)
    - var_name: Emissive
      doc: >
        Emissive texture. Present in a few objects.
    # --------------------------------------

  - class_name: TextureColor
    # - DESCRIPTION ------------------------
    doc: >
      Class representing a texture object to be uploaded to the server. Pixel format is RGBA, uint8 per channel.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: width
      type: int
      doc: >
        X-coordinate size of the texture.
    - var_name: height
      type: int
      doc: >
        Y-coordinate size of the texture.
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: width
        type: int
      - param_name: height
        type: int
      doc: >
        Initializes a the texture with a (`width`, `height`) size.
    - def_name: set_dimensions
      params:
      - param_name: width
        type: int
      - param_name: height
        type: int
      doc: >
        Resizes the texture to te specified dimensions.
    - def_name: get
      return: carla.Color
      params:
      - param_name: x
        type: int
      - param_name: y
        type: int
      doc: >
        Get the (x,y) pixel data.
    - def_name: set
      params:
      - param_name: x
        type: int
      - param_name: y
        type: int
      - param_name: value
        type: carla.Color
      doc: >
        Sets the (x,y) pixel data with `value`.
    # --------------------------------------

  - class_name: TextureFloatColor
    # - DESCRIPTION ------------------------
    doc: >
      Class representing a texture object to be uploaded to the server. Pixel format is RGBA, float per channel.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: width
      type: int
      doc: >
        X-coordinate size of the texture.
    - var_name: height
      type: int
      doc: >
        Y-coordinate size of the texture.
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: width
        type: int
      - param_name: height
        type: int
      doc: >
        Initializes a the texture with a (`width`, `height`) size.
    - def_name: set_dimensions
      params:
      - param_name: width
        type: int
      - param_name: height
        type: int
      doc: >
        Resizes the texture to te specified dimensions.
    - def_name: get
      return: carla.FloatColor
      params:
      - param_name: x
        type: int
      - param_name: y
        type: int
      doc: >
        Get the (x,y) pixel data.
    - def_name: set
      params:
      - param_name: x
        type: int
      - param_name: y
        type: int
      - param_name: value
        type: carla.FloatColor
      doc: >
        Sets the (x,y) pixel data with `value`.
    # --------------------------------------

  - class_name: World
    # - DESCRIPTION ------------------------
    doc: >
      World objects are created by the client to have a place for the simulation to happen. The world contains the map we can see, meaning the asset, not the navigation map. Navigation maps are part of the carla.Map class. It also manages the weather and actors present in it. There can only be one world per simulation, but it can be changed anytime. 
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: id
      type: int
      doc: >
        The ID of the episode associated with this world. Episodes are different sessions of a simulation. These change everytime a world is disabled or reloaded. Keeping track is useful to avoid possible issues.  
    - var_name: debug
      type: carla.DebugHelper
      doc: >
        Responsible for creating different shapes for debugging. Take a look at its class to learn more about it. 
    # - METHODS ----------------------------
    methods:    
    - def_name: apply_settings
      return: int
      params:
      - param_name: world_settings
        type: carla.WorldSettings
      doc: >
        This method applies settings contained in an object to the simulation running and returns the ID of the frame they were implemented. 
      warning: >
        If synchronous mode is enabled, and there is a Traffic Manager running, this must be set to sync mode too. Read [this](adv_traffic_manager.md#synchronous-mode) to learn how to do it. 
   # --------------------------------------
# `on_tick` 函数的定义说明部分
# `on_tick` 函数相关的文档信息，用于描述函数功能、返回值、参数以及使用场景等关键内容
- def_name: on_tick
  return: int
  params:
  - param_name: callback
    type: carla.WorldSnapshot
    doc: > 
      Function with a snapshot as compulsory parameter that will be called when the client receives a tick.  
  doc: >
    This method is used in [__asynchronous__ mode](https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/). 
    # 说明 `on_tick` 函数是在异步模式下使用的，通过提供的链接可以进一步查看关于异步同步相关的详细文档内容，了解更多背景知识。

    It starts callbacks from the client for the function defined as `callback`, and returns the ID of the callback.
    # 该函数的主要功能之一是从客户端启动针对名为 `callback` 的函数的回调机制，并且会返回一个回调的 ID。这个回调 ID 后续可用于管理该回调，例如停止这个回调等操作。

    The function will be called everytime the server ticks.
    # 作为回调函数的 `callback`，它会在服务器每次进行 “tick”（可以理解为服务器的一次更新或时间步推进）操作时被调用，意味着只要服务器状态更新，就会触发与之关联的 `callback` 函数执行相应逻辑。

    It requires a carla.WorldSnapshot as argument, which can be retrieved from __<font color="#7fb800">wait_for_tick()</font>__.
    # 强调 `callback` 函数必须接收一个 `carla.WorldSnapshot` 类型的参数，而这个参数可以通过调用 `wait_for_tick()` 函数来获取，这里通过特定颜色标记的函数名（`<font color="#7fb800">wait_for_tick()</font>`）突出显示，方便用户在代码中快速定位相关函数。

    Use __<font color="#7fb800">remove_on_tick()</font>__ to stop the callbacks.
    # 提示如果想要停止通过 `on_tick` 函数启动的这些回调操作，可以调用 `remove_on_tick()` 函数来实现，同样以特定颜色标记突出显示对应的函数名，便于查找使用。
# --------------------------------------
# `remove_on_tick` 函数的定义说明部分
# `remove_on_tick` 函数相关的文档信息，用于描述其功能、参数等关键内容
- def_name: remove_on_tick
  params:
  - param_name: callback_id
    type: callback
    doc: > 
      The callback to be removed. The ID is returned when creating the callback.  
  doc: >
    Stops the callback for `callback_id` started with __<font color="#7fb800">on_tick()</font>__.
    # 说明 `remove_on_tick` 函数的功能就是停止与传入的 `callback_id` 相关联的回调操作，这个 `callback_id` 对应的回调是之前通过 `on_tick()` 函数创建启动的，通过这种方式实现对已启动回调的管理，能够灵活控制在异步模式下的回调机制的开启与停止。
    # --------------------------------------
    # --------------------------------------
# `tick` 函数的定义说明部分
# 下面是关于 `tick` 函数详细的文档信息，涵盖了函数的返回值类型、参数情况以及其功能、使用场景和一些重要的备注说明等内容
- def_name: tick
  return: int
  params:
  - param_name: seconds
    type: float
    default: 10.0
    param_units: seconds
    doc: > 
      Maximum time the server should wait for a tick. It is set to <code>10.0</code> by default.   
  doc: >
    This method is used in [__synchronous__ mode](https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/),
    # 首先明确指出 `tick` 函数是用于同步模式下的操作，通过给出的链接（https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/），使用者可以进一步查阅关于同步模式更详细的文档资料，了解其背后的原理和更多相关细节。

    when the server waits for a client tick before computing the next frame.
    # 解释了在同步模式下的运行机制，即服务器在计算下一帧之前，会等待客户端发送一个 “tick”（可以理解为一个时间步的推进信号或者更新信号），这里说明了 `tick` 函数在这个过程中所起的作用，也就是由客户端来触发服务器进行下一步的帧计算操作。

    This method will send the tick, and give way to the server.
    # 具体说明 `tick` 函数的功能，它会向服务器发送这个 “tick” 信号，然后将控制权交给服务器，使得服务器能够基于这个信号去进行后续的帧计算以及相关的模拟世界状态更新等操作。

    It returns the ID of the new frame computed by the server.
    # 介绍了函数的返回值情况，`tick` 函数会返回服务器计算出的新帧的 ID，这个 ID 可以用于后续在同步模式下对帧相关操作的标识或者管理等用途，例如可能用于判断帧的顺序、关联特定的数据等。

  note: > 
    If no tick is received in synchronous mode, the simulation will freeze.
    # 这里给出了一个重要的注意事项，在同步模式下，如果服务器没有接收到客户端发送的 “tick” 信号，那么整个模拟过程将会冻结，也就是模拟会停止运行，不再继续推进，强调了客户端发送 “tick” 信号对于同步模式下模拟正常运行的重要性。

    Also, if many ticks are received from different clients, there may be synchronization issues.
    # 另外一个需要注意的点是，如果有多个客户端向服务器发送了很多的 “tick” 信号，那么可能会出现同步方面的问题，因为服务器需要依据合理的规则来处理这些来自不同源头的更新信号，过多或不合理的信号可能会扰乱同步机制，影响模拟的准确性和稳定性。

    Please read the docs about [synchronous mode](https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/) to learn more.
    # 再次提醒使用者可以去阅读关于同步模式的详细文档（https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/）来进一步深入了解这些情况以及如何更好地在同步模式下使用相关功能，避免出现上述提到的问题。
# --------------------------------------
# `wait_for_tick` 函数的定义说明部分
# 以下是 `wait_for_tick` 函数的详细文档信息，包括返回值、参数含义以及其在异步模式下的功能描述等内容
- def_name: wait_for_tick
  return: carla.WorldSnapshot
  params:
  - param_name: seconds
    type: float
    default: 10.0
    param_units: seconds
    doc: > 
      Maximum time the server should wait for a tick. It is set to <code>10.0</code> by default.   
  doc: >
    This method is used in [__asynchronous__ mode](https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/).
    # 表明 `wait_for_tick` 函数是应用在异步模式下的，同样通过提供的链接（https://carla.readthedocs.io/en/latest/adv_synchrony_timestep/）方便使用者进一步了解异步模式的详细内容和相关背景知识。

    It makes the client wait for a server tick.
    # 阐述了该函数的核心功能，就是让客户端去等待服务器的一个 “tick”（服务器的一次更新操作），在异步模式下，客户端不像在同步模式那样主动去触发服务器更新，而是等待服务器自身进行更新后再做相应操作。

    When the next frame is computed, the server will tick and return a snapshot describing the new state of the world.
    # 进一步说明当服务器完成下一帧的计算后，会进行 “tick” 操作并且返回一个 `carla.WorldSnapshot` 类型的对象，这个对象描述了模拟世界经过这次更新后的新状态，而这个返回值正是 `wait_for_tick` 函数向外提供的，客户端可以基于这个返回的世界状态快照来进行后续的各种操作，比如获取世界中的实体信息、进行相关逻辑判断等。
    # --------------------------------------
    # --------------------------------------
# `spawn_actor` 函数的定义说明部分
# 下面是关于 `spawn_actor` 函数详细的文档信息，涵盖了函数的返回值类型、参数情况以及其整体功能描述等内容
- def_name: spawn_actor
  return: carla.Actor
  params:
  - param_name: blueprint
    type: carla.ActorBlueprint
    doc: >
      The reference from which the actor will be created. 
  # 对于 `blueprint` 参数的说明：
  # 它是 `carla.ActorBlueprint` 类型，代表了创建角色（actor）的一个参考蓝本，也就是创建一个具体角色时所依据的模板或者蓝图。
  # 这个蓝本定义了要创建的角色的各种属性、行为等基本特征，例如角色可能是一辆车、一个行人或者其他游戏世界中的实体，不同的蓝本对应不同类型和特性的角色，通过它才能创建出符合要求的具体角色实例。

  - param_name: transform
    type: carla.Transform
    doc: >
      Contains the location and orientation the actor will be spawned with. 
  # 针对 `transform` 参数的解释：
  # 它的类型为 `carla.Transform`，这个参数承载了要创建的角色在游戏世界中初始的位置（location）和朝向（orientation）信息。
  # 位置信息决定了角色在世界坐标系中的具体坐标位置，而朝向信息则规定了角色面向的方向，通过这个参数就能确定角色最初出现在世界中的哪里以及面朝何方，是角色在世界中定位和姿态设定的关键依据。

  - param_name: attach_to 
    type: carla.Actor
    default: None
    doc: > 
      The parent object that the spawned actor will follow around. 
  # 关于 `attach_to` 参数的阐述：
  # 它是 `carla.Actor` 类型，默认值为 `None`，代表着一个父级对象，也就是新创建出来的角色可以依附的对象。
  # 如果指定了某个已存在的角色作为父级对象，那么新创建的这个角色将会跟随这个父级对象进行相应的移动、旋转等变化，就好像是附属在父级对象上一样，例如车辆上挂载的摄像头等设备就可以通过这种方式依附在车辆这个父级对象上，随车辆一同运动。

  - param_name: attachment
    type: carla.AttachmentType
    default: Rigid
    doc: > 
      Determines how fixed and rigorous should be the changes in position according to its parent object. 
  # 对 `attachment` 参数的详细说明：
  # 其类型为 `carla.AttachmentType`，默认值是 `Rigid`（刚性的意思），这个参数用于确定新创建的角色相对于其父级对象在位置变化方面的特性。
  # 不同的附着类型（`AttachmentType`）决定了角色跟随父级对象移动时，位置变化的严格程度或者说固定程度，比如刚性附着（`Rigid`）可能意味着角色与父级对象之间的相对位置关系非常固定，在父级对象移动、旋转等操作时，角色会严格按照某种固定规则跟随变化；而可能存在的其他附着类型会有不同的位置跟随方式，体现出不同的灵活性或约束性。

  doc: >
    The method will create, return and spawn an actor into the world. The actor will need an available blueprint to be created and a transform (location and rotation). It can also be attached to a parent with a certain attachment type. 
  # 对 `spawn_actor` 函数整体功能的进一步描述：
  # 这个函数的主要作用就是在游戏世界中创建、返回并实际生成（spawn）一个角色（actor）。
  # 要成功创建一个角色，首先需要一个可用的蓝图（通过 `blueprint` 参数指定）来定义角色的基本属性和行为，同时需要通过 `transform` 参数来明确角色初始的位置和旋转信息，以此确定其在世界中的放置情况。
  # 此外，还可以选择通过 `attach_to` 参数指定一个父级对象，并利用 `attachment` 参数设定附着的类型，使得新创建的角色能够以特定的方式依附到父级对象上，实现与其他对象之间在运动等方面的关联关系，满足游戏世界中各种复杂的实体布局和交互需求。
# --------------------------------------
    # --------------------------------------
    # --------------------------------------
# `try_spawn_actor` 函数的定义说明部分
# 以下是关于 `try_spawn_actor` 函数详细的文档信息，包括函数的返回值类型、参数情况以及其与 `spawn_actor` 函数对比的功能特点描述等内容
- def_name: try_spawn_actor
  return: carla.Actor
  params:
  - param_name: blueprint
    type: carla.ActorBlueprint
    doc: >
      The reference from which the actor will be created. 
  # 对 `blueprint` 参数的解释：
  # 此参数类型为 `carla.ActorBlueprint`，和 `spawn_actor` 函数里对应的参数功能一致，它是创建角色（actor）所依据的参考蓝本，也就是规定了要生成的角色具体是什么样的一个模板，例如是何种类型的车辆、行人或者其他游戏世界中的实体等，依据它才能构建出相应特性的角色实例。

  - param_name: transform
    type: carla.Transform
    doc: >
      Contains the location and orientation the actor will be spawned with. 
  # 针对 `transform` 参数的说明：
  # 其类型为 `carla.Transform`，同样和 `spawn_actor` 函数里该参数作用相同，它包含了要创建的角色最初出现在游戏世界时的位置（location）和朝向（orientation）信息，确定了角色在世界坐标系中的具体坐标位置以及面向的方向，用于精准定位角色的初始状态。

  - param_name: attach_to 
    type: carla.Actor
    default: None
    doc: > 
      The parent object that the spawned actor will follow around. 
  # 关于 `attach_to` 参数的阐述：
  # 该参数属于 `carla.Actor` 类型，默认值为 `None`，作用与 `spawn_actor` 函数里的对应参数一样，它表示新创建出来的角色可以依附的父级对象。若指定了某个已存在的角色作为父级对象，那么新创建的角色就会随着这个父级对象一同移动、旋转等，形成一种附属跟随的关系，比如在模拟场景中一些传感器依附在车辆上的情况就可以通过这个参数来设置。

  - param_name: attachment
    type: carla.AttachmentType
    default: Rigid
    doc: > 
      Determines how fixed and rigorous should be the changes in position according to its parent object. 
  # 对 `attachment` 参数的详细解释：
  # 它的类型是 `carla.AttachmentType`，默认值为 `Rigid`，和 `spawn_actor` 函数里此参数的用途相同，用于决定新创建的角色相对于父级对象在位置变化方面的特性，不同的附着类型（`AttachmentType`）规定了角色跟随父级对象运动时，其位置变化的严格程度和固定程度，像刚性附着（`Rigid`）就意味着位置关系比较固定，会按照严格规则跟随父级对象变动，其他附着类型则有不同的跟随方式和约束情况。

  doc: >
    Same as __<font color="#7fb800">spawn_actor()</font>__ but returns <b>None</b> on failure instead of throwing an exception.
  # 对 `try_spawn_actor` 函数整体功能特点的描述：
  # 强调这个函数和 `spawn_actor` 函数（通过特定颜色标记的 `<font color="#7fb800">spawn_actor()</font>` 突出显示，方便对比查看）在功能上基本是相同的，都是用于在游戏世界中创建并生成一个角色（actor），并且都需要通过上述的几个参数来指定创建角色的蓝本、初始位置姿态以及是否依附父级对象和附着类型等信息。
  # 但是二者有一个关键区别，当创建角色的过程中出现失败情况时，`try_spawn_actor` 函数不会像 `spawn_actor` 函数那样抛出异常（导致程序可能因异常中断执行），而是会返回 `None`，这样在使用 `try_spawn_actor` 函数时，开发者可以通过判断返回值是否为 `None` 来知晓创建角色是否成功，进而采取相应的后续处理逻辑，使得程序在面对可能的创建失败场景时能更优雅、稳定地处理，避免因异常而意外终止运行。
# --------------------------------------
    # --------------------------------------
    - def_name: get_actor
      return: carla.Actor
      params:
      - param_name: actor_id
        type: int
      doc: >
        Looks up for an actor by ID and returns <b>None</b> if not found.
    # --------------------------------------
    - def_name: get_actors
      return: carla.ActorList
      params:
      - param_name: actor_ids
        type: list
        default: None
        doc: >
          The IDs of the actors being searched. By default it is set to <b>None</b> and returns every actor on scene. 
      doc: >
        Retrieves a list of carla.Actor elements, either using a list of IDs provided or just listing everyone on stage. If an ID does not correspond with any actor, it will be excluded from the list returned, meaning that both the list of IDs and the list of actors may have different lengths. 
    # --------------------------------------
    - def_name: get_blueprint_library
      return: carla.BlueprintLibrary
      doc: >
        Returns a list of actor blueprints available to ease the spawn of these into the world.
    # --------------------------------------
    - def_name: get_vehicles_light_states
      return: dict
      doc: >
        Returns a dict where the keys are carla.Actor IDs and the values are carla.VehicleLightState of that vehicle.
    # --------------------------------------
    - def_name: get_level_bbs
      params:
      - param_name: actor_type
        type: carla.CityObjectLabel
        default: Any
        doc: > 
          Semantic tag of the elements contained in the bounding boxes that are returned. 
      return: array(carla.BoundingBox)
      doc: >
        Returns an array of bounding boxes with location and rotation in world space. The method returns all the bounding boxes in the level by default, but the query can be filtered by semantic tags with the argument `actor_type`. 
    # --------------------------------------
    - def_name: get_environment_objects
      params:
      - param_name: object_type
        type: carla.CityObjectLabel
        default: Any
        doc: > 
          Semantic tag of the EnvironmentObjects that are returned. 
      return: array(carla.EnvironmentObject)
      doc: >
        Returns a list of EnvironmentObject with the requested semantic tag. 
        The method returns all the EnvironmentObjects in the level by default, but the query can be filtered by semantic tags with the argument `object_type`. 
    # --------------------------------------
    - def_name: enable_environment_objects
      params:
      - param_name: env_objects_ids
        type: set(int)
        doc: > 
          Set of EnvironmentObject ids to change.
      - param_name: enable
        type: bool
        doc: > 
          State to be applied to all the EnvironmentObject of the set.
      doc: >
        Enable or disable a set of EnvironmentObject identified by their id. These objects will appear or disappear from the level.
    # --------------------------------------
    - def_name: get_lightmanager
      return: carla.LightManager
      doc: >
        Returns an instance of carla.LightManager that can be used to handle the lights in the scene. 
    # --------------------------------------
    - def_name: freeze_all_traffic_lights
      params:
        - param_name: frozen
          type: bool
      doc: >
        Freezes or unfreezes all traffic lights in the scene. Frozen traffic lights can be modified by the user but the time will not update them until unfrozen. 
    # --------------------------------------
    - def_name: reset_all_traffic_lights
      doc: >
        Resets the cycle of all traffic lights in the map to the initial state.
    # --------------------------------------
    - def_name: get_map
      return: carla.Map
      doc: >
        Asks the server for the XODR containing the map file, and returns this parsed as a carla.Map.
      warning: >
        This method does call the simulation. It is expensive, and should only be called once.  
    # --------------------------------------
    - def_name: get_traffic_light
      return: carla.TrafficLight
      params:
      - param_name: landmark
        type: carla.Landmark
        doc: >
          The landmark object describing a traffic light. 
      doc: >
        Provided a landmark, returns the traffic light object it describes. 
    # --------------------------------------
    - def_name: get_traffic_light_from_opendrive_id
      return: carla.TrafficLight
      params:
      - param_name: traffic_light_id
        type: str
        doc: >
          The OpenDRIVE id.
      doc: >
        Returns the traffic light actor corresponding to the indicated OpenDRIVE id.
    # --------------------------------------
    - def_name: get_traffic_lights_from_waypoint
      return: list(carla.TrafficLight)
      params:
      - param_name: waypoint
        type: carla.Waypoint
        doc: >
          The input waypoint.
      - param_name: distance
        type: float
        doc: >
          Search distance.
      doc: >
        This function performs a search along the road in front of the specified waypoint and returns a list of traffic light actors found in the specified search distance.
    # --------------------------------------
    - def_name: get_traffic_lights_in_junction
      return: list(carla.TrafficLight)
      params:
      - param_name: junction_id
        type: int
        doc: >
          The id of the junction.
      doc: >
        Returns the list of traffic light actors affecting the junction indicated in `junction_id`.
    # --------------------------------------
    - def_name: get_traffic_sign
      return: carla.TrafficSign
      params:
      - param_name: landmark
        type: carla.Landmark
        doc: >
          The landmark object describing a traffic sign. 
      doc: >
        Provided a landmark, returns the traffic sign object it describes. 
    # --------------------------------------
    - def_name: get_random_location_from_navigation
      return: carla.Location
      doc: >
        This can only be used with walkers. It retrieves a random location to be used as a destination using the __<font color="#7fb800">go_to_location()</font>__ method in carla.WalkerAIController. This location will be part of a sidewalk. Roads, crosswalks and grass zones are excluded. The method does not take into consideration locations of existing actors so if a collision happens when trying to spawn an actor, it will return an error. Take a look at [`generate_traffic.py`](https://github.com/carla-simulator/carla/blob/master/PythonAPI/examples/generate_traffic.py) for an example.
    # --------------------------------------
    - def_name: get_settings
      return: carla.WorldSettings
      doc: >
        Returns an object containing some data about the simulation such as synchrony between client and server or rendering mode.
    # --------------------------------------
    - def_name: get_snapshot
      return: carla.WorldSnapshot
      doc: >
        Returns a snapshot of the world at a certain moment comprising all the information about the actors.
    # --------------------------------------
    - def_name: get_spectator
      return: carla.Actor
      doc: >
        Returns the spectator actor. The spectator is a special type of actor created by Unreal Engine, usually with ID=0, that acts as a camera and controls the view in the simulator window.
    # --------------------------------------
    - def_name: get_weather
      return: carla.WeatherParameters
      doc: >
        Retrieves an object containing weather parameters currently active in the simulation, mainly cloudiness, precipitation, wind and sun position.
    # --------------------------------------
    - def_name: set_weather
      params: 
      - param_name: weather
        type: carla.WeatherParameters
        doc: > 
          New conditions to be applied. 
      doc: >
        Changes the weather parameteres ruling the simulation to another ones defined in an object. 
    # --------------------------------------
    - def_name: cast_ray
      return: list(carla.LabelledPoint)
      params:
      - param_name: initial_location
        type: carla.Location
        doc: >
          The initial position of the ray.
      - param_name: final_location
        type: carla.Location
        doc: >
          The final position of the ray.
      doc: >
        Casts a ray from the specified initial_location to final_location. The function then detects all geometries intersecting the ray and returns a list of carla.LabelledPoint in order.
    # --------------------------------------
    - def_name: project_point
      return: carla.LabelledPoint
      params:
      - param_name: location
        type: carla.Location
        doc: >
          The point to be projected.
      - param_name: direction
        type: carla.Vector3D
        doc: >
          The direction of projection.
      - param_name: search_distance
        type: float
        doc: >
          The maximum distance to perform the projection
      doc: >
        Projects the specified point to the desired direction in the scene. The functions casts a ray from location in a direction and returns a carla.Labelled object with the first geometry this ray intersects. If no geometry is found in the search_distance range the function returns `None`.
    # --------------------------------------
    - def_name: ground_projection
      return: carla.LabelledPoint
      params:
      - param_name: location
        type: carla.Location
        doc: >
          The point to be projected.
      - param_name: search_distance
        type: float
        doc: >
          The maximum distance to perform the projection
      doc: >
        Projects the specified point downwards in the scene. The functions casts a ray from location in the direction (0,0,-1) (downwards) and returns a carla.LabelledPoint object with the first geometry this ray intersects (usually the ground). If no geometry is found in the search_distance range the function returns `None`.
    # --------------------------------------
    - def_name: load_map_layer
      params: 
      - param_name: map_layers
        type: carla.MapLayer
        doc: > 
          Mask of level layers to be loaded. 
      doc: >
        Loads the selected layers to the level.
        If the layer is already loaded the call has no effect.
      warning: This only affects "Opt" maps. The minimum layout includes roads, sidewalks, traffic lights and traffic signs.
    # --------------------------------------
    - def_name: unload_map_layer
      params: 
      - param_name: map_layers
        type: carla.MapLayer
        doc: > 
          Mask of level layers to be unloaded. 
      doc: >
        Unloads the selected layers to the level.
        If the layer is already unloaded the call has no effect.
      warning: This only affects "Opt" maps. The minimum layout includes roads, sidewalks, traffic lights and traffic signs.
    # --------------------------------------
    - def_name: set_pedestrians_cross_factor
      params:
      - param_name: percentage
        type: float
        doc: >
          Sets the percentage of pedestrians that can walk on the road or cross at any point on the road. Value should be between `0.0` and `1.0`. For example, a value of `0.1` would allow 10% of pedestrians to walk on the road. __Default is `0.0`__.
      note: >
        Should be set before pedestrians are spawned.
    # --------------------------------------
    - def_name: set_pedestrians_seed
      params:
      - param_name: seed
        type: int
        doc: >
          Sets the seed to use for any random number generated in relation to pedestrians.
      note: >
        Should be set before pedestrians are spawned.
        If you want to repeat the same exact bodies (blueprint) for each pedestrian, then use the same seed in the Python code (where the blueprint is choosen randomly) and here, otherwise the pedestrians will repeat the same paths but the bodies will be different.
    # --------------------------------------
    - def_name: apply_color_texture_to_object
      params:
      - param_name: object_name
        type: str
      - param_name: material_parameter
        type: carla.MaterialParameter
      - param_name: texture
        type: TextureColor
      doc: >
        Applies a `texture` object in the field corresponfing to `material_parameter` (normal, diffuse, etc) to the object in the scene corresponding to `object_name`.
    # --------------------------------------
    - def_name: apply_float_color_texture_to_object
      params:
      - param_name: object_name
        type: str
      - param_name: material_parameter
        type: carla.MaterialParameter
      - param_name: texture
        type: TextureFloatColor
      doc: >
        Applies a `texture` object in the field corresponfing to `material_parameter` (normal, diffuse, etc) to the object in the scene corresponding to `object_name`.
    # --------------------------------------
    - def_name: apply_textures_to_object
      params:
      - param_name: object_name
        type: str
      - param_name: diffuse_texture
        type: TextureColor
      - param_name: emissive_texture
        type: TextureFloatColor
      - param_name: normal_texture
        type: TextureFloatColor
      - param_name: ao_roughness_metallic_emissive_texture
        type: TextureFloatColor
      doc: >
        Applies all texture fields in carla.MaterialParameter to the object `object_name`. Empty textures here will not be applied.
    # --------------------------------------
    - def_name: apply_color_texture_to_objects
      params:
      - param_name: objects_name_list
        type: list(str)
      - param_name: material_parameter
        type: carla.MaterialParameter
      - param_name: texture
        type: TextureColor
      doc: >
        Applies a `texture` object in the field corresponfing to `material_parameter` (normal, diffuse, etc) to the object in the scene corresponding to all objects in `objects_name_list`.
    # --------------------------------------
    - def_name: apply_float_color_texture_to_objects
      params:
      - param_name: objects_name_list
        type: list(str)
      - param_name: material_parameter
        type: carla.MaterialParameter
      - param_name: texture
        type: TextureFloatColor
      doc: >
        Applies a `texture` object in the field corresponfing to `material_parameter` (normal, diffuse, etc) to the object in the scene corresponding to all objects in `objects_name_list`.
    # --------------------------------------
    - def_name: apply_textures_to_objects
      params:
      - param_name: objects_name_list
        type: list(str)
      - param_name: diffuse_texture
        type: TextureColor
      - param_name: emissive_texture
        type: TextureFloatColor
      - param_name: normal_texture
        type: TextureFloatColor
      - param_name: ao_roughness_metallic_emissive_texture
        type: TextureFloatColor
      doc: >
        Applies all texture fields in carla.MaterialParameter to all objects in `objects_name_list`. Empty textures here will not be applied.
    # --------------------------------------
    - def_name: get_names_of_all_objects
      return: list(str)
      doc: >
        Returns a list of the names of all objects in the scene that can be painted with the apply texture functions.
    # --------------------------------------
    - def_name: __str__
      return:
        string
      doc: >
        The content of the world is parsed and printed as a brief report of its current state. 
    # --------------------------------------

  - class_name: DebugHelper
    # - DESCRIPTION ------------------------
    doc: >
      Helper class part of carla.World that defines methods for creating debug shapes. By default, shapes last one second. They can be permanent, but take into account the resources needed to do so. Take a look at the snipets available for this class to learn how to debug easily in CARLA.
    # - METHODS ----------------------------
    methods:
    - def_name: draw_arrow
      params:
      - param_name: begin
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the arrow starts. 
      - param_name: end
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the arrow ends and points towards to. 
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the line.  
      - param_name: arrow_size
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Size of the tip of the arrow. 
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default. 
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes. 
      doc: >
        Draws an arrow from `begin` to `end` pointing in that direction.

    # --------------------------------------
    - def_name: draw_box
      params:
      - param_name: box
        type: carla.BoundingBox
        doc: >
          Object containing a location and the length of a box for every axis. 
      - param_name: rotation
        type: carla.Rotation
        param_units: degrees (pitch,yaw,roll)
        doc: >
          Orientation of the box according to Unreal Engine's axis system. 
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the lines that define the box. 
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default. 
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes. 
      doc: >
        Draws a box, usually to act for object colliders.

    # --------------------------------------
    - def_name: draw_hud_arrow
      params:
      - param_name: begin
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the arrow starts.
      - param_name: end
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the arrow ends and points towards to.
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the line.
      - param_name: arrow_size
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Size of the tip of the arrow.
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default.
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes.
      doc: >
        Draws an arrow on the HUD from `begin` to `end` which can only be seen server-side.

    # --------------------------------------
    - def_name: draw_hud_box
      params:
      - param_name: box
        type: carla.BoundingBox
        doc: >
          Object containing a location and the length of a box for every axis.
      - param_name: rotation
        type: carla.Rotation
        param_units: degrees (pitch,yaw,roll)
        doc: >
          Orientation of the box according to Unreal Engine's axis system.
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the lines that define the box.
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default.
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes.
      doc: >
        Draws a box on the HUD, usually to act for object colliders. The box can only be seen server-side.

    # --------------------------------------
    - def_name: draw_hud_line
      params:
      - param_name: begin
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the line starts.
      - param_name: end
        type: carla.Location
        param_units: meters
        doc: >
          Spot in the coordinate system where the line ends.
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the line.
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default.
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes.
      doc: >
        Draws a line on the HUD in between `begin` and `end`. The line can only be seen server-side.

    # --------------------------------------
    - def_name: draw_hud_point
      params:
      - param_name: location
        type: carla.Location
        param_units: meters
        doc: >
          Spot in the coordinate system to center the object.
      - param_name: size
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the point.
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default.
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes.
      doc: >
        Draws a point on the HUD at `location`. The point can only be seen server-side.

    # --------------------------------------
    - def_name: draw_line
      params:
      - param_name: begin
        type: carla.Location
        param_units: meters
        doc: >
          Point in the coordinate system where the line starts. 
      - param_name: end
        type: carla.Location
        param_units: meters
        doc: >
          Spot in the coordinate system where the line ends. 
      - param_name: thickness
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the line.  
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default.
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes. 
      doc: >
        Draws a line in between `begin` and `end`.
    # --------------------------------------
    - def_name: draw_point
      params: 
      - param_name: location
        type: carla.Location
        param_units: meters
        doc: >
          Spot in the coordinate system to center the object. 
      - param_name: size
        type: float
        default: 0.1
        param_units: meters
        doc: >
          Density of the point.  
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the object. Red by default. 
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes. 
      doc: >
        Draws a point `location`.
    # --------------------------------------
    - def_name: draw_string
      params: 
      - param_name: location
        type: carla.Location
        param_units: meters
        doc: >
          Spot in the simulation where the text will be centered. 
      - param_name: text
        type: str
        doc: >
          Text intended to be shown in the world. 
      - param_name: draw_shadow
        type: bool
        default: False
        doc: >
          Casts a shadow for the string that could help in visualization. It is disabled by default.
      - param_name: color
        type: carla.Color
        default: (255,0,0)
        doc: >
          RGB code to color the string. Red by default. 
      - param_name: life_time
        type: float
        default: -1.0
        param_units: seconds
        doc: >
          Shape's lifespan. By default it only lasts one frame. Set this to <code>0</code> for permanent shapes. 
      doc: >
        Draws a string in a given location of the simulation which can only be seen server-side.
    # --------------------------------------
...
