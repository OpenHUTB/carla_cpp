---# 定义了一个名为 carla 的模块，其中包含了与 CARLA 模拟器中地图相关的类。
- module_name: carla
  # 定义了模块中的类-----------
  classes: # 定义了一个名为 LaneType 的枚举类，包含了 OpenDRIVE 1.4 标准中定义的可能的车道类型。
  - class_name: LaneType
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the possible lane types accepted by OpenDRIVE 1.4. This standards define the road information. The snipet in carla.Map.get_waypoint makes use of a waypoint to get the current and adjacent lane types.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: NONE
      doc: >
    - var_name: Driving
      doc: >
    - var_name: Stop
      doc: >
    - var_name: Shoulder
      doc: >
    - var_name: Biking
      doc: >
    - var_name: Sidewalk
      doc: >
    - var_name: Border
      doc: >
    - var_name: Restricted
      doc: >
    - var_name: Parking
      doc: >
    - var_name: Bidirectional
      doc: >
    - var_name: Median
      doc: >
    - var_name: Special1
      doc: >
    - var_name: Special2
      doc: >
    - var_name: Special3
      doc: >
    - var_name: RoadWorks
      doc: >
    - var_name: Tram
      doc: >
    - var_name: Rail
      doc: >
    - var_name: Entry
      doc: >
    - var_name: Exit
      doc: >
    - var_name: OffRamp
      doc: >
    - var_name: OnRamp
      doc: >
    - var_name: Any
      doc: >
        Every type except for NONE.
 # 定义了一个名为 LaneChange 的枚举类，包含了允许左转、右转、两者都允许或不允许（只能直行）的权限。
  - class_name: LaneChange
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the permission to turn either left, right, both or none (meaning only going straight is allowed). This information is stored for every carla.Waypoint according to the OpenDRIVE file. The snipet in carla.Map.get_waypoint shows how a waypoint can be used to learn which turns are permitted.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: NONE
      doc: >
        Traffic rules do not allow turning right or left, only going straight.
    - var_name: Right
      doc: >
        Traffic rules allow turning right.
    - var_name: Left
      doc: >
        Traffic rules allow turning left.
    - var_name: Both
      doc: >
        Traffic rules allow turning either right or left.
# 定义了一个名为 LaneMarkingColor 的枚举类，包含了 OpenDRIVE 1.4 标准中定义的车道标记颜色。
  - class_name: LaneMarkingColor
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the lane marking colors according to OpenDRIVE 1.4.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Standard
      doc: >
        White by default.
    - var_name: Blue
      doc: >
    - var_name: Green
      doc: >
    - var_name: Red
      doc: >
    - var_name: White
      doc: >
    - var_name: Yellow
      doc: >
    - var_name: Other
      doc: >
# 定义了一个名为 LaneMarkingType 的枚举类，包含了 OpenDRIVE 1.4 标准中接受的车道标记类型。
  - class_name: LaneMarkingType
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines the lane marking types accepted by OpenDRIVE 1.4. The snipet in carla.Map.get_waypoint shows how a waypoint can be used to retrieve the information about adjacent lane markings.  
      <br><br>
      __Note on double types:__ Lane markings are defined under the OpenDRIVE standard that determines whereas a line will be considered "BrokenSolid" or "SolidBroken". For each road there is a center lane marking, defined from left to right regarding the lane's directions. The rest of the lane markings are defined in order from the center lane to the closest outside of the road.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: NONE
      doc: >
    - var_name: Other
      doc: >
    - var_name: Broken
      doc: >
    - var_name: Solid
      doc: >
    - var_name: SolidSolid
      doc: >
    - var_name: SolidBroken
      doc: >
    - var_name: BrokenSolid
      doc: >
    - var_name: BrokenBroken
      doc: >
    - var_name: BottsDots
      doc: >
    - var_name: Grass
      doc: >
    - var_name: Curb
      doc: >
# 定义了一个名为 Map 的类，包含了道路信息和航点管理。
  - class_name: Map
    # - DESCRIPTION ------------------------
    doc: >
      Class containing the road information and waypoint managing. Data is retrieved from an OpenDRIVE file that describes the road. A query system is defined which works hand in hand with carla.Waypoint to translate geometrical information from the .xodr to natural world points. CARLA is currently working with [OpenDRIVE 1.4 standard](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf).
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: name
      type: str
      doc: >
        The name of the map. It corresponds to the .umap from Unreal Engine that is loaded from a CARLA server, which then references to the .xodr road description.# 地图名称，对应于从CARLA服务器加载的Unreal Engine中的 .umap 文件，随后引用到 .xodr 道路描述文件。
    # - METHODS ----------------------------
    methods:
    - def_name: __init__
      params:
      - param_name: name
        type: str
        doc: >
          Name of the current map.# 当前地图的名称。
      - param_name: xodr_content
        type: str
        doc: >
          .xodr content in string format.
      return: list(carla.Transform)
      doc: >
        Constructor for this class. Though a map is automatically generated when initializing the world, using this method in no-rendering mode facilitates working with an .xodr without any CARLA server running.# 该类的构造函数。尽管在初始化世界时会自动生成地图，但在不渲染模式下使用此方法可以在没有CARLA服务器运行的情况下处理 .xodr 文件。
    # --------------------------------------
    - def_name: generate_waypoints
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          Approximate distance between waypoints.# 每个路点之间的大致距离。
      return: list(carla.Waypoint)
      doc: >
        Returns a list of waypoints with a certain distance between them for every lane and centered inside of it. Waypoints are not listed in any particular order. Remember that waypoints closer than 2cm within the same road, section and lane will have the same identificator.# 返回一系列道路上各车道的路点，这些路点之间保持指定的距离，并位于车道的中心。路点的顺序没有特别要求。请注意，距离不到2cm的路点将在同一条道路、段落和车道内具有相同的标识符。
    # --------------------------------------
    - def_name: save_to_disk
      params:
      - param_name: path
        doc: >
          Path where the file will be saved.
      doc: >
        Saves the .xodr OpenDRIVE file of the current map to disk.
    # --------------------------------------
    - def_name: to_opendrive
      doc: >
        Returns the .xodr OpenDRIVe file of the current map as string.
      return: str
    # --------------------------------------
    - def_name: transform_to_geolocation
      params:
      - param_name: location
        type: carla.Location
      return: carla.GeoLocation
      doc: >
        Converts a given `location`, a point in the simulation, to a carla.GeoLocation, which represents world coordinates. The geographical location of the map is defined inside OpenDRIVE within the tag <b> # 将给定的 `location`（模拟中的某个点）转换为 carla.GeoLocation，表示世界坐标。地图的地理位置在 OpenDRIVE 文件中的 <b><georeference></b> 标签内定义。<georeference></b>.
    # --------------------------------------
    - def_name: get_all_landmarks
      doc: >
        Returns all the landmarks in the map. Landmarks retrieved using this method have a __null__ waypoint.
      return: list(carla.Landmark)# 返回地图中的所有地标。通过此方法检索到的地标具有 __null__ 路点。
    # --------------------------------------
    - def_name: get_all_landmarks_from_id
      doc: >
        Returns the landmarks with a certain OpenDRIVE ID. Landmarks retrieved using this method have a __null__ waypoint.
      params:
      - param_name: opendrive_id
        type: string
        doc: >
          The OpenDRIVE ID of the landmarks.
      return: list(carla.Landmark)# 返回具有特定 OpenDRIVE ID 的地标。通过此方法检索到的地标具有 __null__ 路点。
    # --------------------------------------
    - def_name: get_all_landmarks_of_type
      doc: >
        Returns the landmarks of a specific type. Landmarks retrieved using this method have a __null__ waypoint.
      params:
      - param_name: type
        type: string
        doc: >
          The type of the landmarks.
      return: list(carla.Landmark) # 返回特定类型的地标。通过此方法检索到的地标具有 __null__ 路点。
    # --------------------------------------
    - def_name: get_landmark_group
      doc: >
        Returns the landmarks in the same group as the specified landmark (including itself). Returns an empty list if the landmark does not belong to any group.
      params:
      - param_name: landmark
        type: carla.Landmark
        doc: >
          A landmark that belongs to the group.
      return: list(carla.Landmark)# 返回指定地标所在组中的所有地标（包括指定地标本身）。如果该地标不属于任何组，则返回空列表。
    # --------------------------------------
    - def_name: get_spawn_points
      return: list(carla.Transform)
      doc: >
        Returns a list of recommendations made by the creators of the map to be used as spawning points for the vehicles. The list includes carla.Transform objects with certain location and orientation. Said locations are slightly on-air in order to avoid Z-collisions, so vehicles fall for a bit before starting their way.# 返回一组由地图创建者推荐的车辆生成点。这些点包含 carla.Transform 对象，具有特定的位置和朝向。位置稍微位于空中，以避免 Z 轴碰撞，因此车辆会先下落一段时间再开始行驶。
    # --------------------------------------
    - def_name: get_topology
      doc: >
        Returns a list of tuples describing a minimal graph of the topology of the OpenDRIVE file. The tuples contain pairs of waypoints located either at the point a road begins or ends. The first one is the origin and the second one represents another road end that can be reached. This graph can be loaded into [NetworkX](https://networkx.github.io/) to work with. Output could look like this: <b>[(w0, w1), (w0, w2), (w1, w3), (w2, w3), (w0, w4)]</b>.
      return: list(tuple(carla.Waypoint, carla.Waypoint)) # 返回描述 OpenDRIVE 文件拓扑结构的最小图的元组列表。每个元组包含两个 waypoints，分别表示一条道路的起点和终点。第一个是起点，第二个是可以到达的另一个路段终点。这个图可以加载到 [NetworkX](https://networkx.github.io/) 中进行处理。输出示例：<b>[(w0, w1), (w0, w2), (w1, w3), (w2, w3), (w0, w4)]</b>。
    # --------------------------------------
    - def_name: get_waypoint
      doc: >
        Returns a waypoint that can be located in an exact location or translated to the center of the nearest lane. Said lane type can be defined using flags such as `LaneType.Driving & LaneType.Shoulder`.
         The method will return <b>None</b> if the waypoint is not found, which may happen only when trying to retrieve a waypoint for an exact location. That eases checking if a point is inside a certain road, as otherwise, it will return the corresponding waypoint.
      params:
      - param_name: location
        type: carla.Location
        param_units: meters
        doc: >
          Location used as reference for the carla.Waypoint.
      - param_name: project_to_road
        type: bool
        default: "True"
        doc: >
          If **True**, the waypoint will be at the center of the closest lane. This is the default setting. If **False**, the waypoint will be exactly in `location`. <b>None</b> means said location does not belong to a road.
      - param_name: lane_type
        type: carla.LaneType
        default: carla.LaneType.Driving
        doc: >
          Limits the search for nearest lane to one or various lane types that can be flagged.
      return: carla.Waypoint# 返回一个位于精确位置的 waypoint 或转换到最近车道中心的 waypoint。车道类型可以通过 `LaneType.Driving & LaneType.Shoulder` 等标志来定义。如果没有找到 waypoint，则返回 <b>None</b>，这种情况通常发生在请求获取精确位置的 waypoint 时。这样可以方便地检查某个点是否在某条道路上，否则它会返回相应的 waypoint。
    # --------------------------------------
    - def_name: get_waypoint_xodr
      doc: >
        Returns a waypoint if all the parameters passed are correct. Otherwise, returns __None__.
      params:
      - param_name: road_id
        type: int
        doc: >
          ID of the road to get the waypoint.
      - param_name: lane_id
        type: int
        doc: >
          ID of the lane to get the waypoint.
      - param_name: s
        type: float
        param_units: meters
        doc: >
          Specify the length from the road start.
      return: carla.Waypoint# 如果所有传入参数正确，则返回一个 waypoint；否则返回 __None__。
    # --------------------------------------
    - def_name: get_crosswalks
      doc: >
        Returns a list of locations with all crosswalk zones in the form of closed polygons. The first point is repeated, symbolizing where the polygon begins and ends.
      return: list(carla.Location) # 返回一个包含所有人行横道区域的点列表，区域以闭合多边形形式表示。第一个点重复，表示多边形的起点和终点。
    # --------------------------------------
    - def_name: cook_in_memory_map
      params:
      - param_name: path
        type: str
        doc: >
          Path to the intended location of the stored binary map file.
      doc: >
        Generates a binary file from the CARLA map containing information used by the Traffic Manager. This method is only used during the import process for maps.# 生成一个二进制文件，该文件来自 CARLA 地图，包含 Traffic Manager 使用的信息。此方法仅在导入地图的过程中使用。
    # --------------------------------------
    - def_name: __str__
    # --------------------------------------
# 定义了一个名为 LaneMarking 的类，汇总了有关车道标记的所有信息。
  - class_name: LaneMarking
    # - DESCRIPTION ------------------------
    doc: >
      Class that gathers all the information regarding a lane marking according to [OpenDRIVE 1.4 standard](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf) standard.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: color
      type: carla.LaneMarkingColor
      doc: >
        Actual color of the marking.
    - var_name: lane_change
      type: carla.LaneChange
      doc: >
        Permissions for said lane marking to be crossed.
    - var_name: type
      type: carla.LaneMarkingType
      doc: >
        Lane marking type.
    - var_name: width
      type: float
      doc: >
        Horizontal lane marking thickness.
    # --------------------------------------
# 定义了一个名为 Waypoint 的类，描述了 CARLA 中的 3D 有向点。
  - class_name: Waypoint
    # - DESCRIPTION ------------------------
    doc: >
      Waypoints in CARLA are described as 3D directed points. They have a carla.Transform which locates the waypoint in a road and orientates it according to the lane. They also store the road information belonging to said point regarding its lane and lane markings.  
      <br><br>
      All the information regarding waypoints and the [waypoint API](../../core_map/#navigation-in-carla) is retrieved as provided by the OpenDRIVE file. Once the client asks for the map object to the server, no longer communication will be needed.
    # - PROPERTIES -------------------------# CARLA中的Waypoints描述为3D定向点。它们有一个carla.Transform，定位在道路中的Waypoints，并根据车道方向进行定位。它们还存储与此点相关的道路信息，包括车道和车道标线信息。
      # 所有与Waypoints相关的信息及其[waypoint API](../../core_map/#navigation-in-carla)是根据OpenDRIVE文件提供的。一旦客户端向服务器请求地图对象，后续不再需要通信。
    instance_variables:
    - var_name: id
      type: int
      doc: >
        The identifier is generated using a hash combination of the <b>road</b>, <b>section</b>, <b>lane</b> and <b>s</b> values that correspond to said point in the OpenDRIVE geometry. The <b>s</b> precision is set to 2 centimeters, so 2 waypoints closer than 2 centimeters in the same road, section and lane, will have the same identificator.# 标识符是通过对OpenDRIVE几何体中的道路、段落、车道和s值进行哈希组合生成的。<b>s</b>的精度设置为2厘米，因此在相同的道路、段落和车道中，距离小于2厘米的两个Waypoints将具有相同的标识符。
    - var_name: transform
      type: carla.Transform
      doc: >
        Position and orientation of the waypoint according to the current lane information. This data is computed the first time it is accessed. It is not created right away in order to ease computing costs when lots of waypoints are created but their specific transform is not needed. # Waypoint的位置信息和方向信息，基于当前车道的信息。该数据会在首次访问时计算，而不是立即创建，以减少在创建大量Waypoints但不需要其具体变换时的计算成本。
    - var_name: road_id
      type: int
      doc: >
        OpenDRIVE road's id.
    - var_name: section_id
      type: int
      doc: >
        OpenDRIVE section's id, based on the order that they are originally defined.
    - var_name: is_junction
      type: bool
      doc: >
        <b>True</b> if the current Waypoint is on a junction as defined by OpenDRIVE. # 如果当前Waypoint位于OpenDRIVE定义的交叉口上，则为<b>True</b>。
    - var_name: junction_id
      type: int
      doc: >
        OpenDRIVE junction's id. For more information refer to OpenDRIVE [documentation](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf#page=20)
    - var_name: lane_id
      type: int
      doc: >
        OpenDRIVE lane's id, this value can be positive or negative which represents the direction of the current lane with respect to the road. For more information refer to OpenDRIVE [documentation](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf#page=20) # OpenDRIVE车道的ID，这个值可以是正数或负数，表示当前车道相对于道路的方向。更多信息请参阅OpenDRIVE [文档](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf#page=20)
    - var_name: s
      type: float
      param_units: meters
      doc: >
        OpenDRIVE <b>s</b> value of the current position.
    - var_name: lane_width
      type: float
      param_units: meters
      doc: >
        Horizontal size of the road at current <b>s</b>. # 当前<b>s</b>值对应的道路的横向尺寸（车道宽度）。
    - var_name: lane_change
      type: carla.LaneChange
      doc: >
        Lane change definition of the current Waypoint's location, based on the traffic rules defined in the OpenDRIVE file. It states if a lane change can be done and in which direction.# 当前Waypoint所在位置的车道变换定义，基于OpenDRIVE文件中定义的交通规则。它指示是否可以进行车道变换，以及变换的方向。
    - var_name: lane_type
      type: carla.LaneType
      doc: >
        The lane type of the current Waypoint, based on OpenDRIVE 1.4 standard.
    - var_name: right_lane_marking
      type: carla.LaneMarking
      doc: >
        The right lane marking information based on the direction of the Waypoint.
    - var_name: left_lane_marking
      type: carla.LaneMarking
      doc: >
        The left lane marking information based on the direction of the Waypoint.
    # - METHODS ----------------------------
    methods:
    - def_name: next
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          The approximate distance where to get the next waypoints.# 获取下一个Waypoints的预估距离。
      return: list(carla.Waypoint)
      doc: >
        Returns a list of waypoints at a certain approximate `distance` from the current one. It takes into account the road and its possible deviations without performing any lane change and returns one waypoint per option.

        The list may be empty if the lane is not connected to any other at the specified distance.# 返回距离当前Waypoint某一预估距离的Waypoint列表。它考虑到道路及其可能的偏离情况，不进行任何车道变换，并为每个选项返回一个Waypoint。
    # --------------------------------------
    - def_name: next_until_lane_end
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          The approximate distance between waypoints.
      return: list(carla.Waypoint)
      doc: >
        Returns a list of waypoints from this to the end of the lane separated by a certain `distance`. # 返回从当前Waypoint到车道尽头的一系列Waypoints，Waypoints之间的距离由`distance`指定。
    # --------------------------------------
    - def_name: previous
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          The approximate distance where to get the previous waypoints.
      return: list(carla.Waypoint)
      doc: >
        This method does not return the waypoint previously visited by an actor, but a list of waypoints at an approximate `distance` but in the opposite direction of the lane. Similarly to **<font color="#7fb800">next()</font>**, it takes into account the road and its possible deviations without performing any lane change and returns one waypoint per option.

        The list may be empty if the lane is not connected to any other at the specified distance.
    # --------------------------------------
    - def_name: previous_until_lane_start
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          The approximate distance between waypoints.
      return: list(carla.Waypoint)
      doc: >
        Returns a list of waypoints from this to the start of the lane separated by a certain `distance`.
    # --------------------------------------
    - def_name: get_junction
      return: carla.Junction
      doc: >
        If the waypoint belongs to a junction this method returns the associated junction object. Otherwise returns null.
    # --------------------------------------
    - def_name: get_landmarks
      params:
      - param_name: distance
        type: float
        param_units: meters
        doc: >
          The maximum distance to search for landmarks from the current waypoint.
      - param_name: stop_at_junction
        type: bool
        default: False
        doc: >
          Enables or disables the landmark search through junctions.
      return: list(carla.Landmark)
      doc: >
        Returns a list of landmarks in the road from the current waypoint until the specified distance.
    # --------------------------------------
    - def_name: get_landmarks_of_type
      params:
      - param_name: distance
        param_units: meters
        type: float
        doc: >
          The maximum distance to search for landmarks from the current waypoint.
      - param_name: type
        type: str
        doc: >
          The type of landmarks to search.
      - param_name: stop_at_junction
        type: bool
        default: False
        doc: >
          Enables or disables the landmark search through junctions.
      return: list(carla.Landmark)
      doc: >
        Returns a list of landmarks in the road of a specified type from the current waypoint until the specified distance.
    # --------------------------------------
    - def_name: get_left_lane
      return: carla.Waypoint
      doc: >
        Generates a Waypoint at the center of the left lane based on the direction of the current Waypoint, taking into account if the lane change is allowed in this location.

        Will return <b>None</b> if the lane does not exist
    # --------------------------------------
    - def_name: get_right_lane
      return: carla.Waypoint
      doc: >
        Generates a waypoint at the center of the right lane based on the direction of the current waypoint, taking into account if the lane change is allowed in this location.

        Will return <b>None</b> if the lane does not exist.
    # --------------------------------------
    - def_name: __str__
    # --------------------------------------
# 定义了一个名为 Junction 的类，体现了 OpenDRIVE 文件中描述的交叉路口。
  - class_name: Junction
    # - DESCRIPTION ------------------------
    doc: >
      Class that embodies the intersections on the road described in the OpenDRIVE file according to OpenDRIVE 1.4 standards.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: id
      type: int
      doc: >
        Identifier found in the OpenDRIVE file.
    - var_name: bounding_box
      type: carla.BoundingBox
      doc: >
        Bounding box encapsulating the junction lanes.
    # - METHODS ----------------------------
    methods:
    - def_name: get_waypoints
      params:
      - param_name: lane_type
        type: carla.LaneType
        doc: >
          Type of lanes to get the waypoints.
      return: list(tuple(carla.Waypoint))
      doc: >
        Returns a list of pairs of waypoints. Every tuple on the list contains first an initial and then a final waypoint within the intersection boundaries that describe the beginning and the end of said lane along the junction. Lanes follow their OpenDRIVE definitions so there may be many different tuples with the same starting waypoint due to possible deviations, as this are considered different lanes.
    # --------------------------------------
# 定义了一个名为 LandmarkOrientation 的辅助类，定义了道路上里程碑的方向。
  - class_name: LandmarkOrientation
    # - DESCRIPTION ------------------------
    doc: >
      Helper class to define the orientation of a landmark in the road. The definition is not directly translated from OpenDRIVE but converted for the sake of understanding.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Positive
      doc: >
        The landmark faces towards vehicles going on the same direction as the road's geometry definition (lanes 0 and negative in OpenDRIVE).
    - var_name: Negative
      doc: >
        The landmark faces towards vehicles going on the opposite direction to the road's geometry definition (positive lanes in OpenDRIVE).
    - var_name: Both
      doc: >
        Affects vehicles going in both directions of the road.
    # --------------------------------------
 # 定义了一个名为 LandmarkType 的辅助类，包含了一组常用的里程碑类型。
  - class_name: LandmarkType
    # - DESCRIPTION ------------------------
    doc: >
      Helper class containing a set of commonly used landmark types as defined by the default country code in the [OpenDRIVE standard](http://opendrive.org/docs/OpenDRIVEFormatSpecRev1.5M.pdf) (Germany 2017).

      __carla.Landmark does not reference this class__. The landmark type is a string that varies greatly depending on the country code being used. This class only makes it easier to manage some of the most commonly used in the default set by describing them as an enum.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: Danger
      doc: >
        Type 101.
    - var_name: LanesMerging
      doc: >
        Type 121.
    - var_name: CautionPedestrian
      doc: >
        Type 133.
    - var_name: CautionBicycle
      doc: >
        Type 138.
    - var_name: LevelCrossing
      doc: >
        Type 150.
    - var_name: StopSign
      doc: >
        Type 206.
    - var_name: YieldSign
      doc: >
        Type 205.
    - var_name: MandatoryTurnDirection
      doc: >
        Type 209.
    - var_name: MandatoryLeftRightDirection
      doc: >
        Type 211.
    - var_name: TwoChoiceTurnDirection
      doc: >
        Type 214.
    - var_name: Roundabout
      doc: >
        Type 215.
    - var_name: PassRightLeft
      doc: >
        Type 222.
    - var_name: AccessForbidden
      doc: >
        Type 250.
    - var_name: AccessForbiddenMotorvehicles
      doc: >
        Type 251.
    - var_name: AccessForbiddenTrucks
      doc: >
        Type 253.
    - var_name: AccessForbiddenBicycle
      doc: >
        Type 254.
    - var_name: AccessForbiddenWeight
      doc: >
        Type 263.
    - var_name: AccessForbiddenWidth
      doc: >
        Type 264.
    - var_name: AccessForbiddenHeight
      doc: >
        Type 265.
    - var_name: AccessForbiddenWrongDirection
      doc: >
        Type 267.
    - var_name: ForbiddenUTurn
      doc: >
        Type 272.
    - var_name: MaximumSpeed
      doc: >
        Type 274.
    - var_name: ForbiddenOvertakingMotorvehicles
      doc: >
        Type 276.
    - var_name: ForbiddenOvertakingTrucks
      doc: >
        Type 277.
    - var_name: AbsoluteNoStop
      doc: >
        Type 283.
    - var_name: RestrictedStop
      doc: >
        Type 286.
    - var_name: HasWayNextIntersection
      doc: >
        Type 301.
    - var_name: PriorityWay
      doc: >
        Type 306.
    - var_name: PriorityWayEnd
      doc: >
        Type 307.
    - var_name: CityBegin
      doc: >
        Type 310.
    - var_name: CityEnd
      doc: >
        Type 311.
    - var_name: Highway
      doc: >
        Type 330.
    - var_name: DeadEnd
      doc: >
        Type 357.
    - var_name: RecomendedSpeed
      doc: >
        Type 380.
    - var_name: RecomendedSpeedEnd
      doc: >
        Type 381.
    # --------------------------------------
# 定义了一个名为 Landmark 的类，定义了影响道路的任何类型的交通里程碑或标志。
  - class_name: Landmark
    # - DESCRIPTION ------------------------
    doc: >
      Class that defines any type of traffic landmark or sign affecting a road. These class mediates between the [OpenDRIVE 1.4 standard](http://www.opendrive.org/docs/OpenDRIVEFormatSpecRev1.4H.pdf) definition of the landmarks and their representation in the simulation.
      This class retrieves all the information defining a landmark in OpenDRIVE and facilitates information about which lanes does it affect and when.

      Landmarks will be accessed by carla.Waypoint objects trying to retrieve the regulation of their lane. Therefore some attributes depend on the waypoint that is consulting the landmark and so, creating the object.
    # - PROPERTIES -------------------------
    instance_variables:
    - var_name: road_id
      type: int
      doc: >
        The OpenDRIVE ID of the road where this landmark is defined. Due to OpenDRIVE road definitions, this road may be different from the road the landmark is currently affecting. It is mostly the case in junctions where the road diverges in different routes.

        <small>Example: a traffic light is defined in one of the divergent roads in a junction, but it affects all the possible routes</small>
    - var_name: distance
      type: float
      var_units: meters
      doc: >
        Distance between the landmark and the waypoint creating the object (querying `get_landmarks` or `get_landmarks_of_type`).
    - var_name: s
      type: float
      var_units: meters
      doc: >
        Distance where the landmark is positioned along the geometry of the road `road_id`.
    - var_name: t
      type: float
      var_units: meters
      doc: >
        Lateral distance where the landmark is positioned from the edge of the road `road_id`.
    - var_name: id
      type: str
      doc: >
        Unique ID of the landmark in the OpenDRIVE file.
    - var_name: name
      type: str
      doc: >
        Name of the landmark in the in the OpenDRIVE file.
    - var_name: is_dynamic
      type: bool
      doc: >
        Indicates if the landmark has state changes over time such as traffic lights.
    - var_name: orientation
      type: carla.LandmarkOrientation
      var_units: degrees
      doc: >
        Indicates which lanes the landmark is facing towards to.
    - var_name: z_offset
      type: float
      var_units: meters
      doc: >
        Height where the landmark is placed.
    - var_name: country
      type: str
      doc: >
        Country code where the landmark is defined (default to OpenDRIVE is Germany 2017).
    - var_name: type
      type: str
      doc: >
        Type identifier of the landmark according to the country code.
    - var_name: sub_type
      type: str
      doc: >
        Subtype identifier of the landmark according to the country code.
    - var_name: value
      type: float
      doc: >
        Value printed in the signal (e.g. speed limit, maximum weight, etc).
    - var_name: unit
      type: str
      doc: >
        Units of measurement for the attribute `value`.
    - var_name: height
      type: float
      var_units: meters
      doc: >
        Total height of the signal.
    - var_name: width
      type: float
      var_units: meters
      doc: >
        Total width of the signal.
    - var_name: text
      type: str
      doc: >
        Additional text in the signal.
    - var_name: h_offset
      type: float
      var_units: meters
      doc: >
        Orientation offset of the signal relative to the the definition of `road_id` at `s` in OpenDRIVE.
    - var_name: pitch
      type: float
      var_units: meters
      doc: >
        Pitch rotation of the signal (Y-axis in [UE coordinates system](https://carla.readthedocs.io/en/latest/python_api/#carlarotation)).
    - var_name: roll
      type: float
      doc: >
        Roll rotation of the signal (X-axis in [UE coordinates system](https://carla.readthedocs.io/en/latest/python_api/#carlarotation)).
    - var_name: waypoint
      type: carla.Waypoint
      doc: >
        A waypoint placed in the lane of the one that made the query and at the `s` of the landmark. It is the first waypoint for which the landmark will be effective.
    - var_name: transform
      type: carla.Transform
      doc: >
        The location and orientation of the landmark in the simulation.
    # - METHODS ----------------------------
    methods:
    - def_name: get_lane_validities
      return: list(tuple(int))
      doc: >
        Returns which lanes the landmark is affecting to. As there may be specific lanes where the landmark is not effective, the return is a list of pairs containing ranges of the __lane_id__ affected:

        <small>Example: In a road with 5 lanes, being 3 not affected: [(from_lane1,to_lane2),(from_lane4,to_lane5)]</small>
    # --------------------------------------
...
